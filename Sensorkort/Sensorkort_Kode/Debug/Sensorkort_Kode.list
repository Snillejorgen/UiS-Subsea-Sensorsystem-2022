
Sensorkort_Kode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d784  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800d910  0800d910  0001d910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da30  0800da30  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800da30  0800da30  0001da30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da38  0800da38  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da38  0800da38  0001da38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da3c  0800da3c  0001da3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800da40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00001de0  200001f8  200001f8  000201f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001fd8  20001fd8  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022791  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045fd  00000000  00000000  000429b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  00046fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001200  00000000  00000000  00048378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024516  00000000  00000000  00049578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a8d4  00000000  00000000  0006da8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c48ba  00000000  00000000  00088362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014cc1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005694  00000000  00000000  0014cc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f8 	.word	0x200001f8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d8f4 	.word	0x0800d8f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001fc 	.word	0x200001fc
 80001c4:	0800d8f4 	.word	0x0800d8f4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b9d8 	b.w	8001174 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f870 	bl	8000eb0 <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__aeabi_f2lz>:
 8000ddc:	ee07 0a90 	vmov	s15, r0
 8000de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de8:	d401      	bmi.n	8000dee <__aeabi_f2lz+0x12>
 8000dea:	f000 b823 	b.w	8000e34 <__aeabi_f2ulz>
 8000dee:	eef1 7a67 	vneg.f32	s15, s15
 8000df2:	b508      	push	{r3, lr}
 8000df4:	ee17 0a90 	vmov	r0, s15
 8000df8:	f000 f81c 	bl	8000e34 <__aeabi_f2ulz>
 8000dfc:	4240      	negs	r0, r0
 8000dfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e02:	bd08      	pop	{r3, pc}

08000e04 <__aeabi_d2lz>:
 8000e04:	b538      	push	{r3, r4, r5, lr}
 8000e06:	2200      	movs	r2, #0
 8000e08:	2300      	movs	r3, #0
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	460d      	mov	r5, r1
 8000e0e:	f7ff fe09 	bl	8000a24 <__aeabi_dcmplt>
 8000e12:	b928      	cbnz	r0, 8000e20 <__aeabi_d2lz+0x1c>
 8000e14:	4620      	mov	r0, r4
 8000e16:	4629      	mov	r1, r5
 8000e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e1c:	f000 b82a 	b.w	8000e74 <__aeabi_d2ulz>
 8000e20:	4620      	mov	r0, r4
 8000e22:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000e26:	f000 f825 	bl	8000e74 <__aeabi_d2ulz>
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e30:	bd38      	pop	{r3, r4, r5, pc}
 8000e32:	bf00      	nop

08000e34 <__aeabi_f2ulz>:
 8000e34:	b5d0      	push	{r4, r6, r7, lr}
 8000e36:	f7ff fb2b 	bl	8000490 <__aeabi_f2d>
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__aeabi_f2ulz+0x38>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4606      	mov	r6, r0
 8000e40:	460f      	mov	r7, r1
 8000e42:	f7ff fb7d 	bl	8000540 <__aeabi_dmul>
 8000e46:	f000 f997 	bl	8001178 <__aeabi_d2uiz>
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	f7ff fafe 	bl	800044c <__aeabi_ui2d>
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <__aeabi_f2ulz+0x3c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	f7ff fb74 	bl	8000540 <__aeabi_dmul>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	4639      	mov	r1, r7
 8000e60:	f7ff f9b6 	bl	80001d0 <__aeabi_dsub>
 8000e64:	f000 f988 	bl	8001178 <__aeabi_d2uiz>
 8000e68:	4621      	mov	r1, r4
 8000e6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e6c:	3df00000 	.word	0x3df00000
 8000e70:	41f00000 	.word	0x41f00000

08000e74 <__aeabi_d2ulz>:
 8000e74:	b5d0      	push	{r4, r6, r7, lr}
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <__aeabi_d2ulz+0x34>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4606      	mov	r6, r0
 8000e7c:	460f      	mov	r7, r1
 8000e7e:	f7ff fb5f 	bl	8000540 <__aeabi_dmul>
 8000e82:	f000 f979 	bl	8001178 <__aeabi_d2uiz>
 8000e86:	4604      	mov	r4, r0
 8000e88:	f7ff fae0 	bl	800044c <__aeabi_ui2d>
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <__aeabi_d2ulz+0x38>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f7ff fb56 	bl	8000540 <__aeabi_dmul>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4630      	mov	r0, r6
 8000e9a:	4639      	mov	r1, r7
 8000e9c:	f7ff f998 	bl	80001d0 <__aeabi_dsub>
 8000ea0:	f000 f96a 	bl	8001178 <__aeabi_d2uiz>
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ea8:	3df00000 	.word	0x3df00000
 8000eac:	41f00000 	.word	0x41f00000

08000eb0 <__udivmoddi4>:
 8000eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb4:	9d08      	ldr	r5, [sp, #32]
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	468c      	mov	ip, r1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 8083 	bne.w	8000fc6 <__udivmoddi4+0x116>
 8000ec0:	428a      	cmp	r2, r1
 8000ec2:	4617      	mov	r7, r2
 8000ec4:	d947      	bls.n	8000f56 <__udivmoddi4+0xa6>
 8000ec6:	fab2 f282 	clz	r2, r2
 8000eca:	b142      	cbz	r2, 8000ede <__udivmoddi4+0x2e>
 8000ecc:	f1c2 0020 	rsb	r0, r2, #32
 8000ed0:	fa24 f000 	lsr.w	r0, r4, r0
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	4097      	lsls	r7, r2
 8000ed8:	ea40 0c01 	orr.w	ip, r0, r1
 8000edc:	4094      	lsls	r4, r2
 8000ede:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ee2:	0c23      	lsrs	r3, r4, #16
 8000ee4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ee8:	fa1f fe87 	uxth.w	lr, r7
 8000eec:	fb08 c116 	mls	r1, r8, r6, ip
 8000ef0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef4:	fb06 f10e 	mul.w	r1, r6, lr
 8000ef8:	4299      	cmp	r1, r3
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x60>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f02:	f080 8119 	bcs.w	8001138 <__udivmoddi4+0x288>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 8116 	bls.w	8001138 <__udivmoddi4+0x288>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f18:	fb08 3310 	mls	r3, r8, r0, r3
 8000f1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f24:	45a6      	cmp	lr, r4
 8000f26:	d909      	bls.n	8000f3c <__udivmoddi4+0x8c>
 8000f28:	193c      	adds	r4, r7, r4
 8000f2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f2e:	f080 8105 	bcs.w	800113c <__udivmoddi4+0x28c>
 8000f32:	45a6      	cmp	lr, r4
 8000f34:	f240 8102 	bls.w	800113c <__udivmoddi4+0x28c>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	443c      	add	r4, r7
 8000f3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f40:	eba4 040e 	sub.w	r4, r4, lr
 8000f44:	2600      	movs	r6, #0
 8000f46:	b11d      	cbz	r5, 8000f50 <__udivmoddi4+0xa0>
 8000f48:	40d4      	lsrs	r4, r2
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000f50:	4631      	mov	r1, r6
 8000f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f56:	b902      	cbnz	r2, 8000f5a <__udivmoddi4+0xaa>
 8000f58:	deff      	udf	#255	; 0xff
 8000f5a:	fab2 f282 	clz	r2, r2
 8000f5e:	2a00      	cmp	r2, #0
 8000f60:	d150      	bne.n	8001004 <__udivmoddi4+0x154>
 8000f62:	1bcb      	subs	r3, r1, r7
 8000f64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f68:	fa1f f887 	uxth.w	r8, r7
 8000f6c:	2601      	movs	r6, #1
 8000f6e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000f72:	0c21      	lsrs	r1, r4, #16
 8000f74:	fb0e 331c 	mls	r3, lr, ip, r3
 8000f78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7c:	fb08 f30c 	mul.w	r3, r8, ip
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d907      	bls.n	8000f94 <__udivmoddi4+0xe4>
 8000f84:	1879      	adds	r1, r7, r1
 8000f86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000f8a:	d202      	bcs.n	8000f92 <__udivmoddi4+0xe2>
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	f200 80e9 	bhi.w	8001164 <__udivmoddi4+0x2b4>
 8000f92:	4684      	mov	ip, r0
 8000f94:	1ac9      	subs	r1, r1, r3
 8000f96:	b2a3      	uxth	r3, r4
 8000f98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000fa4:	fb08 f800 	mul.w	r8, r8, r0
 8000fa8:	45a0      	cmp	r8, r4
 8000faa:	d907      	bls.n	8000fbc <__udivmoddi4+0x10c>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fb2:	d202      	bcs.n	8000fba <__udivmoddi4+0x10a>
 8000fb4:	45a0      	cmp	r8, r4
 8000fb6:	f200 80d9 	bhi.w	800116c <__udivmoddi4+0x2bc>
 8000fba:	4618      	mov	r0, r3
 8000fbc:	eba4 0408 	sub.w	r4, r4, r8
 8000fc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000fc4:	e7bf      	b.n	8000f46 <__udivmoddi4+0x96>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d909      	bls.n	8000fde <__udivmoddi4+0x12e>
 8000fca:	2d00      	cmp	r5, #0
 8000fcc:	f000 80b1 	beq.w	8001132 <__udivmoddi4+0x282>
 8000fd0:	2600      	movs	r6, #0
 8000fd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	fab3 f683 	clz	r6, r3
 8000fe2:	2e00      	cmp	r6, #0
 8000fe4:	d14a      	bne.n	800107c <__udivmoddi4+0x1cc>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d302      	bcc.n	8000ff0 <__udivmoddi4+0x140>
 8000fea:	4282      	cmp	r2, r0
 8000fec:	f200 80b8 	bhi.w	8001160 <__udivmoddi4+0x2b0>
 8000ff0:	1a84      	subs	r4, r0, r2
 8000ff2:	eb61 0103 	sbc.w	r1, r1, r3
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	468c      	mov	ip, r1
 8000ffa:	2d00      	cmp	r5, #0
 8000ffc:	d0a8      	beq.n	8000f50 <__udivmoddi4+0xa0>
 8000ffe:	e9c5 4c00 	strd	r4, ip, [r5]
 8001002:	e7a5      	b.n	8000f50 <__udivmoddi4+0xa0>
 8001004:	f1c2 0320 	rsb	r3, r2, #32
 8001008:	fa20 f603 	lsr.w	r6, r0, r3
 800100c:	4097      	lsls	r7, r2
 800100e:	fa01 f002 	lsl.w	r0, r1, r2
 8001012:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001016:	40d9      	lsrs	r1, r3
 8001018:	4330      	orrs	r0, r6
 800101a:	0c03      	lsrs	r3, r0, #16
 800101c:	fbb1 f6fe 	udiv	r6, r1, lr
 8001020:	fa1f f887 	uxth.w	r8, r7
 8001024:	fb0e 1116 	mls	r1, lr, r6, r1
 8001028:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800102c:	fb06 f108 	mul.w	r1, r6, r8
 8001030:	4299      	cmp	r1, r3
 8001032:	fa04 f402 	lsl.w	r4, r4, r2
 8001036:	d909      	bls.n	800104c <__udivmoddi4+0x19c>
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	f106 3cff 	add.w	ip, r6, #4294967295
 800103e:	f080 808d 	bcs.w	800115c <__udivmoddi4+0x2ac>
 8001042:	4299      	cmp	r1, r3
 8001044:	f240 808a 	bls.w	800115c <__udivmoddi4+0x2ac>
 8001048:	3e02      	subs	r6, #2
 800104a:	443b      	add	r3, r7
 800104c:	1a5b      	subs	r3, r3, r1
 800104e:	b281      	uxth	r1, r0
 8001050:	fbb3 f0fe 	udiv	r0, r3, lr
 8001054:	fb0e 3310 	mls	r3, lr, r0, r3
 8001058:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800105c:	fb00 f308 	mul.w	r3, r0, r8
 8001060:	428b      	cmp	r3, r1
 8001062:	d907      	bls.n	8001074 <__udivmoddi4+0x1c4>
 8001064:	1879      	adds	r1, r7, r1
 8001066:	f100 3cff 	add.w	ip, r0, #4294967295
 800106a:	d273      	bcs.n	8001154 <__udivmoddi4+0x2a4>
 800106c:	428b      	cmp	r3, r1
 800106e:	d971      	bls.n	8001154 <__udivmoddi4+0x2a4>
 8001070:	3802      	subs	r0, #2
 8001072:	4439      	add	r1, r7
 8001074:	1acb      	subs	r3, r1, r3
 8001076:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800107a:	e778      	b.n	8000f6e <__udivmoddi4+0xbe>
 800107c:	f1c6 0c20 	rsb	ip, r6, #32
 8001080:	fa03 f406 	lsl.w	r4, r3, r6
 8001084:	fa22 f30c 	lsr.w	r3, r2, ip
 8001088:	431c      	orrs	r4, r3
 800108a:	fa20 f70c 	lsr.w	r7, r0, ip
 800108e:	fa01 f306 	lsl.w	r3, r1, r6
 8001092:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8001096:	fa21 f10c 	lsr.w	r1, r1, ip
 800109a:	431f      	orrs	r7, r3
 800109c:	0c3b      	lsrs	r3, r7, #16
 800109e:	fbb1 f9fe 	udiv	r9, r1, lr
 80010a2:	fa1f f884 	uxth.w	r8, r4
 80010a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80010aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80010ae:	fb09 fa08 	mul.w	sl, r9, r8
 80010b2:	458a      	cmp	sl, r1
 80010b4:	fa02 f206 	lsl.w	r2, r2, r6
 80010b8:	fa00 f306 	lsl.w	r3, r0, r6
 80010bc:	d908      	bls.n	80010d0 <__udivmoddi4+0x220>
 80010be:	1861      	adds	r1, r4, r1
 80010c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80010c4:	d248      	bcs.n	8001158 <__udivmoddi4+0x2a8>
 80010c6:	458a      	cmp	sl, r1
 80010c8:	d946      	bls.n	8001158 <__udivmoddi4+0x2a8>
 80010ca:	f1a9 0902 	sub.w	r9, r9, #2
 80010ce:	4421      	add	r1, r4
 80010d0:	eba1 010a 	sub.w	r1, r1, sl
 80010d4:	b2bf      	uxth	r7, r7
 80010d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80010da:	fb0e 1110 	mls	r1, lr, r0, r1
 80010de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80010e2:	fb00 f808 	mul.w	r8, r0, r8
 80010e6:	45b8      	cmp	r8, r7
 80010e8:	d907      	bls.n	80010fa <__udivmoddi4+0x24a>
 80010ea:	19e7      	adds	r7, r4, r7
 80010ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80010f0:	d22e      	bcs.n	8001150 <__udivmoddi4+0x2a0>
 80010f2:	45b8      	cmp	r8, r7
 80010f4:	d92c      	bls.n	8001150 <__udivmoddi4+0x2a0>
 80010f6:	3802      	subs	r0, #2
 80010f8:	4427      	add	r7, r4
 80010fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80010fe:	eba7 0708 	sub.w	r7, r7, r8
 8001102:	fba0 8902 	umull	r8, r9, r0, r2
 8001106:	454f      	cmp	r7, r9
 8001108:	46c6      	mov	lr, r8
 800110a:	4649      	mov	r1, r9
 800110c:	d31a      	bcc.n	8001144 <__udivmoddi4+0x294>
 800110e:	d017      	beq.n	8001140 <__udivmoddi4+0x290>
 8001110:	b15d      	cbz	r5, 800112a <__udivmoddi4+0x27a>
 8001112:	ebb3 020e 	subs.w	r2, r3, lr
 8001116:	eb67 0701 	sbc.w	r7, r7, r1
 800111a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800111e:	40f2      	lsrs	r2, r6
 8001120:	ea4c 0202 	orr.w	r2, ip, r2
 8001124:	40f7      	lsrs	r7, r6
 8001126:	e9c5 2700 	strd	r2, r7, [r5]
 800112a:	2600      	movs	r6, #0
 800112c:	4631      	mov	r1, r6
 800112e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001132:	462e      	mov	r6, r5
 8001134:	4628      	mov	r0, r5
 8001136:	e70b      	b.n	8000f50 <__udivmoddi4+0xa0>
 8001138:	4606      	mov	r6, r0
 800113a:	e6e9      	b.n	8000f10 <__udivmoddi4+0x60>
 800113c:	4618      	mov	r0, r3
 800113e:	e6fd      	b.n	8000f3c <__udivmoddi4+0x8c>
 8001140:	4543      	cmp	r3, r8
 8001142:	d2e5      	bcs.n	8001110 <__udivmoddi4+0x260>
 8001144:	ebb8 0e02 	subs.w	lr, r8, r2
 8001148:	eb69 0104 	sbc.w	r1, r9, r4
 800114c:	3801      	subs	r0, #1
 800114e:	e7df      	b.n	8001110 <__udivmoddi4+0x260>
 8001150:	4608      	mov	r0, r1
 8001152:	e7d2      	b.n	80010fa <__udivmoddi4+0x24a>
 8001154:	4660      	mov	r0, ip
 8001156:	e78d      	b.n	8001074 <__udivmoddi4+0x1c4>
 8001158:	4681      	mov	r9, r0
 800115a:	e7b9      	b.n	80010d0 <__udivmoddi4+0x220>
 800115c:	4666      	mov	r6, ip
 800115e:	e775      	b.n	800104c <__udivmoddi4+0x19c>
 8001160:	4630      	mov	r0, r6
 8001162:	e74a      	b.n	8000ffa <__udivmoddi4+0x14a>
 8001164:	f1ac 0c02 	sub.w	ip, ip, #2
 8001168:	4439      	add	r1, r7
 800116a:	e713      	b.n	8000f94 <__udivmoddi4+0xe4>
 800116c:	3802      	subs	r0, #2
 800116e:	443c      	add	r4, r7
 8001170:	e724      	b.n	8000fbc <__udivmoddi4+0x10c>
 8001172:	bf00      	nop

08001174 <__aeabi_idiv0>:
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <__aeabi_d2uiz>:
 8001178:	004a      	lsls	r2, r1, #1
 800117a:	d211      	bcs.n	80011a0 <__aeabi_d2uiz+0x28>
 800117c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001180:	d211      	bcs.n	80011a6 <__aeabi_d2uiz+0x2e>
 8001182:	d50d      	bpl.n	80011a0 <__aeabi_d2uiz+0x28>
 8001184:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001188:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800118c:	d40e      	bmi.n	80011ac <__aeabi_d2uiz+0x34>
 800118e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001192:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001196:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800119a:	fa23 f002 	lsr.w	r0, r3, r2
 800119e:	4770      	bx	lr
 80011a0:	f04f 0000 	mov.w	r0, #0
 80011a4:	4770      	bx	lr
 80011a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80011aa:	d102      	bne.n	80011b2 <__aeabi_d2uiz+0x3a>
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_CAN1_Init+0x64>)
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <MX_CAN1_Init+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_CAN1_Init+0x64>)
 80011c4:	2203      	movs	r2, #3
 80011c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_CAN1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_CAN1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_CAN1_Init+0x64>)
 80011d6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80011da:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_CAN1_Init+0x64>)
 80011de:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <MX_CAN1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_CAN1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <MX_CAN1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_CAN1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <MX_CAN1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_CAN1_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_CAN1_Init+0x64>)
 800120a:	f002 fe15 	bl	8003e38 <HAL_CAN_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001214:	f001 ffd8 	bl	80031c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000500 	.word	0x20000500
 8001220:	40006400 	.word	0x40006400

08001224 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_CAN_MspInit+0x94>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d134      	bne.n	80012b0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_CAN_MspInit+0x98>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <HAL_CAN_MspInit+0x98>)
 8001250:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_CAN_MspInit+0x98>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_CAN_MspInit+0x98>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a14      	ldr	r2, [pc, #80]	; (80012bc <HAL_CAN_MspInit+0x98>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_CAN_MspInit+0x98>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800127e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001290:	2309      	movs	r3, #9
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4809      	ldr	r0, [pc, #36]	; (80012c0 <HAL_CAN_MspInit+0x9c>)
 800129c:	f003 fd40 	bl	8004d20 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2014      	movs	r0, #20
 80012a6:	f003 fd04 	bl	8004cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012aa:	2014      	movs	r0, #20
 80012ac:	f003 fd1d 	bl	8004cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40006400 	.word	0x40006400
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400

080012c4 <sjekklekkasje>:
//------------------------------------------------------------------------------------------

// Lekkasjesjekk
// ------------------------------------------------------------------------------------

void sjekklekkasje(void){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){		// Om pinne PA0 (LEKK1) får høyt signal,
 80012c8:	2101      	movs	r1, #1
 80012ca:	4831      	ldr	r0, [pc, #196]	; (8001390 <sjekklekkasje+0xcc>)
 80012cc:	f003 fec4 	bl	8005058 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00c      	beq.n	80012f0 <sjekklekkasje+0x2c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);	// gi ut høyt signal på pinne PC9 (aktiver lysdiode D5).
 80012d6:	2201      	movs	r2, #1
 80012d8:	2108      	movs	r1, #8
 80012da:	482d      	ldr	r0, [pc, #180]	; (8001390 <sjekklekkasje+0xcc>)
 80012dc:	f003 fed4 	bl	8005088 <HAL_GPIO_WritePin>
		  status &= ~LEKK1;
 80012e0:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <sjekklekkasje+0xd0>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <sjekklekkasje+0xd0>)
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e00b      	b.n	8001308 <sjekklekkasje+0x44>
	  }
	  else{											// Ellers,
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);	// gi ut lavt signal på pinne PC9 (deaktiver lysdiode D5)
 80012f0:	2200      	movs	r2, #0
 80012f2:	2108      	movs	r1, #8
 80012f4:	4826      	ldr	r0, [pc, #152]	; (8001390 <sjekklekkasje+0xcc>)
 80012f6:	f003 fec7 	bl	8005088 <HAL_GPIO_WritePin>
		  status |= LEKK1;
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <sjekklekkasje+0xd0>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <sjekklekkasje+0xd0>)
 8001306:	701a      	strb	r2, [r3, #0]
	  }

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){		// Om pinne PA1 (LEKK2) får høyt signal,
 8001308:	2102      	movs	r1, #2
 800130a:	4821      	ldr	r0, [pc, #132]	; (8001390 <sjekklekkasje+0xcc>)
 800130c:	f003 fea4 	bl	8005058 <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00c      	beq.n	8001330 <sjekklekkasje+0x6c>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);	// gi ut høyt signal på pinne PC0 (aktiver lysdiode D4).
 8001316:	2201      	movs	r2, #1
 8001318:	2101      	movs	r1, #1
 800131a:	481f      	ldr	r0, [pc, #124]	; (8001398 <sjekklekkasje+0xd4>)
 800131c:	f003 feb4 	bl	8005088 <HAL_GPIO_WritePin>
		  status &= ~LEKK2;
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <sjekklekkasje+0xd0>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	f023 0302 	bic.w	r3, r3, #2
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <sjekklekkasje+0xd0>)
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e00b      	b.n	8001348 <sjekklekkasje+0x84>
	  }
	  else{											// Ellers,
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);	// gi ut lavt signal på pinne PC0 (deaktiver lysdiode D4)
 8001330:	2200      	movs	r2, #0
 8001332:	2101      	movs	r1, #1
 8001334:	4818      	ldr	r0, [pc, #96]	; (8001398 <sjekklekkasje+0xd4>)
 8001336:	f003 fea7 	bl	8005088 <HAL_GPIO_WritePin>
		  status |= LEKK2;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <sjekklekkasje+0xd0>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <sjekklekkasje+0xd0>)
 8001346:	701a      	strb	r2, [r3, #0]
	  }

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)){		// Om pinne PA2 (LEKK3) får høyt signal,
 8001348:	2104      	movs	r1, #4
 800134a:	4811      	ldr	r0, [pc, #68]	; (8001390 <sjekklekkasje+0xcc>)
 800134c:	f003 fe84 	bl	8005058 <HAL_GPIO_ReadPin>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00d      	beq.n	8001372 <sjekklekkasje+0xae>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);	// gi ut høyt signal på pinne PA3 (aktiver lysdiode D3).
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135c:	480e      	ldr	r0, [pc, #56]	; (8001398 <sjekklekkasje+0xd4>)
 800135e:	f003 fe93 	bl	8005088 <HAL_GPIO_WritePin>
		  status &= ~LEKK3;
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <sjekklekkasje+0xd0>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <sjekklekkasje+0xd0>)
 800136e:	701a      	strb	r2, [r3, #0]
	  }
	  else{											// Ellers,
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);	// gi ut lavt signal på pinne PA3 (deaktiver lysdiode D3)
		  status |= LEKK3;
	  }
}
 8001370:	e00c      	b.n	800138c <sjekklekkasje+0xc8>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);	// gi ut lavt signal på pinne PA3 (deaktiver lysdiode D3)
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001378:	4807      	ldr	r0, [pc, #28]	; (8001398 <sjekklekkasje+0xd4>)
 800137a:	f003 fe85 	bl	8005088 <HAL_GPIO_WritePin>
		  status |= LEKK3;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <sjekklekkasje+0xd0>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b02      	ldr	r3, [pc, #8]	; (8001394 <sjekklekkasje+0xd0>)
 800138a:	701a      	strb	r2, [r3, #0]
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40020000 	.word	0x40020000
 8001394:	200002b4 	.word	0x200002b4
 8001398:	40020800 	.word	0x40020800

0800139c <oppstartCAN>:



// Funksjoner for CAN-protokoll
// ------------------------------------------------------------------------------------
void oppstartCAN(uint8_t filterGruppe, CAN_HandleTypeDef *canPort) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
    canfilter.FilterBank = 0;
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <oppstartCAN+0x98>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
    canfilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <oppstartCAN+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
    canfilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <oppstartCAN+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
    canfilter.FilterIdHigh = filterGruppe << 10 | 0x1F;
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	029b      	lsls	r3, r3, #10
 80013be:	f043 031f 	orr.w	r3, r3, #31
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <oppstartCAN+0x98>)
 80013c6:	601a      	str	r2, [r3, #0]
    canfilter.FilterIdLow = 0xFFF8;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <oppstartCAN+0x98>)
 80013ca:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 80013ce:	605a      	str	r2, [r3, #4]
    canfilter.FilterMaskIdHigh = 0x3F << 10 | 0x1F;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <oppstartCAN+0x98>)
 80013d2:	f64f 421f 	movw	r2, #64543	; 0xfc1f
 80013d6:	609a      	str	r2, [r3, #8]
    canfilter.FilterMaskIdLow = 0xFFF8;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <oppstartCAN+0x98>)
 80013da:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 80013de:	60da      	str	r2, [r3, #12]
    canfilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <oppstartCAN+0x98>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	61da      	str	r2, [r3, #28]
    canfilter.FilterActivation = ENABLE;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <oppstartCAN+0x98>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	621a      	str	r2, [r3, #32]
    canfilter.SlaveStartFilterBank = 14;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <oppstartCAN+0x98>)
 80013ee:	220e      	movs	r2, #14
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24

    txHeader.DLC = 8; // Number of bites to be transmitted max- 8
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <oppstartCAN+0x9c>)
 80013f4:	2208      	movs	r2, #8
 80013f6:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <oppstartCAN+0x9c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <oppstartCAN+0x9c>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    txHeader.StdId = 0x60;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <oppstartCAN+0x9c>)
 8001406:	2260      	movs	r2, #96	; 0x60
 8001408:	601a      	str	r2, [r3, #0]
    txHeader.ExtId = 0x00;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <oppstartCAN+0x9c>)
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
    txHeader.TransmitGlobalTime = DISABLE;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <oppstartCAN+0x9c>)
 8001412:	2200      	movs	r2, #0
 8001414:	751a      	strb	r2, [r3, #20]

    HAL_CAN_ConfigFilter(canPort, &canfilter);
 8001416:	4907      	ldr	r1, [pc, #28]	; (8001434 <oppstartCAN+0x98>)
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f002 fe09 	bl	8004030 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(canPort);
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f002 fee6 	bl	80041f0 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(canPort, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001424:	2102      	movs	r1, #2
 8001426:	6838      	ldr	r0, [r7, #0]
 8001428:	f003 f913 	bl	8004652 <HAL_CAN_ActivateNotification>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000065c 	.word	0x2000065c
 8001438:	20000580 	.word	0x20000580

0800143c <sendDataCAN>:

void sendDataCAN(uint16_t id, CAN_HandleTypeDef *canPort) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	80fb      	strh	r3, [r7, #6]
    txHeader.StdId = id;
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <sendDataCAN+0x28>)
 800144c:	6013      	str	r3, [r2, #0]
    HAL_CAN_AddTxMessage(canPort, &txHeader, csend, &canMailbox);
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <sendDataCAN+0x2c>)
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <sendDataCAN+0x30>)
 8001452:	4904      	ldr	r1, [pc, #16]	; (8001464 <sendDataCAN+0x28>)
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	f002 ff0f 	bl	8004278 <HAL_CAN_AddTxMessage>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000580 	.word	0x20000580
 8001468:	20000648 	.word	0x20000648
 800146c:	20000000 	.word	0x20000000

08001470 <init_usbbuf>:
// ------------------------------------------------------------------------------------

void init_usbbuf(void){
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	//Initialiser imu-databuffer
	imu_usb[0] = temp_usb[4] = 't';
 8001474:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <init_usbbuf+0x100>)
 8001476:	2274      	movs	r2, #116	; 0x74
 8001478:	711a      	strb	r2, [r3, #4]
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <init_usbbuf+0x100>)
 800147c:	791a      	ldrb	r2, [r3, #4]
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <init_usbbuf+0x104>)
 8001480:	701a      	strb	r2, [r3, #0]
	imu_usb[5] = imu_usb[10] = imu_usb[15] = imu_usb[20] = imu_usb[25] = 'g';
 8001482:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <init_usbbuf+0x104>)
 8001484:	2267      	movs	r2, #103	; 0x67
 8001486:	765a      	strb	r2, [r3, #25]
 8001488:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <init_usbbuf+0x104>)
 800148a:	7e5a      	ldrb	r2, [r3, #25]
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <init_usbbuf+0x104>)
 800148e:	751a      	strb	r2, [r3, #20]
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <init_usbbuf+0x104>)
 8001492:	7d1a      	ldrb	r2, [r3, #20]
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <init_usbbuf+0x104>)
 8001496:	73da      	strb	r2, [r3, #15]
 8001498:	4b36      	ldr	r3, [pc, #216]	; (8001574 <init_usbbuf+0x104>)
 800149a:	7bda      	ldrb	r2, [r3, #15]
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <init_usbbuf+0x104>)
 800149e:	729a      	strb	r2, [r3, #10]
 80014a0:	4b34      	ldr	r3, [pc, #208]	; (8001574 <init_usbbuf+0x104>)
 80014a2:	7a9a      	ldrb	r2, [r3, #10]
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <init_usbbuf+0x104>)
 80014a6:	715a      	strb	r2, [r3, #5]
	imu_usb[30] = imu_usb[35] = imu_usb[40] = imu_usb[45] = imu_usb[50] = 'a';
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <init_usbbuf+0x104>)
 80014aa:	2261      	movs	r2, #97	; 0x61
 80014ac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80014b0:	4b30      	ldr	r3, [pc, #192]	; (8001574 <init_usbbuf+0x104>)
 80014b2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <init_usbbuf+0x104>)
 80014b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <init_usbbuf+0x104>)
 80014be:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80014c2:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <init_usbbuf+0x104>)
 80014c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <init_usbbuf+0x104>)
 80014ca:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80014ce:	4b29      	ldr	r3, [pc, #164]	; (8001574 <init_usbbuf+0x104>)
 80014d0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <init_usbbuf+0x104>)
 80014d6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <init_usbbuf+0x104>)
 80014dc:	779a      	strb	r2, [r3, #30]
	imu_usb[55] = imu_usb[60] = 'k';
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <init_usbbuf+0x104>)
 80014e0:	226b      	movs	r2, #107	; 0x6b
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <init_usbbuf+0x104>)
 80014e8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <init_usbbuf+0x104>)
 80014ee:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	imu_usb[6] = imu_usb[31] = 'x';
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <init_usbbuf+0x104>)
 80014f4:	2278      	movs	r2, #120	; 0x78
 80014f6:	77da      	strb	r2, [r3, #31]
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <init_usbbuf+0x104>)
 80014fa:	7fda      	ldrb	r2, [r3, #31]
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <init_usbbuf+0x104>)
 80014fe:	719a      	strb	r2, [r3, #6]
	imu_usb[11] = imu_usb[36] = 'y';
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <init_usbbuf+0x104>)
 8001502:	2279      	movs	r2, #121	; 0x79
 8001504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <init_usbbuf+0x104>)
 800150a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <init_usbbuf+0x104>)
 8001510:	72da      	strb	r2, [r3, #11]
	imu_usb[16] = imu_usb[41] = 'z';
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <init_usbbuf+0x104>)
 8001514:	227a      	movs	r2, #122	; 0x7a
 8001516:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <init_usbbuf+0x104>)
 800151c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <init_usbbuf+0x104>)
 8001522:	741a      	strb	r2, [r3, #16]
	imu_usb[21] = imu_usb[46] = imu_usb[56] =  'r';
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <init_usbbuf+0x104>)
 8001526:	2272      	movs	r2, #114	; 0x72
 8001528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <init_usbbuf+0x104>)
 800152e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <init_usbbuf+0x104>)
 8001534:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <init_usbbuf+0x104>)
 800153a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <init_usbbuf+0x104>)
 8001540:	755a      	strb	r2, [r3, #21]
	imu_usb[26] = imu_usb[51] = imu_usb[61] = 's';
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <init_usbbuf+0x104>)
 8001544:	2273      	movs	r2, #115	; 0x73
 8001546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <init_usbbuf+0x104>)
 800154c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <init_usbbuf+0x104>)
 8001552:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <init_usbbuf+0x104>)
 8001558:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <init_usbbuf+0x104>)
 800155e:	769a      	strb	r2, [r3, #26]
	temp_usb[0] = 'c';
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <init_usbbuf+0x100>)
 8001562:	2263      	movs	r2, #99	; 0x63
 8001564:	701a      	strb	r2, [r3, #0]

}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	20000690 	.word	0x20000690
 8001574:	20000604 	.word	0x20000604

08001578 <les_og_behandle_temp>:

void les_og_behandle_temp(kommskift kommunikasjonsmetode){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]

	// Funksjon for etablering av kontakt med sensor.
	// feil-variabel blir satt til 1 om kontakt ikke er etablert.
	TEMP_sjekk(&hi2c1, LES_AV_TEMP_HOVED, &feil_h);
 8001582:	4a66      	ldr	r2, [pc, #408]	; (800171c <les_og_behandle_temp+0x1a4>)
 8001584:	2197      	movs	r1, #151	; 0x97
 8001586:	4866      	ldr	r0, [pc, #408]	; (8001720 <les_og_behandle_temp+0x1a8>)
 8001588:	f001 ff08 	bl	800339c <TEMP_sjekk>
	TEMP_sjekk(&hi2c1, LES_AV_TEMP_KRAFT, &feil_k);
 800158c:	4a65      	ldr	r2, [pc, #404]	; (8001724 <les_og_behandle_temp+0x1ac>)
 800158e:	2193      	movs	r1, #147	; 0x93
 8001590:	4863      	ldr	r0, [pc, #396]	; (8001720 <les_og_behandle_temp+0x1a8>)
 8001592:	f001 ff03 	bl	800339c <TEMP_sjekk>
	TEMP_sjekk(&hi2c1, LES_AV_TEMP_SENS, &feil_s);
 8001596:	4a64      	ldr	r2, [pc, #400]	; (8001728 <les_og_behandle_temp+0x1b0>)
 8001598:	2191      	movs	r1, #145	; 0x91
 800159a:	4861      	ldr	r0, [pc, #388]	; (8001720 <les_og_behandle_temp+0x1a8>)
 800159c:	f001 fefe 	bl	800339c <TEMP_sjekk>

	if(feil_h != 0){
 80015a0:	4b5e      	ldr	r3, [pc, #376]	; (800171c <les_og_behandle_temp+0x1a4>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d007      	beq.n	80015b8 <les_og_behandle_temp+0x40>
		status |= MISTETHOVED;
 80015a8:	4b60      	ldr	r3, [pc, #384]	; (800172c <les_og_behandle_temp+0x1b4>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	f043 0320 	orr.w	r3, r3, #32
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b5e      	ldr	r3, [pc, #376]	; (800172c <les_og_behandle_temp+0x1b4>)
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	e006      	b.n	80015c6 <les_og_behandle_temp+0x4e>
	}
	else{
		status &= ~MISTETHOVED;
 80015b8:	4b5c      	ldr	r3, [pc, #368]	; (800172c <les_og_behandle_temp+0x1b4>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	f023 0320 	bic.w	r3, r3, #32
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b5a      	ldr	r3, [pc, #360]	; (800172c <les_og_behandle_temp+0x1b4>)
 80015c4:	701a      	strb	r2, [r3, #0]
	}

	if(feil_k != 0){
 80015c6:	4b57      	ldr	r3, [pc, #348]	; (8001724 <les_og_behandle_temp+0x1ac>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <les_og_behandle_temp+0x66>
		status |= MISTETKRAFT;
 80015ce:	4b57      	ldr	r3, [pc, #348]	; (800172c <les_og_behandle_temp+0x1b4>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	f043 0310 	orr.w	r3, r3, #16
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b54      	ldr	r3, [pc, #336]	; (800172c <les_og_behandle_temp+0x1b4>)
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e006      	b.n	80015ec <les_og_behandle_temp+0x74>
	}
	else{
		status &= ~MISTETKRAFT;
 80015de:	4b53      	ldr	r3, [pc, #332]	; (800172c <les_og_behandle_temp+0x1b4>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	f023 0310 	bic.w	r3, r3, #16
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	4b50      	ldr	r3, [pc, #320]	; (800172c <les_og_behandle_temp+0x1b4>)
 80015ea:	701a      	strb	r2, [r3, #0]
	}

	if(feil_s != 0){
 80015ec:	4b4e      	ldr	r3, [pc, #312]	; (8001728 <les_og_behandle_temp+0x1b0>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <les_og_behandle_temp+0x8c>
		status |= MISTETSENS;
 80015f4:	4b4d      	ldr	r3, [pc, #308]	; (800172c <les_og_behandle_temp+0x1b4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b4b      	ldr	r3, [pc, #300]	; (800172c <les_og_behandle_temp+0x1b4>)
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	e006      	b.n	8001612 <les_og_behandle_temp+0x9a>
	}
	else{
		status &= ~MISTETSENS;
 8001604:	4b49      	ldr	r3, [pc, #292]	; (800172c <les_og_behandle_temp+0x1b4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	f023 0308 	bic.w	r3, r3, #8
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b47      	ldr	r3, [pc, #284]	; (800172c <les_og_behandle_temp+0x1b4>)
 8001610:	701a      	strb	r2, [r3, #0]
	}


	// Funksjon for å lese av temperatur i grader celsius
	TEMP_les(&hi2c1, LES_AV_TEMP_HOVED, &temp_f_hoved);
 8001612:	4a47      	ldr	r2, [pc, #284]	; (8001730 <les_og_behandle_temp+0x1b8>)
 8001614:	2197      	movs	r1, #151	; 0x97
 8001616:	4842      	ldr	r0, [pc, #264]	; (8001720 <les_og_behandle_temp+0x1a8>)
 8001618:	f001 fee2 	bl	80033e0 <TEMP_les>
	TEMP_les(&hi2c1, LES_AV_TEMP_KRAFT, &temp_f_kraft);
 800161c:	4a45      	ldr	r2, [pc, #276]	; (8001734 <les_og_behandle_temp+0x1bc>)
 800161e:	2193      	movs	r1, #147	; 0x93
 8001620:	483f      	ldr	r0, [pc, #252]	; (8001720 <les_og_behandle_temp+0x1a8>)
 8001622:	f001 fedd 	bl	80033e0 <TEMP_les>
	TEMP_les(&hi2c1, LES_AV_TEMP_SENS, &temp_f_sens);
 8001626:	4a44      	ldr	r2, [pc, #272]	; (8001738 <les_og_behandle_temp+0x1c0>)
 8001628:	2191      	movs	r1, #145	; 0x91
 800162a:	483d      	ldr	r0, [pc, #244]	; (8001720 <les_og_behandle_temp+0x1a8>)
 800162c:	f001 fed8 	bl	80033e0 <TEMP_les>

	// Lagre data som intverdier for CAN-overføring

	c_thoved = (uint8_t)(ceilf(temp_f_hoved));
 8001630:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <les_og_behandle_temp+0x1b8>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	f00a fec1 	bl	800c3c0 <ceilf>
 800163e:	eef0 7a40 	vmov.f32	s15, s0
 8001642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001646:	edc7 7a00 	vstr	s15, [r7]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <les_og_behandle_temp+0x1c4>)
 8001650:	701a      	strb	r2, [r3, #0]
	c_tkraft = (uint8_t)(ceilf(temp_f_kraft));
 8001652:	4b38      	ldr	r3, [pc, #224]	; (8001734 <les_og_behandle_temp+0x1bc>)
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	eeb0 0a67 	vmov.f32	s0, s15
 800165c:	f00a feb0 	bl	800c3c0 <ceilf>
 8001660:	eef0 7a40 	vmov.f32	s15, s0
 8001664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001668:	edc7 7a00 	vstr	s15, [r7]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <les_og_behandle_temp+0x1c8>)
 8001672:	701a      	strb	r2, [r3, #0]
	c_tsens = (uint8_t)(ceilf(temp_f_sens));
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <les_og_behandle_temp+0x1c0>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	f00a fe9f 	bl	800c3c0 <ceilf>
 8001682:	eef0 7a40 	vmov.f32	s15, s0
 8001686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168a:	edc7 7a00 	vstr	s15, [r7]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <les_og_behandle_temp+0x1cc>)
 8001694:	701a      	strb	r2, [r3, #0]

	if(kommunikasjonsmetode == USB){
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d13a      	bne.n	8001712 <les_og_behandle_temp+0x19a>

		// Om data er negativ,
		if(temp_f_sens < 0){
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <les_og_behandle_temp+0x1c0>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	d516      	bpl.n	80016da <les_og_behandle_temp+0x162>
			// settes polaritetsflagg høyt,
			tempsneg = 1;
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <les_og_behandle_temp+0x1d0>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
			// og floatverdi rundes opp, fortegnet snus, og lagres som uint8
			tempsens = -(int)(ceilf(temp_f_sens));
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <les_og_behandle_temp+0x1c0>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	f00a fe80 	bl	800c3c0 <ceilf>
 80016c0:	eef0 7a40 	vmov.f32	s15, s0
 80016c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c8:	edc7 7a00 	vstr	s15, [r7]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	425b      	negs	r3, r3
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <les_og_behandle_temp+0x1d4>)
 80016d6:	701a      	strb	r2, [r3, #0]
 80016d8:	e013      	b.n	8001702 <les_og_behandle_temp+0x18a>
		}
		// Om data er positiv,
		else{
			// settes polaritetsflagg lavt,
			tempsneg = 0;
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <les_og_behandle_temp+0x1d0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
			// og floatverdi rundes opp og lagres som uint8
			tempsens = (int)(ceilf(temp_f_sens));
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <les_og_behandle_temp+0x1c0>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	f00a fe69 	bl	800c3c0 <ceilf>
 80016ee:	eef0 7a40 	vmov.f32	s15, s0
 80016f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f6:	edc7 7a00 	vstr	s15, [r7]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <les_og_behandle_temp+0x1d4>)
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <les_og_behandle_temp+0x1d0>)
 8001704:	781a      	ldrb	r2, [r3, #0]
		}

		// temperatur med datatype uint8 kopieres så inn i vektor for sending
		memcpy(&temp_usb[1], &tempsneg, 1);
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <les_og_behandle_temp+0x1d8>)
 8001708:	705a      	strb	r2, [r3, #1]
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <les_og_behandle_temp+0x1d4>)
 800170c:	781a      	ldrb	r2, [r3, #0]
		memcpy(&temp_usb[2], &tempsens, 1);
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <les_og_behandle_temp+0x1d8>)
 8001710:	709a      	strb	r2, [r3, #2]
	}
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000254 	.word	0x20000254
 8001720:	20000528 	.word	0x20000528
 8001724:	20000255 	.word	0x20000255
 8001728:	20000256 	.word	0x20000256
 800172c:	200002b4 	.word	0x200002b4
 8001730:	20000248 	.word	0x20000248
 8001734:	2000024c 	.word	0x2000024c
 8001738:	20000250 	.word	0x20000250
 800173c:	20000264 	.word	0x20000264
 8001740:	20000265 	.word	0x20000265
 8001744:	20000266 	.word	0x20000266
 8001748:	20000257 	.word	0x20000257
 800174c:	20000246 	.word	0x20000246
 8001750:	20000690 	.word	0x20000690
 8001754:	00000000 	.word	0x00000000

08001758 <dybdeutregning>:

int16_t dybdeutregning(float P0, float P, vanntetthet vanntype){
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001762:	edc7 0a02 	vstr	s1, [r7, #8]
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
	int16_t dybde;
	float rho;
	// Bestemmer vanntetthet etter hvilken vanntype som er bestemt
	if(vanntype == FERSKVANN){
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d102      	bne.n	8001776 <dybdeutregning+0x1e>
		rho = 997.0474;
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <dybdeutregning+0x98>)
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e004      	b.n	8001780 <dybdeutregning+0x28>
	}
	else if(vanntype == SALTVANN){
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <dybdeutregning+0x28>
		rho = 1023.6;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <dybdeutregning+0x9c>)
 800177e:	617b      	str	r3, [r7, #20]
	}

	// Bruker differansen mellom faktisk dybde i millibar og initialtrykket for å finne dybden ROV-en befinner seg i i centimeter
	dybde = (int16_t)(((P-P0)*10000.0)/(rho*9.81));
 8001780:	ed97 7a02 	vldr	s14, [r7, #8]
 8001784:	edd7 7a03 	vldr	s15, [r7, #12]
 8001788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178c:	ee17 0a90 	vmov	r0, s15
 8001790:	f7fe fe7e 	bl	8000490 <__aeabi_f2d>
 8001794:	a312      	add	r3, pc, #72	; (adr r3, 80017e0 <dybdeutregning+0x88>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe fed1 	bl	8000540 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4614      	mov	r4, r2
 80017a4:	461d      	mov	r5, r3
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7fe fe72 	bl	8000490 <__aeabi_f2d>
 80017ac:	a30e      	add	r3, pc, #56	; (adr r3, 80017e8 <dybdeutregning+0x90>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7fe fec5 	bl	8000540 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4620      	mov	r0, r4
 80017bc:	4629      	mov	r1, r5
 80017be:	f7fe ffe9 	bl	8000794 <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f969 	bl	8000aa0 <__aeabi_d2iz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	827b      	strh	r3, [r7, #18]
	return dybde;
 80017d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bdb0      	pop	{r4, r5, r7, pc}
 80017de:	bf00      	nop
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40c38800 	.word	0x40c38800
 80017e8:	51eb851f 	.word	0x51eb851f
 80017ec:	40239eb8 	.word	0x40239eb8
 80017f0:	44794309 	.word	0x44794309
 80017f4:	447fe666 	.word	0x447fe666

080017f8 <les_og_beregne_vinkler>:

void les_og_beregne_vinkler(kommskift kommunikasjonsmetode){
 80017f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017fc:	b088      	sub	sp, #32
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	71fb      	strb	r3, [r7, #7]
	  float accelx, accely, accelz, gyrox, gyroy, gyroz;

	  // leser av data fra gyroskop og akselerometer med skalert funksjon
	  icm20948_gyro_read_dps(&my_gyro);
 8001804:	48d0      	ldr	r0, [pc, #832]	; (8001b48 <les_og_beregne_vinkler+0x350>)
 8001806:	f000 ff47 	bl	8002698 <icm20948_gyro_read_dps>
	  icm20948_accel_read_g(&my_accel);
 800180a:	48d0      	ldr	r0, [pc, #832]	; (8001b4c <les_og_beregne_vinkler+0x354>)
 800180c:	f000 ff72 	bl	80026f4 <icm20948_accel_read_g>


	  // Akser blir snudd for å samsvare med ROV-en
	  accelx = my_accel.y;
 8001810:	4bce      	ldr	r3, [pc, #824]	; (8001b4c <les_og_beregne_vinkler+0x354>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61fb      	str	r3, [r7, #28]
	  accely = my_accel.x;
 8001816:	4bcd      	ldr	r3, [pc, #820]	; (8001b4c <les_og_beregne_vinkler+0x354>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	61bb      	str	r3, [r7, #24]
	  accelz = -my_accel.z;
 800181c:	4bcb      	ldr	r3, [pc, #812]	; (8001b4c <les_og_beregne_vinkler+0x354>)
 800181e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001822:	eef1 7a67 	vneg.f32	s15, s15
 8001826:	edc7 7a05 	vstr	s15, [r7, #20]
	  gyrox = my_gyro.y;
 800182a:	4bc7      	ldr	r3, [pc, #796]	; (8001b48 <les_og_beregne_vinkler+0x350>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	613b      	str	r3, [r7, #16]
	  gyroy = my_gyro.x;
 8001830:	4bc5      	ldr	r3, [pc, #788]	; (8001b48 <les_og_beregne_vinkler+0x350>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
	  gyroz = -my_gyro.z;
 8001836:	4bc4      	ldr	r3, [pc, #784]	; (8001b48 <les_og_beregne_vinkler+0x350>)
 8001838:	edd3 7a02 	vldr	s15, [r3, #8]
 800183c:	eef1 7a67 	vneg.f32	s15, s15
 8001840:	edc7 7a02 	vstr	s15, [r7, #8]


	  // Lagrer tid som ny tid og lager tidsskritt
	  td1 = HAL_GetTick();
 8001844:	f002 fac8 	bl	8003dd8 <HAL_GetTick>
 8001848:	ee07 0a90 	vmov	s15, r0
 800184c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001850:	4bbf      	ldr	r3, [pc, #764]	; (8001b50 <les_og_beregne_vinkler+0x358>)
 8001852:	edc3 7a00 	vstr	s15, [r3]
	  td = (td1-td2)/1000;
 8001856:	4bbe      	ldr	r3, [pc, #760]	; (8001b50 <les_og_beregne_vinkler+0x358>)
 8001858:	ed93 7a00 	vldr	s14, [r3]
 800185c:	4bbd      	ldr	r3, [pc, #756]	; (8001b54 <les_og_beregne_vinkler+0x35c>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001866:	eddf 6abc 	vldr	s13, [pc, #752]	; 8001b58 <les_og_beregne_vinkler+0x360>
 800186a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186e:	4bbb      	ldr	r3, [pc, #748]	; (8001b5c <les_og_beregne_vinkler+0x364>)
 8001870:	edc3 7a00 	vstr	s15, [r3]

	  // Regner ut vinkel vhja. akselerometer

	  aks_s_f = (atan2((float)(accelx), (float)(sqrt((pow(accely,2))+(pow(accelz,2)))))* 180 / pi);
 8001874:	69f8      	ldr	r0, [r7, #28]
 8001876:	f7fe fe0b 	bl	8000490 <__aeabi_f2d>
 800187a:	4604      	mov	r4, r0
 800187c:	460d      	mov	r5, r1
 800187e:	69b8      	ldr	r0, [r7, #24]
 8001880:	f7fe fe06 	bl	8000490 <__aeabi_f2d>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	ed9f 1ba9 	vldr	d1, [pc, #676]	; 8001b30 <les_og_beregne_vinkler+0x338>
 800188c:	ec43 2b10 	vmov	d0, r2, r3
 8001890:	f00a fdda 	bl	800c448 <pow>
 8001894:	ec59 8b10 	vmov	r8, r9, d0
 8001898:	6978      	ldr	r0, [r7, #20]
 800189a:	f7fe fdf9 	bl	8000490 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	ed9f 1ba3 	vldr	d1, [pc, #652]	; 8001b30 <les_og_beregne_vinkler+0x338>
 80018a6:	ec43 2b10 	vmov	d0, r2, r3
 80018aa:	f00a fdcd 	bl	800c448 <pow>
 80018ae:	ec53 2b10 	vmov	r2, r3, d0
 80018b2:	4640      	mov	r0, r8
 80018b4:	4649      	mov	r1, r9
 80018b6:	f7fe fc8d 	bl	80001d4 <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	ec43 2b17 	vmov	d7, r2, r3
 80018c2:	eeb0 0a47 	vmov.f32	s0, s14
 80018c6:	eef0 0a67 	vmov.f32	s1, s15
 80018ca:	f00a fe6b 	bl	800c5a4 <sqrt>
 80018ce:	ec53 2b10 	vmov	r2, r3, d0
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f90b 	bl	8000af0 <__aeabi_d2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fdd7 	bl	8000490 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	ec43 2b11 	vmov	d1, r2, r3
 80018ea:	ec45 4b10 	vmov	d0, r4, r5
 80018ee:	f00a fda9 	bl	800c444 <atan2>
 80018f2:	ec51 0b10 	vmov	r0, r1, d0
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b99      	ldr	r3, [pc, #612]	; (8001b60 <les_og_beregne_vinkler+0x368>)
 80018fc:	f7fe fe20 	bl	8000540 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	4b96      	ldr	r3, [pc, #600]	; (8001b64 <les_og_beregne_vinkler+0x36c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fdbf 	bl	8000490 <__aeabi_f2d>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4620      	mov	r0, r4
 8001918:	4629      	mov	r1, r5
 800191a:	f7fe ff3b 	bl	8000794 <__aeabi_ddiv>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f8e3 	bl	8000af0 <__aeabi_d2f>
 800192a:	4603      	mov	r3, r0
 800192c:	4a8e      	ldr	r2, [pc, #568]	; (8001b68 <les_og_beregne_vinkler+0x370>)
 800192e:	6013      	str	r3, [r2, #0]
	  aks_r_f = (atan2((float)(accely), (float)(-accelz))* 180 / pi);
 8001930:	69b8      	ldr	r0, [r7, #24]
 8001932:	f7fe fdad 	bl	8000490 <__aeabi_f2d>
 8001936:	4604      	mov	r4, r0
 8001938:	460d      	mov	r5, r1
 800193a:	edd7 7a05 	vldr	s15, [r7, #20]
 800193e:	eef1 7a67 	vneg.f32	s15, s15
 8001942:	ee17 3a90 	vmov	r3, s15
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fda2 	bl	8000490 <__aeabi_f2d>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	ec43 2b11 	vmov	d1, r2, r3
 8001954:	ec45 4b10 	vmov	d0, r4, r5
 8001958:	f00a fd74 	bl	800c444 <atan2>
 800195c:	ec51 0b10 	vmov	r0, r1, d0
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	4b7e      	ldr	r3, [pc, #504]	; (8001b60 <les_og_beregne_vinkler+0x368>)
 8001966:	f7fe fdeb 	bl	8000540 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4614      	mov	r4, r2
 8001970:	461d      	mov	r5, r3
 8001972:	4b7c      	ldr	r3, [pc, #496]	; (8001b64 <les_og_beregne_vinkler+0x36c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd8a 	bl	8000490 <__aeabi_f2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4620      	mov	r0, r4
 8001982:	4629      	mov	r1, r5
 8001984:	f7fe ff06 	bl	8000794 <__aeabi_ddiv>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f7ff f8ae 	bl	8000af0 <__aeabi_d2f>
 8001994:	4603      	mov	r3, r0
 8001996:	4a75      	ldr	r2, [pc, #468]	; (8001b6c <les_og_beregne_vinkler+0x374>)
 8001998:	6013      	str	r3, [r2, #0]


	  // Regner ut vinkel vhja. gyroskop

	  gyro_r_f -= (float)(gyrox) * td;
 800199a:	4b75      	ldr	r3, [pc, #468]	; (8001b70 <les_og_beregne_vinkler+0x378>)
 800199c:	ed93 7a00 	vldr	s14, [r3]
 80019a0:	4b6e      	ldr	r3, [pc, #440]	; (8001b5c <les_og_beregne_vinkler+0x364>)
 80019a2:	edd3 6a00 	vldr	s13, [r3]
 80019a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <les_og_beregne_vinkler+0x378>)
 80019b4:	edc3 7a00 	vstr	s15, [r3]
	  gyro_s_f += (float)(gyroy) * td;
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <les_og_beregne_vinkler+0x364>)
 80019ba:	ed93 7a00 	vldr	s14, [r3]
 80019be:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c6:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <les_og_beregne_vinkler+0x37c>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <les_og_beregne_vinkler+0x37c>)
 80019d2:	edc3 7a00 	vstr	s15, [r3]
	  komp_r_f -= (float)(gyrox) * td;
 80019d6:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <les_og_beregne_vinkler+0x380>)
 80019d8:	ed93 7a00 	vldr	s14, [r3]
 80019dc:	4b5f      	ldr	r3, [pc, #380]	; (8001b5c <les_og_beregne_vinkler+0x364>)
 80019de:	edd3 6a00 	vldr	s13, [r3]
 80019e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80019e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ee:	4b62      	ldr	r3, [pc, #392]	; (8001b78 <les_og_beregne_vinkler+0x380>)
 80019f0:	edc3 7a00 	vstr	s15, [r3]
	  komp_s_f += (float)(gyroy) * td;
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <les_og_beregne_vinkler+0x364>)
 80019f6:	ed93 7a00 	vldr	s14, [r3]
 80019fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80019fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a02:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <les_og_beregne_vinkler+0x384>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	4b5b      	ldr	r3, [pc, #364]	; (8001b7c <les_og_beregne_vinkler+0x384>)
 8001a0e:	edc3 7a00 	vstr	s15, [r3]

	  // Bruker verdier fra akselerometer og gyroskop og lager komplimentærfilter
	  komp_r_f = komp_r_f*0.98 + aks_r_f*0.02;
 8001a12:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <les_og_beregne_vinkler+0x380>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd3a 	bl	8000490 <__aeabi_f2d>
 8001a1c:	a346      	add	r3, pc, #280	; (adr r3, 8001b38 <les_og_beregne_vinkler+0x340>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fd8d 	bl	8000540 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	4b4f      	ldr	r3, [pc, #316]	; (8001b6c <les_og_beregne_vinkler+0x374>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd2c 	bl	8000490 <__aeabi_f2d>
 8001a38:	a341      	add	r3, pc, #260	; (adr r3, 8001b40 <les_og_beregne_vinkler+0x348>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fd7f 	bl	8000540 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4620      	mov	r0, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	f7fe fbc3 	bl	80001d4 <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f84b 	bl	8000af0 <__aeabi_d2f>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4a46      	ldr	r2, [pc, #280]	; (8001b78 <les_og_beregne_vinkler+0x380>)
 8001a5e:	6013      	str	r3, [r2, #0]
	  komp_s_f = komp_s_f*0.98 + aks_s_f*0.02;
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <les_og_beregne_vinkler+0x384>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd13 	bl	8000490 <__aeabi_f2d>
 8001a6a:	a333      	add	r3, pc, #204	; (adr r3, 8001b38 <les_og_beregne_vinkler+0x340>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fd66 	bl	8000540 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4614      	mov	r4, r2
 8001a7a:	461d      	mov	r5, r3
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <les_og_beregne_vinkler+0x370>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd05 	bl	8000490 <__aeabi_f2d>
 8001a86:	a32e      	add	r3, pc, #184	; (adr r3, 8001b40 <les_og_beregne_vinkler+0x348>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fd58 	bl	8000540 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fb9c 	bl	80001d4 <__adddf3>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f824 	bl	8000af0 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a34      	ldr	r2, [pc, #208]	; (8001b7c <les_og_beregne_vinkler+0x384>)
 8001aac:	6013      	str	r3, [r2, #0]

	  // Lagrer tid som forrige tid
	  td2 = HAL_GetTick();
 8001aae:	f002 f993 	bl	8003dd8 <HAL_GetTick>
 8001ab2:	ee07 0a90 	vmov	s15, r0
 8001ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <les_og_beregne_vinkler+0x35c>)
 8001abc:	edc3 7a00 	vstr	s15, [r3]


	  // Lagre data som intverdier for CAN-overføring
	  c_aks_x = (int16_t)(accelx * 981);
 8001ac0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ac4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001b80 <les_og_beregne_vinkler+0x388>
 8001ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad0:	ee17 3a90 	vmov	r3, s15
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <les_og_beregne_vinkler+0x38c>)
 8001ad8:	801a      	strh	r2, [r3, #0]
	  c_aks_y = (int16_t)(accely * 981);
 8001ada:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ade:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001b80 <les_og_beregne_vinkler+0x388>
 8001ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aea:	ee17 3a90 	vmov	r3, s15
 8001aee:	b21a      	sxth	r2, r3
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <les_og_beregne_vinkler+0x390>)
 8001af2:	801a      	strh	r2, [r3, #0]
	  c_aks_z = (int16_t)(accelz * 981);
 8001af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001af8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001b80 <les_og_beregne_vinkler+0x388>
 8001afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b04:	ee17 3a90 	vmov	r3, s15
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <les_og_beregne_vinkler+0x394>)
 8001b0c:	801a      	strh	r2, [r3, #0]

	  c_rull = (int16_t)(komp_r_f*10);
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <les_og_beregne_vinkler+0x380>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b20:	ee17 3a90 	vmov	r3, s15
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <les_og_beregne_vinkler+0x398>)
 8001b28:	801a      	strh	r2, [r3, #0]
 8001b2a:	e033      	b.n	8001b94 <les_og_beregne_vinkler+0x39c>
 8001b2c:	f3af 8000 	nop.w
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40000000 	.word	0x40000000
 8001b38:	f5c28f5c 	.word	0xf5c28f5c
 8001b3c:	3fef5c28 	.word	0x3fef5c28
 8001b40:	47ae147b 	.word	0x47ae147b
 8001b44:	3f947ae1 	.word	0x3f947ae1
 8001b48:	20000698 	.word	0x20000698
 8001b4c:	2000064c 	.word	0x2000064c
 8001b50:	20000288 	.word	0x20000288
 8001b54:	2000028c 	.word	0x2000028c
 8001b58:	447a0000 	.word	0x447a0000
 8001b5c:	20000284 	.word	0x20000284
 8001b60:	40668000 	.word	0x40668000
 8001b64:	20000008 	.word	0x20000008
 8001b68:	20000278 	.word	0x20000278
 8001b6c:	20000274 	.word	0x20000274
 8001b70:	2000026c 	.word	0x2000026c
 8001b74:	20000270 	.word	0x20000270
 8001b78:	2000027c 	.word	0x2000027c
 8001b7c:	20000280 	.word	0x20000280
 8001b80:	44754000 	.word	0x44754000
 8001b84:	20000258 	.word	0x20000258
 8001b88:	2000025a 	.word	0x2000025a
 8001b8c:	2000025c 	.word	0x2000025c
 8001b90:	2000025e 	.word	0x2000025e
	  c_stamp = (int16_t)(komp_s_f*10);
 8001b94:	4bc4      	ldr	r3, [pc, #784]	; (8001ea8 <les_og_beregne_vinkler+0x6b0>)
 8001b96:	edd3 7a00 	vldr	s15, [r3]
 8001b9a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba6:	ee17 3a90 	vmov	r3, s15
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	4bbf      	ldr	r3, [pc, #764]	; (8001eac <les_og_beregne_vinkler+0x6b4>)
 8001bae:	801a      	strh	r2, [r3, #0]


	  if(kommunikasjonsmetode == USB){
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	f040 82d5 	bne.w	8002162 <les_og_beregne_vinkler+0x96a>

		  // Er dataen negativ?

		  if(gyrox < 0){
 8001bb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	d512      	bpl.n	8001bec <les_og_beregne_vinkler+0x3f4>
			  gxneg = 1;
 8001bc6:	4bba      	ldr	r3, [pc, #744]	; (8001eb0 <les_og_beregne_vinkler+0x6b8>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
			  gyro_x = -(int)(gyrox * 10);
 8001bcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bd0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bdc:	ee17 3a90 	vmov	r3, s15
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	425b      	negs	r3, r3
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	4bb3      	ldr	r3, [pc, #716]	; (8001eb4 <les_og_beregne_vinkler+0x6bc>)
 8001be8:	801a      	strh	r2, [r3, #0]
 8001bea:	e00f      	b.n	8001c0c <les_og_beregne_vinkler+0x414>
		  }
		  else{
			  gxneg = 0;
 8001bec:	4bb0      	ldr	r3, [pc, #704]	; (8001eb0 <les_og_beregne_vinkler+0x6b8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
			  gyro_x = (int)(gyrox * 10);
 8001bf2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bf6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c02:	ee17 3a90 	vmov	r3, s15
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	4baa      	ldr	r3, [pc, #680]	; (8001eb4 <les_og_beregne_vinkler+0x6bc>)
 8001c0a:	801a      	strh	r2, [r3, #0]
		  }
		  if(gyroy < 0){
 8001c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d512      	bpl.n	8001c40 <les_og_beregne_vinkler+0x448>
			  gyneg = 1;
 8001c1a:	4ba7      	ldr	r3, [pc, #668]	; (8001eb8 <les_og_beregne_vinkler+0x6c0>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
			  gyro_y = -(int)(gyroy * 10);
 8001c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c30:	ee17 3a90 	vmov	r3, s15
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	425b      	negs	r3, r3
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4ba0      	ldr	r3, [pc, #640]	; (8001ebc <les_og_beregne_vinkler+0x6c4>)
 8001c3c:	801a      	strh	r2, [r3, #0]
 8001c3e:	e00f      	b.n	8001c60 <les_og_beregne_vinkler+0x468>
		  }
		  else{
			  gyneg = 0;
 8001c40:	4b9d      	ldr	r3, [pc, #628]	; (8001eb8 <les_og_beregne_vinkler+0x6c0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
			  gyro_y = (int)(gyroy * 10);
 8001c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c56:	ee17 3a90 	vmov	r3, s15
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b97      	ldr	r3, [pc, #604]	; (8001ebc <les_og_beregne_vinkler+0x6c4>)
 8001c5e:	801a      	strh	r2, [r3, #0]
		  }

		  if(gyroz < 0){
 8001c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d512      	bpl.n	8001c94 <les_og_beregne_vinkler+0x49c>
			  gzneg = 1;
 8001c6e:	4b94      	ldr	r3, [pc, #592]	; (8001ec0 <les_og_beregne_vinkler+0x6c8>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
			  gyro_z = -(int)(gyroz * 10);
 8001c74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	4b8d      	ldr	r3, [pc, #564]	; (8001ec4 <les_og_beregne_vinkler+0x6cc>)
 8001c90:	801a      	strh	r2, [r3, #0]
 8001c92:	e00f      	b.n	8001cb4 <les_og_beregne_vinkler+0x4bc>
		  }
		  else{
			  gzneg = 0;
 8001c94:	4b8a      	ldr	r3, [pc, #552]	; (8001ec0 <les_og_beregne_vinkler+0x6c8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
			  gyro_z = (int)(gyroz * 10);
 8001c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001caa:	ee17 3a90 	vmov	r3, s15
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b84      	ldr	r3, [pc, #528]	; (8001ec4 <les_og_beregne_vinkler+0x6cc>)
 8001cb2:	801a      	strh	r2, [r3, #0]
		  }

		  if(accelx < 0){
 8001cb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	d512      	bpl.n	8001ce8 <les_og_beregne_vinkler+0x4f0>
			  axneg = 1;
 8001cc2:	4b81      	ldr	r3, [pc, #516]	; (8001ec8 <les_og_beregne_vinkler+0x6d0>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
			  aks_x = -(int)(accelx * 981);
 8001cc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ccc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001ecc <les_og_beregne_vinkler+0x6d4>
 8001cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd8:	ee17 3a90 	vmov	r3, s15
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	425b      	negs	r3, r3
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b7b      	ldr	r3, [pc, #492]	; (8001ed0 <les_og_beregne_vinkler+0x6d8>)
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	e00f      	b.n	8001d08 <les_og_beregne_vinkler+0x510>
		  }
		  else{
			  axneg = 0;
 8001ce8:	4b77      	ldr	r3, [pc, #476]	; (8001ec8 <les_og_beregne_vinkler+0x6d0>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
			  aks_x = (int)(accelx * 981);
 8001cee:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cf2:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001ecc <les_og_beregne_vinkler+0x6d4>
 8001cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfe:	ee17 3a90 	vmov	r3, s15
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b72      	ldr	r3, [pc, #456]	; (8001ed0 <les_og_beregne_vinkler+0x6d8>)
 8001d06:	801a      	strh	r2, [r3, #0]
		  }
		  if(accely < 0){
 8001d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	d512      	bpl.n	8001d3c <les_og_beregne_vinkler+0x544>
			  ayneg = 1;
 8001d16:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <les_og_beregne_vinkler+0x6dc>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
			  aks_y = -(int)(accely * 981);
 8001d1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d20:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001ecc <les_og_beregne_vinkler+0x6d4>
 8001d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2c:	ee17 3a90 	vmov	r3, s15
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	425b      	negs	r3, r3
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <les_og_beregne_vinkler+0x6e0>)
 8001d38:	801a      	strh	r2, [r3, #0]
 8001d3a:	e00f      	b.n	8001d5c <les_og_beregne_vinkler+0x564>
		  }
		  else{
			  ayneg = 0;
 8001d3c:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <les_og_beregne_vinkler+0x6dc>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
			  aks_y = (int)(accely * 981);
 8001d42:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d46:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001ecc <les_og_beregne_vinkler+0x6d4>
 8001d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d52:	ee17 3a90 	vmov	r3, s15
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	4b5f      	ldr	r3, [pc, #380]	; (8001ed8 <les_og_beregne_vinkler+0x6e0>)
 8001d5a:	801a      	strh	r2, [r3, #0]
		  }

		  if(accelz < 0){
 8001d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	d512      	bpl.n	8001d90 <les_og_beregne_vinkler+0x598>
			  azneg = 1;
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	; (8001edc <les_og_beregne_vinkler+0x6e4>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
			  aks_z = -(int)(accelz * 981);
 8001d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d74:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001ecc <les_og_beregne_vinkler+0x6d4>
 8001d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d80:	ee17 3a90 	vmov	r3, s15
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	425b      	negs	r3, r3
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	4b55      	ldr	r3, [pc, #340]	; (8001ee0 <les_og_beregne_vinkler+0x6e8>)
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	e00f      	b.n	8001db0 <les_og_beregne_vinkler+0x5b8>
		  }
		  else{
			  azneg = 0;
 8001d90:	4b52      	ldr	r3, [pc, #328]	; (8001edc <les_og_beregne_vinkler+0x6e4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
			  aks_z = (int)(accelz * 981);
 8001d96:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d9a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001ecc <les_og_beregne_vinkler+0x6d4>
 8001d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001da6:	ee17 3a90 	vmov	r3, s15
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <les_og_beregne_vinkler+0x6e8>)
 8001dae:	801a      	strh	r2, [r3, #0]
		  }

		  if(gyro_r_f < 0){
 8001db0:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <les_og_beregne_vinkler+0x6ec>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d513      	bpl.n	8001de8 <les_og_beregne_vinkler+0x5f0>
			  grneg = 1;
 8001dc0:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <les_og_beregne_vinkler+0x6f0>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
			  gyro_r = -(int)(gyro_r_f*10);
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <les_og_beregne_vinkler+0x6ec>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd8:	ee17 3a90 	vmov	r3, s15
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	425b      	negs	r3, r3
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	4b42      	ldr	r3, [pc, #264]	; (8001eec <les_og_beregne_vinkler+0x6f4>)
 8001de4:	801a      	strh	r2, [r3, #0]
 8001de6:	e010      	b.n	8001e0a <les_og_beregne_vinkler+0x612>
		  }
		  else{
			  grneg = 0;
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <les_og_beregne_vinkler+0x6f0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
			  gyro_r = (int)(gyro_r_f*10);
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <les_og_beregne_vinkler+0x6ec>)
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e00:	ee17 3a90 	vmov	r3, s15
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <les_og_beregne_vinkler+0x6f4>)
 8001e08:	801a      	strh	r2, [r3, #0]
		  }
		  if(gyro_s_f < 0){
 8001e0a:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <les_og_beregne_vinkler+0x6f8>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	d513      	bpl.n	8001e42 <les_og_beregne_vinkler+0x64a>
			  gsneg = 1;
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <les_og_beregne_vinkler+0x6fc>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
			  gyro_s = -(int)(gyro_s_f*10);
 8001e20:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <les_og_beregne_vinkler+0x6f8>)
 8001e22:	edd3 7a00 	vldr	s15, [r3]
 8001e26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e32:	ee17 3a90 	vmov	r3, s15
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	425b      	negs	r3, r3
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <les_og_beregne_vinkler+0x700>)
 8001e3e:	801a      	strh	r2, [r3, #0]
 8001e40:	e010      	b.n	8001e64 <les_og_beregne_vinkler+0x66c>
		  }
		  else{
			  gsneg = 0;
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <les_og_beregne_vinkler+0x6fc>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
			  gyro_s = (int)(gyro_s_f*10);
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <les_og_beregne_vinkler+0x6f8>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5a:	ee17 3a90 	vmov	r3, s15
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <les_og_beregne_vinkler+0x700>)
 8001e62:	801a      	strh	r2, [r3, #0]
		  }

		  if((int)(aks_s_f*10) < 0){
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <les_og_beregne_vinkler+0x704>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e76:	ee17 3a90 	vmov	r3, s15
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da44      	bge.n	8001f08 <les_og_beregne_vinkler+0x710>
			  asneg = 1;
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <les_og_beregne_vinkler+0x708>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
			  aks_s = -(int)(aks_s_f*10);
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <les_og_beregne_vinkler+0x704>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e96:	ee17 3a90 	vmov	r3, s15
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	425b      	negs	r3, r3
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <les_og_beregne_vinkler+0x70c>)
 8001ea2:	801a      	strh	r2, [r3, #0]
 8001ea4:	e041      	b.n	8001f2a <les_og_beregne_vinkler+0x732>
 8001ea6:	bf00      	nop
 8001ea8:	20000280 	.word	0x20000280
 8001eac:	20000260 	.word	0x20000260
 8001eb0:	200002a8 	.word	0x200002a8
 8001eb4:	2000022e 	.word	0x2000022e
 8001eb8:	200002a9 	.word	0x200002a9
 8001ebc:	20000230 	.word	0x20000230
 8001ec0:	200002aa 	.word	0x200002aa
 8001ec4:	20000232 	.word	0x20000232
 8001ec8:	200002ad 	.word	0x200002ad
 8001ecc:	44754000 	.word	0x44754000
 8001ed0:	20000238 	.word	0x20000238
 8001ed4:	200002ae 	.word	0x200002ae
 8001ed8:	2000023a 	.word	0x2000023a
 8001edc:	200002af 	.word	0x200002af
 8001ee0:	2000023c 	.word	0x2000023c
 8001ee4:	2000026c 	.word	0x2000026c
 8001ee8:	200002ab 	.word	0x200002ab
 8001eec:	20000234 	.word	0x20000234
 8001ef0:	20000270 	.word	0x20000270
 8001ef4:	200002ac 	.word	0x200002ac
 8001ef8:	20000236 	.word	0x20000236
 8001efc:	20000278 	.word	0x20000278
 8001f00:	200002b1 	.word	0x200002b1
 8001f04:	20000240 	.word	0x20000240
		  }
		  else{
			  asneg = 0;
 8001f08:	4b98      	ldr	r3, [pc, #608]	; (800216c <les_og_beregne_vinkler+0x974>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
			  aks_s = (int)(aks_s_f*10);
 8001f0e:	4b98      	ldr	r3, [pc, #608]	; (8002170 <les_og_beregne_vinkler+0x978>)
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f20:	ee17 3a90 	vmov	r3, s15
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	4b93      	ldr	r3, [pc, #588]	; (8002174 <les_og_beregne_vinkler+0x97c>)
 8001f28:	801a      	strh	r2, [r3, #0]
		  }
		  if((int)(aks_r_f*10) < 0){
 8001f2a:	4b93      	ldr	r3, [pc, #588]	; (8002178 <les_og_beregne_vinkler+0x980>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3c:	ee17 3a90 	vmov	r3, s15
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da13      	bge.n	8001f6c <les_og_beregne_vinkler+0x774>
			  arneg = 1;
 8001f44:	4b8d      	ldr	r3, [pc, #564]	; (800217c <les_og_beregne_vinkler+0x984>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
			  aks_r = -(int)(aks_r_f*10);
 8001f4a:	4b8b      	ldr	r3, [pc, #556]	; (8002178 <les_og_beregne_vinkler+0x980>)
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f5c:	ee17 3a90 	vmov	r3, s15
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	425b      	negs	r3, r3
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	4b86      	ldr	r3, [pc, #536]	; (8002180 <les_og_beregne_vinkler+0x988>)
 8001f68:	801a      	strh	r2, [r3, #0]
 8001f6a:	e010      	b.n	8001f8e <les_og_beregne_vinkler+0x796>
		  }
		  else{
			  arneg = 0;
 8001f6c:	4b83      	ldr	r3, [pc, #524]	; (800217c <les_og_beregne_vinkler+0x984>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
			  aks_r = (int)(aks_r_f*10);
 8001f72:	4b81      	ldr	r3, [pc, #516]	; (8002178 <les_og_beregne_vinkler+0x980>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f84:	ee17 3a90 	vmov	r3, s15
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b7d      	ldr	r3, [pc, #500]	; (8002180 <les_og_beregne_vinkler+0x988>)
 8001f8c:	801a      	strh	r2, [r3, #0]
		  }
		  if (komp_s_f < 0){
 8001f8e:	4b7d      	ldr	r3, [pc, #500]	; (8002184 <les_og_beregne_vinkler+0x98c>)
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	d513      	bpl.n	8001fc6 <les_og_beregne_vinkler+0x7ce>
			  ksneg = 1;
 8001f9e:	4b7a      	ldr	r3, [pc, #488]	; (8002188 <les_og_beregne_vinkler+0x990>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
			  komp_s = -(int)(komp_s_f*10);
 8001fa4:	4b77      	ldr	r3, [pc, #476]	; (8002184 <les_og_beregne_vinkler+0x98c>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb6:	ee17 3a90 	vmov	r3, s15
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	425b      	negs	r3, r3
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b72      	ldr	r3, [pc, #456]	; (800218c <les_og_beregne_vinkler+0x994>)
 8001fc2:	801a      	strh	r2, [r3, #0]
 8001fc4:	e010      	b.n	8001fe8 <les_og_beregne_vinkler+0x7f0>
		  }
		  else{
			  ksneg = 0;
 8001fc6:	4b70      	ldr	r3, [pc, #448]	; (8002188 <les_og_beregne_vinkler+0x990>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
			  komp_s = (int)(komp_s_f*10);
 8001fcc:	4b6d      	ldr	r3, [pc, #436]	; (8002184 <les_og_beregne_vinkler+0x98c>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fde:	ee17 3a90 	vmov	r3, s15
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	4b69      	ldr	r3, [pc, #420]	; (800218c <les_og_beregne_vinkler+0x994>)
 8001fe6:	801a      	strh	r2, [r3, #0]
		  }
		  if (komp_r_f < 0){
 8001fe8:	4b69      	ldr	r3, [pc, #420]	; (8002190 <les_og_beregne_vinkler+0x998>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff6:	d513      	bpl.n	8002020 <les_og_beregne_vinkler+0x828>
			  krneg = 1;
 8001ff8:	4b66      	ldr	r3, [pc, #408]	; (8002194 <les_og_beregne_vinkler+0x99c>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
			  komp_r = -(int)(komp_r_f*10);
 8001ffe:	4b64      	ldr	r3, [pc, #400]	; (8002190 <les_og_beregne_vinkler+0x998>)
 8002000:	edd3 7a00 	vldr	s15, [r3]
 8002004:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800200c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002010:	ee17 3a90 	vmov	r3, s15
 8002014:	b29b      	uxth	r3, r3
 8002016:	425b      	negs	r3, r3
 8002018:	b29a      	uxth	r2, r3
 800201a:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <les_og_beregne_vinkler+0x9a0>)
 800201c:	801a      	strh	r2, [r3, #0]
 800201e:	e010      	b.n	8002042 <les_og_beregne_vinkler+0x84a>
		  }
		  else{
			  krneg = 0;
 8002020:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <les_og_beregne_vinkler+0x99c>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
			  komp_r = (int)(komp_r_f*10);
 8002026:	4b5a      	ldr	r3, [pc, #360]	; (8002190 <les_og_beregne_vinkler+0x998>)
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002038:	ee17 3a90 	vmov	r3, s15
 800203c:	b29a      	uxth	r2, r3
 800203e:	4b56      	ldr	r3, [pc, #344]	; (8002198 <les_og_beregne_vinkler+0x9a0>)
 8002040:	801a      	strh	r2, [r3, #0]
		  }


		  // Deler opp 16-bits data til 8-bits data for sending over USB

		  lsb_gx = ((uint16_t)gyro_x >> 0) & 0xFF;
 8002042:	4b56      	ldr	r3, [pc, #344]	; (800219c <les_og_beregne_vinkler+0x9a4>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b55      	ldr	r3, [pc, #340]	; (80021a0 <les_og_beregne_vinkler+0x9a8>)
 800204a:	701a      	strb	r2, [r3, #0]
		  msb_gx = ((uint16_t)gyro_x >> 8) & 0xFF;
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <les_og_beregne_vinkler+0x9a4>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <les_og_beregne_vinkler+0x9ac>)
 8002058:	701a      	strb	r2, [r3, #0]

		  lsb_gy = ((uint16_t)gyro_y >> 0) & 0xFF;
 800205a:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <les_og_beregne_vinkler+0x9b0>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b52      	ldr	r3, [pc, #328]	; (80021ac <les_og_beregne_vinkler+0x9b4>)
 8002062:	701a      	strb	r2, [r3, #0]
		  msb_gy = ((uint16_t)gyro_y >> 8) & 0xFF;
 8002064:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <les_og_beregne_vinkler+0x9b0>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	b29b      	uxth	r3, r3
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <les_og_beregne_vinkler+0x9b8>)
 8002070:	701a      	strb	r2, [r3, #0]

		  lsb_gz = ((uint16_t)gyro_z >> 0) & 0xFF;
 8002072:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <les_og_beregne_vinkler+0x9bc>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b4f      	ldr	r3, [pc, #316]	; (80021b8 <les_og_beregne_vinkler+0x9c0>)
 800207a:	701a      	strb	r2, [r3, #0]
		  msb_gz = ((uint16_t)gyro_z >> 8) & 0xFF;
 800207c:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <les_og_beregne_vinkler+0x9bc>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	b29b      	uxth	r3, r3
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <les_og_beregne_vinkler+0x9c4>)
 8002088:	701a      	strb	r2, [r3, #0]

		  lsb_gr = ((uint16_t)gyro_r >> 0) & 0xFF;
 800208a:	4b4d      	ldr	r3, [pc, #308]	; (80021c0 <les_og_beregne_vinkler+0x9c8>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <les_og_beregne_vinkler+0x9cc>)
 8002092:	701a      	strb	r2, [r3, #0]
		  msb_gr = ((uint16_t)gyro_r >> 8) & 0xFF;
 8002094:	4b4a      	ldr	r3, [pc, #296]	; (80021c0 <les_og_beregne_vinkler+0x9c8>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	b29b      	uxth	r3, r3
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b4a      	ldr	r3, [pc, #296]	; (80021c8 <les_og_beregne_vinkler+0x9d0>)
 80020a0:	701a      	strb	r2, [r3, #0]

		  lsb_gs = ((uint16_t)gyro_s >> 0) & 0xFF;
 80020a2:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <les_og_beregne_vinkler+0x9d4>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <les_og_beregne_vinkler+0x9d8>)
 80020aa:	701a      	strb	r2, [r3, #0]
		  msb_gs = ((uint16_t)gyro_s >> 8) & 0xFF;
 80020ac:	4b47      	ldr	r3, [pc, #284]	; (80021cc <les_og_beregne_vinkler+0x9d4>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <les_og_beregne_vinkler+0x9dc>)
 80020b8:	701a      	strb	r2, [r3, #0]

		  lsb_ax = ((uint16_t)aks_x >> 0) & 0xFF;
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <les_og_beregne_vinkler+0x9e0>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b46      	ldr	r3, [pc, #280]	; (80021dc <les_og_beregne_vinkler+0x9e4>)
 80020c2:	701a      	strb	r2, [r3, #0]
		  msb_ax = ((uint16_t)aks_x >> 8) & 0xFF;
 80020c4:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <les_og_beregne_vinkler+0x9e0>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4b44      	ldr	r3, [pc, #272]	; (80021e0 <les_og_beregne_vinkler+0x9e8>)
 80020d0:	701a      	strb	r2, [r3, #0]

		  lsb_ay = ((uint16_t)aks_y >> 0) & 0xFF;
 80020d2:	4b44      	ldr	r3, [pc, #272]	; (80021e4 <les_og_beregne_vinkler+0x9ec>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <les_og_beregne_vinkler+0x9f0>)
 80020da:	701a      	strb	r2, [r3, #0]
		  msb_ay = ((uint16_t)aks_y >> 8) & 0xFF;
 80020dc:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <les_og_beregne_vinkler+0x9ec>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b41      	ldr	r3, [pc, #260]	; (80021ec <les_og_beregne_vinkler+0x9f4>)
 80020e8:	701a      	strb	r2, [r3, #0]

		  lsb_az = ((uint16_t)aks_z >> 0) & 0xFF;
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <les_og_beregne_vinkler+0x9f8>)
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b40      	ldr	r3, [pc, #256]	; (80021f4 <les_og_beregne_vinkler+0x9fc>)
 80020f2:	701a      	strb	r2, [r3, #0]
		  msb_az = ((uint16_t)aks_z >> 8) & 0xFF;
 80020f4:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <les_og_beregne_vinkler+0x9f8>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b3e      	ldr	r3, [pc, #248]	; (80021f8 <les_og_beregne_vinkler+0xa00>)
 8002100:	701a      	strb	r2, [r3, #0]

		  lsb_ar = ((uint16_t)aks_r >> 0) & 0xFF;
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <les_og_beregne_vinkler+0x988>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <les_og_beregne_vinkler+0xa04>)
 800210a:	701a      	strb	r2, [r3, #0]
		  msb_ar = ((uint16_t)aks_r >> 8) & 0xFF;
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <les_og_beregne_vinkler+0x988>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	b29b      	uxth	r3, r3
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <les_og_beregne_vinkler+0xa08>)
 8002118:	701a      	strb	r2, [r3, #0]

		  lsb_as = ((uint16_t)aks_s >> 0) & 0xFF;
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <les_og_beregne_vinkler+0x97c>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <les_og_beregne_vinkler+0xa0c>)
 8002122:	701a      	strb	r2, [r3, #0]
		  msb_as = ((uint16_t)aks_s >> 8) & 0xFF;
 8002124:	4b13      	ldr	r3, [pc, #76]	; (8002174 <les_og_beregne_vinkler+0x97c>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	b29b      	uxth	r3, r3
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <les_og_beregne_vinkler+0xa10>)
 8002130:	701a      	strb	r2, [r3, #0]

		  lsb_kr = ((uint16_t)komp_r >> 0) & 0xFF;
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <les_og_beregne_vinkler+0x9a0>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b34      	ldr	r3, [pc, #208]	; (800220c <les_og_beregne_vinkler+0xa14>)
 800213a:	701a      	strb	r2, [r3, #0]
		  msb_kr = ((uint16_t)komp_r >> 8) & 0xFF;
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <les_og_beregne_vinkler+0x9a0>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	b29b      	uxth	r3, r3
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b32      	ldr	r3, [pc, #200]	; (8002210 <les_og_beregne_vinkler+0xa18>)
 8002148:	701a      	strb	r2, [r3, #0]

		  lsb_ks = ((uint16_t)komp_s >> 0) & 0xFF;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <les_og_beregne_vinkler+0x994>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <les_og_beregne_vinkler+0xa1c>)
 8002152:	701a      	strb	r2, [r3, #0]
		  msb_ks = ((uint16_t)komp_s >> 8) & 0xFF;
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <les_og_beregne_vinkler+0x994>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	b29b      	uxth	r3, r3
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <les_og_beregne_vinkler+0xa20>)
 8002160:	701a      	strb	r2, [r3, #0]
	  }


}
 8002162:	bf00      	nop
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800216c:	200002b1 	.word	0x200002b1
 8002170:	20000278 	.word	0x20000278
 8002174:	20000240 	.word	0x20000240
 8002178:	20000274 	.word	0x20000274
 800217c:	200002b0 	.word	0x200002b0
 8002180:	2000023e 	.word	0x2000023e
 8002184:	20000280 	.word	0x20000280
 8002188:	200002b3 	.word	0x200002b3
 800218c:	20000244 	.word	0x20000244
 8002190:	2000027c 	.word	0x2000027c
 8002194:	200002b2 	.word	0x200002b2
 8002198:	20000242 	.word	0x20000242
 800219c:	2000022e 	.word	0x2000022e
 80021a0:	20000291 	.word	0x20000291
 80021a4:	20000290 	.word	0x20000290
 80021a8:	20000230 	.word	0x20000230
 80021ac:	20000293 	.word	0x20000293
 80021b0:	20000292 	.word	0x20000292
 80021b4:	20000232 	.word	0x20000232
 80021b8:	20000295 	.word	0x20000295
 80021bc:	20000294 	.word	0x20000294
 80021c0:	20000234 	.word	0x20000234
 80021c4:	20000297 	.word	0x20000297
 80021c8:	20000296 	.word	0x20000296
 80021cc:	20000236 	.word	0x20000236
 80021d0:	20000299 	.word	0x20000299
 80021d4:	20000298 	.word	0x20000298
 80021d8:	20000238 	.word	0x20000238
 80021dc:	2000029b 	.word	0x2000029b
 80021e0:	2000029a 	.word	0x2000029a
 80021e4:	2000023a 	.word	0x2000023a
 80021e8:	2000029d 	.word	0x2000029d
 80021ec:	2000029c 	.word	0x2000029c
 80021f0:	2000023c 	.word	0x2000023c
 80021f4:	2000029f 	.word	0x2000029f
 80021f8:	2000029e 	.word	0x2000029e
 80021fc:	200002a1 	.word	0x200002a1
 8002200:	200002a0 	.word	0x200002a0
 8002204:	200002a3 	.word	0x200002a3
 8002208:	200002a2 	.word	0x200002a2
 800220c:	200002a5 	.word	0x200002a5
 8002210:	200002a4 	.word	0x200002a4
 8002214:	200002a7 	.word	0x200002a7
 8002218:	200002a6 	.word	0x200002a6

0800221c <lag_datapakker_CAN>:

void lag_datapakker_CAN(void){
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <lag_datapakker_CAN+0x60>)
 8002222:	781a      	ldrb	r2, [r3, #0]

	// Lager datapakke til kraftkort
	memcpy(kraftpakke, &status, 1);
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <lag_datapakker_CAN+0x64>)
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <lag_datapakker_CAN+0x68>)
 800222a:	781a      	ldrb	r2, [r3, #0]
	memcpy(&kraftpakke[1], &c_thoved, 1);
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <lag_datapakker_CAN+0x64>)
 800222e:	705a      	strb	r2, [r3, #1]
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <lag_datapakker_CAN+0x6c>)
 8002232:	781a      	ldrb	r2, [r3, #0]
	memcpy(&kraftpakke[2], &c_tkraft, 1);
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <lag_datapakker_CAN+0x64>)
 8002236:	709a      	strb	r2, [r3, #2]
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <lag_datapakker_CAN+0x70>)
 800223a:	781a      	ldrb	r2, [r3, #0]
	memcpy(&kraftpakke[3], &c_tsens, 1);
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <lag_datapakker_CAN+0x64>)
 800223e:	70da      	strb	r2, [r3, #3]
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <lag_datapakker_CAN+0x74>)
 8002242:	881b      	ldrh	r3, [r3, #0]

	// Lager datapakke til regulering
	memcpy(akspakke, &c_aks_x, 2);
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <lag_datapakker_CAN+0x78>)
 8002246:	8013      	strh	r3, [r2, #0]
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <lag_datapakker_CAN+0x7c>)
 800224a:	881b      	ldrh	r3, [r3, #0]
	memcpy(&akspakke[2], &c_aks_y, 2);
 800224c:	4a11      	ldr	r2, [pc, #68]	; (8002294 <lag_datapakker_CAN+0x78>)
 800224e:	8053      	strh	r3, [r2, #2]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <lag_datapakker_CAN+0x80>)
 8002252:	881b      	ldrh	r3, [r3, #0]
	memcpy(&akspakke[4], &c_aks_z, 2);
 8002254:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <lag_datapakker_CAN+0x78>)
 8002256:	8093      	strh	r3, [r2, #4]
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <lag_datapakker_CAN+0x84>)
 800225a:	881b      	ldrh	r3, [r3, #0]

	memcpy(regpakke, &c_hiv, 2);
 800225c:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <lag_datapakker_CAN+0x88>)
 800225e:	8013      	strh	r3, [r2, #0]
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <lag_datapakker_CAN+0x8c>)
 8002262:	881b      	ldrh	r3, [r3, #0]
	memcpy(&regpakke[2], &c_rull, 2);
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <lag_datapakker_CAN+0x88>)
 8002266:	8053      	strh	r3, [r2, #2]
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <lag_datapakker_CAN+0x90>)
 800226a:	881b      	ldrh	r3, [r3, #0]
	memcpy(&regpakke[4], &c_stamp, 2);
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <lag_datapakker_CAN+0x88>)
 800226e:	8093      	strh	r3, [r2, #4]

}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	200002b4 	.word	0x200002b4
 8002280:	200002b8 	.word	0x200002b8
 8002284:	20000264 	.word	0x20000264
 8002288:	20000265 	.word	0x20000265
 800228c:	20000266 	.word	0x20000266
 8002290:	20000258 	.word	0x20000258
 8002294:	200002c8 	.word	0x200002c8
 8002298:	2000025a 	.word	0x2000025a
 800229c:	2000025c 	.word	0x2000025c
 80022a0:	20000262 	.word	0x20000262
 80022a4:	200002c0 	.word	0x200002c0
 80022a8:	2000025e 	.word	0x2000025e
 80022ac:	20000260 	.word	0x20000260

080022b0 <senddatapakkerCAN>:
	  memcpy(&imu_usb[63], &msb_ks, 1);
	  memcpy(&imu_usb[64], &lsb_ks, 1);

}

void senddatapakkerCAN(void){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0

	  // Temperatur og lekk til:
	  memcpy(csend, &kraftpakke, 8);
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <senddatapakkerCAN+0x44>)
 80022b6:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <senddatapakkerCAN+0x48>)
 80022b8:	6811      	ldr	r1, [r2, #0]
 80022ba:	6852      	ldr	r2, [r2, #4]
 80022bc:	6019      	str	r1, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]

	  // strømgruppe og topside
	  sendDataCAN(140, &hcan1);
 80022c0:	490e      	ldr	r1, [pc, #56]	; (80022fc <senddatapakkerCAN+0x4c>)
 80022c2:	208c      	movs	r0, #140	; 0x8c
 80022c4:	f7ff f8ba 	bl	800143c <sendDataCAN>

	  // hiv, rull, stamp til:
	  memcpy(csend, &regpakke, 8);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <senddatapakkerCAN+0x44>)
 80022ca:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <senddatapakkerCAN+0x50>)
 80022cc:	6811      	ldr	r1, [r2, #0]
 80022ce:	6852      	ldr	r2, [r2, #4]
 80022d0:	6019      	str	r1, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]

	  // styring og topside
	  sendDataCAN(80, &hcan1);
 80022d4:	4909      	ldr	r1, [pc, #36]	; (80022fc <senddatapakkerCAN+0x4c>)
 80022d6:	2050      	movs	r0, #80	; 0x50
 80022d8:	f7ff f8b0 	bl	800143c <sendDataCAN>

	  // akselerasjon til:
	  memcpy(csend, &akspakke, 8);
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <senddatapakkerCAN+0x44>)
 80022de:	4a09      	ldr	r2, [pc, #36]	; (8002304 <senddatapakkerCAN+0x54>)
 80022e0:	6811      	ldr	r1, [r2, #0]
 80022e2:	6852      	ldr	r2, [r2, #4]
 80022e4:	6019      	str	r1, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]

	  // styring og topside
	  sendDataCAN(81, &hcan1);
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <senddatapakkerCAN+0x4c>)
 80022ea:	2051      	movs	r0, #81	; 0x51
 80022ec:	f7ff f8a6 	bl	800143c <sendDataCAN>
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000000 	.word	0x20000000
 80022f8:	200002b8 	.word	0x200002b8
 80022fc:	20000500 	.word	0x20000500
 8002300:	200002c0 	.word	0x200002c0
 8002304:	200002c8 	.word	0x200002c8

08002308 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b41      	ldr	r3, [pc, #260]	; (8002428 <MX_GPIO_Init+0x120>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a40      	ldr	r2, [pc, #256]	; (8002428 <MX_GPIO_Init+0x120>)
 8002328:	f043 0304 	orr.w	r3, r3, #4
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <MX_GPIO_Init+0x120>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b3a      	ldr	r3, [pc, #232]	; (8002428 <MX_GPIO_Init+0x120>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a39      	ldr	r2, [pc, #228]	; (8002428 <MX_GPIO_Init+0x120>)
 8002344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b37      	ldr	r3, [pc, #220]	; (8002428 <MX_GPIO_Init+0x120>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b33      	ldr	r3, [pc, #204]	; (8002428 <MX_GPIO_Init+0x120>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a32      	ldr	r2, [pc, #200]	; (8002428 <MX_GPIO_Init+0x120>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b30      	ldr	r3, [pc, #192]	; (8002428 <MX_GPIO_Init+0x120>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	4b2c      	ldr	r3, [pc, #176]	; (8002428 <MX_GPIO_Init+0x120>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a2b      	ldr	r2, [pc, #172]	; (8002428 <MX_GPIO_Init+0x120>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <MX_GPIO_Init+0x120>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATLED_Pin|GPIO_PIN_0|GPIO_PIN_9|DATALED_Pin, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	f243 2101 	movw	r1, #12801	; 0x3201
 8002394:	4825      	ldr	r0, [pc, #148]	; (800242c <MX_GPIO_Init+0x124>)
 8002396:	f002 fe77 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	2108      	movs	r1, #8
 800239e:	4824      	ldr	r0, [pc, #144]	; (8002430 <MX_GPIO_Init+0x128>)
 80023a0:	f002 fe72 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	2110      	movs	r1, #16
 80023a8:	4821      	ldr	r0, [pc, #132]	; (8002430 <MX_GPIO_Init+0x128>)
 80023aa:	f002 fe6d 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC0 PC9 PCPin */
  GPIO_InitStruct.Pin = STATLED_Pin|GPIO_PIN_0|GPIO_PIN_9|DATALED_Pin;
 80023ae:	f243 2301 	movw	r3, #12801	; 0x3201
 80023b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	4819      	ldr	r0, [pc, #100]	; (800242c <MX_GPIO_Init+0x124>)
 80023c8:	f002 fcaa 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8;
 80023cc:	f240 1307 	movw	r3, #263	; 0x107
 80023d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	4813      	ldr	r0, [pc, #76]	; (8002430 <MX_GPIO_Init+0x128>)
 80023e2:	f002 fc9d 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023e6:	2308      	movs	r3, #8
 80023e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	480c      	ldr	r0, [pc, #48]	; (8002430 <MX_GPIO_Init+0x128>)
 80023fe:	f002 fc8f 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002402:	2310      	movs	r3, #16
 8002404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002406:	2301      	movs	r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800240e:	2302      	movs	r3, #2
 8002410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <MX_GPIO_Init+0x128>)
 800241a:	f002 fc81 	bl	8004d20 <HAL_GPIO_Init>

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40020800 	.word	0x40020800
 8002430:	40020000 	.word	0x40020000

08002434 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <MX_I2C1_Init+0x54>)
 800243a:	4a14      	ldr	r2, [pc, #80]	; (800248c <MX_I2C1_Init+0x58>)
 800243c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <MX_I2C1_Init+0x54>)
 8002440:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002444:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <MX_I2C1_Init+0x54>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <MX_I2C1_Init+0x54>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <MX_I2C1_Init+0x54>)
 8002454:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002458:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <MX_I2C1_Init+0x54>)
 800245c:	2200      	movs	r2, #0
 800245e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <MX_I2C1_Init+0x54>)
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <MX_I2C1_Init+0x54>)
 8002468:	2200      	movs	r2, #0
 800246a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <MX_I2C1_Init+0x54>)
 800246e:	2200      	movs	r2, #0
 8002470:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <MX_I2C1_Init+0x54>)
 8002474:	f002 fe22 	bl	80050bc <HAL_I2C_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800247e:	f000 fea3 	bl	80031c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000528 	.word	0x20000528
 800248c:	40005400 	.word	0x40005400

08002490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_I2C_MspInit+0x84>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d12b      	bne.n	800250a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_I2C_MspInit+0x88>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <HAL_I2C_MspInit+0x88>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_I2C_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ce:	23c0      	movs	r3, #192	; 0xc0
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d2:	2312      	movs	r3, #18
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	2303      	movs	r3, #3
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024de:	2304      	movs	r3, #4
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	480c      	ldr	r0, [pc, #48]	; (800251c <HAL_I2C_MspInit+0x8c>)
 80024ea:	f002 fc19 	bl	8004d20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_I2C_MspInit+0x88>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_I2C_MspInit+0x88>)
 80024f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_I2C_MspInit+0x88>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	; 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40005400 	.word	0x40005400
 8002518:	40023800 	.word	0x40023800
 800251c:	40020400 	.word	0x40020400

08002520 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());	// while-løkke som sørger for at funksjonen ikke blir fullført med mindre kontakt med sensoren er etablert
 8002524:	bf00      	nop
 8002526:	f000 f913 	bl	8002750 <icm20948_who_am_i>
 800252a:	4603      	mov	r3, r0
 800252c:	f083 0301 	eor.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f7      	bne.n	8002526 <icm20948_init+0x6>

	icm20948_device_reset();		// Funksjon som resetter sensoren og setter alle innstillinger til standard
 8002536:	f000 f91e 	bl	8002776 <icm20948_device_reset>
	icm20948_wakeup();				// Funksjon som deaktiverer dvalemodus på enheten
 800253a:	f000 f928 	bl	800278e <icm20948_wakeup>

	icm20948_clock_source(1);		// Klokkekilde blir satt til automatisk valg av den som er best tilgjengelig.
 800253e:	2001      	movs	r0, #1
 8002540:	f000 f956 	bl	80027f0 <icm20948_clock_source>
	icm20948_odr_align_enable();	// Synkroniserer ODR-registeret på enheten med hastigheten til gyro og akselerometer
 8002544:	f000 f96d 	bl	8002822 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();	// Deaktiverer I2C-funksjonaliteten til enheten, slik at den kun fungerer i SPI-modus
 8002548:	f000 f93b 	bl	80027c2 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(6);			// Setter lavpassfilter til å ha en knekkfrekvens på 196,6 Hz
 800254c:	2006      	movs	r0, #6
 800254e:	f000 f971 	bl	8002834 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(6);			// Setter lavpassfilter til å ha en knekkfrekvens på 246 Hz
 8002552:	2006      	movs	r0, #6
 8002554:	f000 f98b 	bl	800286e <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(10);		// Setter en samplingsrate på 100Hz
 8002558:	200a      	movs	r0, #10
 800255a:	f000 f9a5 	bl	80028a8 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(10);		// Setter en samplingsrate på 102,2727Hz
 800255e:	200a      	movs	r0, #10
 8002560:	f000 f9b1 	bl	80028c6 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();				// Kalibrerer gyroskop
 8002564:	f000 f9ce 	bl	8002904 <icm20948_gyro_calibration>
	icm20948_accel_calibration();				// Kalibrerer akselerometer
 8002568:	f000 fa68 	bl	8002a3c <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_250dps);	// Velger maksimal rekkevidde for gyroskop til 250 grader per sekund
 800256c:	2000      	movs	r0, #0
 800256e:	f000 fb73 	bl	8002c58 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_2g);		// Velger maksimal rekkevidde for akselerometer til 19,62 m/s²
 8002572:	2000      	movs	r0, #0
 8002574:	f000 fbba 	bl	8002cec <icm20948_accel_full_scale_select>
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <icm20948_gyro_read>:
	ak09916_soft_reset();
	ak09916_operation_mode_setting(continuous_measurement_100hz);
}

void icm20948_gyro_read(axises* data)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8002584:	2206      	movs	r2, #6
 8002586:	2133      	movs	r1, #51	; 0x33
 8002588:	2000      	movs	r0, #0
 800258a:	f000 fc77 	bl	8002e7c <read_multiple_icm20948_reg>
 800258e:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	b21a      	sxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3301      	adds	r3, #1
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	b21b      	sxth	r3, r3
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b21b      	sxth	r3, r3
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3302      	adds	r3, #2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	b21a      	sxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3303      	adds	r3, #3
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b21b      	sxth	r3, r3
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3304      	adds	r3, #4
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	b21a      	sxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3305      	adds	r3, #5
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	b21b      	sxth	r3, r3
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b21b      	sxth	r3, r3
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 800260c:	2206      	movs	r2, #6
 800260e:	212d      	movs	r1, #45	; 0x2d
 8002610:	2000      	movs	r0, #0
 8002612:	f000 fc33 	bl	8002e7c <read_multiple_icm20948_reg>
 8002616:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	b21a      	sxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3301      	adds	r3, #1
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b21b      	sxth	r3, r3
 8002628:	4313      	orrs	r3, r2
 800262a:	b21b      	sxth	r3, r3
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3302      	adds	r3, #2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	b21a      	sxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3303      	adds	r3, #3
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b21b      	sxth	r3, r3
 800264c:	4313      	orrs	r3, r2
 800264e:	b21b      	sxth	r3, r3
 8002650:	ee07 3a90 	vmov	s15, r3
 8002654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3304      	adds	r3, #4
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	b21a      	sxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3305      	adds	r3, #5
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b21b      	sxth	r3, r3
 8002670:	4313      	orrs	r3, r2
 8002672:	b21b      	sxth	r3, r3
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <icm20948_accel_read+0x90>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	edc3 7a02 	vstr	s15, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000218 	.word	0x20000218

08002698 <icm20948_gyro_read_dps>:

	return true;
}

void icm20948_gyro_read_dps(axises* data)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff ff6b 	bl	800257c <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	edd3 6a00 	vldr	s13, [r3]
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <icm20948_gyro_read_dps+0x58>)
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	edc3 7a00 	vstr	s15, [r3]
	data->y /= gyro_scale_factor;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	edd3 6a01 	vldr	s13, [r3, #4]
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <icm20948_gyro_read_dps+0x58>)
 80026c4:	ed93 7a00 	vldr	s14, [r3]
 80026c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= gyro_scale_factor;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <icm20948_gyro_read_dps+0x58>)
 80026da:	ed93 7a00 	vldr	s14, [r3]
 80026de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000214 	.word	0x20000214

080026f4 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises* data)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	icm20948_accel_read(data);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff81 	bl	8002604 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	edd3 6a00 	vldr	s13, [r3]
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <icm20948_accel_read_g+0x58>)
 800270a:	ed93 7a00 	vldr	s14, [r3]
 800270e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	edc3 7a00 	vstr	s15, [r3]
	data->y /= accel_scale_factor;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	edd3 6a01 	vldr	s13, [r3, #4]
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <icm20948_accel_read_g+0x58>)
 8002720:	ed93 7a00 	vldr	s14, [r3]
 8002724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= accel_scale_factor;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	edd3 6a02 	vldr	s13, [r3, #8]
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <icm20948_accel_read_g+0x58>)
 8002736:	ed93 7a00 	vldr	s14, [r3]
 800273a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000218 	.word	0x20000218

08002750 <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8002756:	2100      	movs	r1, #0
 8002758:	2000      	movs	r0, #0
 800275a:	f000 fb3f 	bl	8002ddc <read_single_icm20948_reg>
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2bea      	cmp	r3, #234	; 0xea
 8002766:	d101      	bne.n	800276c <icm20948_who_am_i+0x1c>
		return true;
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <icm20948_who_am_i+0x1e>
	else
		return false;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <icm20948_device_reset>:
	else
		return false;
}

void icm20948_device_reset()
{
 8002776:	b580      	push	{r7, lr}
 8002778:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 800277a:	22c1      	movs	r2, #193	; 0xc1
 800277c:	2106      	movs	r1, #6
 800277e:	2000      	movs	r0, #0
 8002780:	f000 fb58 	bl	8002e34 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002784:	2064      	movs	r0, #100	; 0x64
 8002786:	f001 fb33 	bl	8003df0 <HAL_Delay>
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}

0800278e <icm20948_wakeup>:
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
	HAL_Delay(100);
}

void icm20948_wakeup()
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002794:	2106      	movs	r1, #6
 8002796:	2000      	movs	r0, #0
 8002798:	f000 fb20 	bl	8002ddc <read_single_icm20948_reg>
 800279c:	4603      	mov	r3, r0
 800279e:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027a6:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	461a      	mov	r2, r3
 80027ac:	2106      	movs	r1, #6
 80027ae:	2000      	movs	r0, #0
 80027b0:	f000 fb40 	bl	8002e34 <write_single_icm20948_reg>
	HAL_Delay(100);
 80027b4:	2064      	movs	r0, #100	; 0x64
 80027b6:	f001 fb1b 	bl	8003df0 <HAL_Delay>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80027c8:	2103      	movs	r1, #3
 80027ca:	2000      	movs	r0, #0
 80027cc:	f000 fb06 	bl	8002ddc <read_single_icm20948_reg>
 80027d0:	4603      	mov	r3, r0
 80027d2:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f043 0310 	orr.w	r3, r3, #16
 80027da:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	461a      	mov	r2, r3
 80027e0:	2103      	movs	r1, #3
 80027e2:	2000      	movs	r0, #0
 80027e4:	f000 fb26 	bl	8002e34 <write_single_icm20948_reg>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <icm20948_clock_source>:

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
}

void icm20948_clock_source(uint8_t source)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80027fa:	2106      	movs	r1, #6
 80027fc:	2000      	movs	r0, #0
 80027fe:	f000 faed 	bl	8002ddc <read_single_icm20948_reg>
 8002802:	4603      	mov	r3, r0
 8002804:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	4313      	orrs	r3, r2
 800280c:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	461a      	mov	r2, r3
 8002812:	2106      	movs	r1, #6
 8002814:	2000      	movs	r0, #0
 8002816:	f000 fb0d 	bl	8002e34 <write_single_icm20948_reg>
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8002822:	b580      	push	{r7, lr}
 8002824:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8002826:	2201      	movs	r2, #1
 8002828:	2109      	movs	r1, #9
 800282a:	2020      	movs	r0, #32
 800282c:	f000 fb02 	bl	8002e34 <write_single_icm20948_reg>
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}

08002834 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800283e:	2101      	movs	r1, #1
 8002840:	2020      	movs	r0, #32
 8002842:	f000 facb 	bl	8002ddc <read_single_icm20948_reg>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	b25a      	sxtb	r2, r3
 8002850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002854:	4313      	orrs	r3, r2
 8002856:	b25b      	sxtb	r3, r3
 8002858:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	461a      	mov	r2, r3
 800285e:	2101      	movs	r1, #1
 8002860:	2020      	movs	r0, #32
 8002862:	f000 fae7 	bl	8002e34 <write_single_icm20948_reg>
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002878:	2114      	movs	r1, #20
 800287a:	2020      	movs	r0, #32
 800287c:	f000 faae 	bl	8002ddc <read_single_icm20948_reg>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	b25a      	sxtb	r2, r3
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288e:	4313      	orrs	r3, r2
 8002890:	b25b      	sxtb	r3, r3
 8002892:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);		// B2_GYRO_CONFIG_1 ble brukt tidligere, som er feil.
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	461a      	mov	r2, r3
 8002898:	2114      	movs	r1, #20
 800289a:	2020      	movs	r0, #32
 800289c:	f000 faca 	bl	8002e34 <write_single_icm20948_reg>
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	461a      	mov	r2, r3
 80028b6:	2100      	movs	r1, #0
 80028b8:	2020      	movs	r0, #32
 80028ba:	f000 fabb 	bl	8002e34 <write_single_icm20948_reg>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	461a      	mov	r2, r3
 80028e6:	2110      	movs	r1, #16
 80028e8:	2020      	movs	r0, #32
 80028ea:	f000 faa3 	bl	8002e34 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 80028ee:	7bbb      	ldrb	r3, [r7, #14]
 80028f0:	461a      	mov	r2, r3
 80028f2:	2111      	movs	r1, #17
 80028f4:	2020      	movs	r0, #32
 80028f6:	f000 fa9d 	bl	8002e34 <write_single_icm20948_reg>
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <icm20948_gyro_calibration>:
	write_single_ak09916_reg(MAG_CNTL2, mode);
	HAL_Delay(100);
}

void icm20948_gyro_calibration()
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	2300      	movs	r3, #0
 800291c:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
 8002922:	e031      	b.n	8002988 <icm20948_gyro_calibration+0x84>
	{
		icm20948_gyro_read(&temp);
 8002924:	f107 0318 	add.w	r3, r7, #24
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fe27 	bl	800257c <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002938:	edd7 7a06 	vldr	s15, [r7, #24]
 800293c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002944:	ee17 3a90 	vmov	r3, s15
 8002948:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002954:	edd7 7a07 	vldr	s15, [r7, #28]
 8002958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002960:	ee17 3a90 	vmov	r3, s15
 8002964:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002970:	edd7 7a08 	vldr	s15, [r7, #32]
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800297c:	ee17 3a90 	vmov	r3, s15
 8002980:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	3301      	adds	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	2b63      	cmp	r3, #99	; 0x63
 800298c:	ddca      	ble.n	8002924 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a29      	ldr	r2, [pc, #164]	; (8002a38 <icm20948_gyro_calibration+0x134>)
 8002992:	fb82 1203 	smull	r1, r2, r2, r3
 8002996:	1152      	asrs	r2, r2, #5
 8002998:	17db      	asrs	r3, r3, #31
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <icm20948_gyro_calibration+0x134>)
 80029a2:	fb82 1203 	smull	r1, r2, r2, r3
 80029a6:	1152      	asrs	r2, r2, #5
 80029a8:	17db      	asrs	r3, r3, #31
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <icm20948_gyro_calibration+0x134>)
 80029b2:	fb82 1203 	smull	r1, r2, r2, r3
 80029b6:	1152      	asrs	r2, r2, #5
 80029b8:	17db      	asrs	r3, r3, #31
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	425b      	negs	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da00      	bge.n	80029c8 <icm20948_gyro_calibration+0xc4>
 80029c6:	3303      	adds	r3, #3
 80029c8:	109b      	asrs	r3, r3, #2
 80029ca:	121b      	asrs	r3, r3, #8
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	425b      	negs	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da00      	bge.n	80029da <icm20948_gyro_calibration+0xd6>
 80029d8:	3303      	adds	r3, #3
 80029da:	109b      	asrs	r3, r3, #2
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	425b      	negs	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	da00      	bge.n	80029ea <icm20948_gyro_calibration+0xe6>
 80029e8:	3303      	adds	r3, #3
 80029ea:	109b      	asrs	r3, r3, #2
 80029ec:	121b      	asrs	r3, r3, #8
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	425b      	negs	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da00      	bge.n	80029fc <icm20948_gyro_calibration+0xf8>
 80029fa:	3303      	adds	r3, #3
 80029fc:	109b      	asrs	r3, r3, #2
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	425b      	negs	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da00      	bge.n	8002a0c <icm20948_gyro_calibration+0x108>
 8002a0a:	3303      	adds	r3, #3
 8002a0c:	109b      	asrs	r3, r3, #2
 8002a0e:	121b      	asrs	r3, r3, #8
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	425b      	negs	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	da00      	bge.n	8002a1e <icm20948_gyro_calibration+0x11a>
 8002a1c:	3303      	adds	r3, #3
 8002a1e:	109b      	asrs	r3, r3, #2
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8002a24:	1d3a      	adds	r2, r7, #4
 8002a26:	2306      	movs	r3, #6
 8002a28:	2103      	movs	r1, #3
 8002a2a:	2020      	movs	r0, #32
 8002a2c:	f000 fa56 	bl	8002edc <write_multiple_icm20948_reg>
}
 8002a30:	bf00      	nop
 8002a32:	3728      	adds	r7, #40	; 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	51eb851f 	.word	0x51eb851f

08002a3c <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b090      	sub	sp, #64	; 0x40
 8002a40:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8002a42:	f107 0318 	add.w	r3, r7, #24
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a66:	e031      	b.n	8002acc <icm20948_accel_calibration+0x90>
	{
		icm20948_accel_read(&temp);
 8002a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fdc9 	bl	8002604 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	ee07 3a90 	vmov	s15, r3
 8002a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a88:	ee17 3a90 	vmov	r3, s15
 8002a8c:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa4:	ee17 3a90 	vmov	r3, s15
 8002aa8:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	ee07 3a90 	vmov	s15, r3
 8002ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ab4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ac0:	ee17 3a90 	vmov	r3, s15
 8002ac4:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 8002ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac8:	3301      	adds	r3, #1
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ace:	2b63      	cmp	r3, #99	; 0x63
 8002ad0:	ddca      	ble.n	8002a68 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4a5e      	ldr	r2, [pc, #376]	; (8002c50 <icm20948_accel_calibration+0x214>)
 8002ad6:	fb82 1203 	smull	r1, r2, r2, r3
 8002ada:	1152      	asrs	r2, r2, #5
 8002adc:	17db      	asrs	r3, r3, #31
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4a5a      	ldr	r2, [pc, #360]	; (8002c50 <icm20948_accel_calibration+0x214>)
 8002ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8002aea:	1152      	asrs	r2, r2, #5
 8002aec:	17db      	asrs	r3, r3, #31
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	4a56      	ldr	r2, [pc, #344]	; (8002c50 <icm20948_accel_calibration+0x214>)
 8002af6:	fb82 1203 	smull	r1, r2, r2, r3
 8002afa:	1152      	asrs	r2, r2, #5
 8002afc:	17db      	asrs	r3, r3, #31
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 8002b02:	4a54      	ldr	r2, [pc, #336]	; (8002c54 <icm20948_accel_calibration+0x218>)
 8002b04:	463b      	mov	r3, r7
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	4611      	mov	r1, r2
 8002b0a:	8019      	strh	r1, [r3, #0]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	0c12      	lsrs	r2, r2, #16
 8002b10:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8002b12:	2202      	movs	r2, #2
 8002b14:	2114      	movs	r1, #20
 8002b16:	2010      	movs	r0, #16
 8002b18:	f000 f9b0 	bl	8002e7c <read_multiple_icm20948_reg>
 8002b1c:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b26:	3201      	adds	r2, #1
 8002b28:	7812      	ldrb	r2, [r2, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b30:	3301      	adds	r3, #1
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	2117      	movs	r1, #23
 8002b40:	2010      	movs	r0, #16
 8002b42:	f000 f99b 	bl	8002e7c <read_multiple_icm20948_reg>
 8002b46:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8002b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b50:	3201      	adds	r2, #1
 8002b52:	7812      	ldrb	r2, [r2, #0]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 8002b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8002b66:	2202      	movs	r2, #2
 8002b68:	211a      	movs	r1, #26
 8002b6a:	2010      	movs	r0, #16
 8002b6c:	f000 f986 	bl	8002e7c <read_multiple_icm20948_reg>
 8002b70:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7a:	3201      	adds	r2, #1
 8002b7c:	7812      	ldrb	r2, [r2, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	3301      	adds	r3, #1
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da00      	bge.n	8002b9a <icm20948_accel_calibration+0x15e>
 8002b98:	3307      	adds	r3, #7
 8002b9a:	10db      	asrs	r3, r3, #3
 8002b9c:	425b      	negs	r3, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	da00      	bge.n	8002bac <icm20948_accel_calibration+0x170>
 8002baa:	3307      	adds	r3, #7
 8002bac:	10db      	asrs	r3, r3, #3
 8002bae:	425b      	negs	r3, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	da00      	bge.n	8002bbe <icm20948_accel_calibration+0x182>
 8002bbc:	3307      	adds	r3, #7
 8002bbe:	10db      	asrs	r3, r3, #3
 8002bc0:	425b      	negs	r3, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	121b      	asrs	r3, r3, #8
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8002bda:	797a      	ldrb	r2, [r7, #5]
 8002bdc:	783b      	ldrb	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	121b      	asrs	r3, r3, #8
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8002bf8:	79fa      	ldrb	r2, [r7, #7]
 8002bfa:	787b      	ldrb	r3, [r7, #1]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	121b      	asrs	r3, r3, #8
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8002c16:	7a7a      	ldrb	r2, [r7, #9]
 8002c18:	78bb      	ldrb	r3, [r7, #2]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8002c20:	1d3a      	adds	r2, r7, #4
 8002c22:	2302      	movs	r3, #2
 8002c24:	2114      	movs	r1, #20
 8002c26:	2010      	movs	r0, #16
 8002c28:	f000 f958 	bl	8002edc <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	1c9a      	adds	r2, r3, #2
 8002c30:	2302      	movs	r3, #2
 8002c32:	2117      	movs	r1, #23
 8002c34:	2010      	movs	r0, #16
 8002c36:	f000 f951 	bl	8002edc <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	1d1a      	adds	r2, r3, #4
 8002c3e:	2302      	movs	r3, #2
 8002c40:	211a      	movs	r1, #26
 8002c42:	2010      	movs	r0, #16
 8002c44:	f000 f94a 	bl	8002edc <write_multiple_icm20948_reg>
}
 8002c48:	bf00      	nop
 8002c4a:	3740      	adds	r7, #64	; 0x40
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	51eb851f 	.word	0x51eb851f
 8002c54:	0800d910 	.word	0x0800d910

08002c58 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8002c62:	2101      	movs	r1, #1
 8002c64:	2020      	movs	r0, #32
 8002c66:	f000 f8b9 	bl	8002ddc <read_single_icm20948_reg>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d827      	bhi.n	8002cc4 <icm20948_gyro_full_scale_select+0x6c>
 8002c74:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <icm20948_gyro_full_scale_select+0x24>)
 8002c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002c8d 	.word	0x08002c8d
 8002c80:	08002c95 	.word	0x08002c95
 8002c84:	08002ca5 	.word	0x08002ca5
 8002c88:	08002cb5 	.word	0x08002cb5
	{
		case _250dps :	// alternativ 0
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <icm20948_gyro_full_scale_select+0x80>)
 8002c8e:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <icm20948_gyro_full_scale_select+0x84>)
 8002c90:	601a      	str	r2, [r3, #0]
			break;
 8002c92:	e017      	b.n	8002cc4 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :	// alternativ 1
			new_val |= 0x02;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	f043 0302 	orr.w	r3, r3, #2
 8002c9a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <icm20948_gyro_full_scale_select+0x80>)
 8002c9e:	4a10      	ldr	r2, [pc, #64]	; (8002ce0 <icm20948_gyro_full_scale_select+0x88>)
 8002ca0:	601a      	str	r2, [r3, #0]
			break;
 8002ca2:	e00f      	b.n	8002cc4 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :	// alternativ 2
			new_val |= 0x04;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	f043 0304 	orr.w	r3, r3, #4
 8002caa:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <icm20948_gyro_full_scale_select+0x80>)
 8002cae:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <icm20948_gyro_full_scale_select+0x8c>)
 8002cb0:	601a      	str	r2, [r3, #0]
			break;
 8002cb2:	e007      	b.n	8002cc4 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :	// alternativ 3
			new_val |= 0x06;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	f043 0306 	orr.w	r3, r3, #6
 8002cba:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <icm20948_gyro_full_scale_select+0x80>)
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <icm20948_gyro_full_scale_select+0x90>)
 8002cc0:	601a      	str	r2, [r3, #0]
			break;
 8002cc2:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2101      	movs	r1, #1
 8002cca:	2020      	movs	r0, #32
 8002ccc:	f000 f8b2 	bl	8002e34 <write_single_icm20948_reg>
}
 8002cd0:	bf00      	nop
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000214 	.word	0x20000214
 8002cdc:	43030000 	.word	0x43030000
 8002ce0:	42830000 	.word	0x42830000
 8002ce4:	42033333 	.word	0x42033333
 8002ce8:	41833333 	.word	0x41833333

08002cec <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002cf6:	2114      	movs	r1, #20
 8002cf8:	2020      	movs	r0, #32
 8002cfa:	f000 f86f 	bl	8002ddc <read_single_icm20948_reg>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d82b      	bhi.n	8002d60 <icm20948_accel_full_scale_select+0x74>
 8002d08:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <icm20948_accel_full_scale_select+0x24>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d21 	.word	0x08002d21
 8002d14:	08002d2b 	.word	0x08002d2b
 8002d18:	08002d3d 	.word	0x08002d3d
 8002d1c:	08002d4f 	.word	0x08002d4f
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <icm20948_accel_full_scale_select+0x88>)
 8002d22:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8002d26:	601a      	str	r2, [r3, #0]
			break;
 8002d28:	e01a      	b.n	8002d60 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <icm20948_accel_full_scale_select+0x88>)
 8002d34:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002d38:	601a      	str	r2, [r3, #0]
			break;
 8002d3a:	e011      	b.n	8002d60 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <icm20948_accel_full_scale_select+0x88>)
 8002d46:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002d4a:	601a      	str	r2, [r3, #0]
			break;
 8002d4c:	e008      	b.n	8002d60 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	f043 0306 	orr.w	r3, r3, #6
 8002d54:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <icm20948_accel_full_scale_select+0x88>)
 8002d58:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002d5c:	601a      	str	r2, [r3, #0]
			break;
 8002d5e:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	461a      	mov	r2, r3
 8002d64:	2114      	movs	r1, #20
 8002d66:	2020      	movs	r0, #32
 8002d68:	f000 f864 	bl	8002e34 <write_single_icm20948_reg>
}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000218 	.word	0x20000218

08002d78 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	2110      	movs	r1, #16
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <cs_high+0x14>)
 8002d82:	f002 f981 	bl	8005088 <HAL_GPIO_WritePin>
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40020000 	.word	0x40020000

08002d90 <cs_low>:

static void cs_low()
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8002d94:	2200      	movs	r2, #0
 8002d96:	2110      	movs	r1, #16
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <cs_low+0x14>)
 8002d9a:	f002 f975 	bl	8005088 <HAL_GPIO_WritePin>
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40020000 	.word	0x40020000

08002da8 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8002db2:	237f      	movs	r3, #127	; 0x7f
 8002db4:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	737b      	strb	r3, [r7, #13]

	cs_low();
 8002dba:	f7ff ffe9 	bl	8002d90 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8002dbe:	f107 010c 	add.w	r1, r7, #12
 8002dc2:	230a      	movs	r3, #10
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <select_user_bank+0x30>)
 8002dc8:	f005 f8bf 	bl	8007f4a <HAL_SPI_Transmit>
	cs_high();
 8002dcc:	f7ff ffd4 	bl	8002d78 <cs_high>
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	200006a4 	.word	0x200006a4

08002ddc <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	460a      	mov	r2, r1
 8002de6:	71fb      	strb	r3, [r7, #7]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8002dec:	79bb      	ldrb	r3, [r7, #6]
 8002dee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ffd5 	bl	8002da8 <select_user_bank>

	cs_low();
 8002dfe:	f7ff ffc7 	bl	8002d90 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002e02:	f107 010f 	add.w	r1, r7, #15
 8002e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4808      	ldr	r0, [pc, #32]	; (8002e30 <read_single_icm20948_reg+0x54>)
 8002e0e:	f005 f89c 	bl	8007f4a <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8002e12:	f107 010e 	add.w	r1, r7, #14
 8002e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <read_single_icm20948_reg+0x54>)
 8002e1e:	f005 f9d0 	bl	80081c2 <HAL_SPI_Receive>
	cs_high();
 8002e22:	f7ff ffa9 	bl	8002d78 <cs_high>

	return reg_val;
 8002e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200006a4 	.word	0x200006a4

08002e34 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	71bb      	strb	r3, [r7, #6]
 8002e42:	4613      	mov	r3, r2
 8002e44:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8002e46:	79bb      	ldrb	r3, [r7, #6]
 8002e48:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8002e4a:	797b      	ldrb	r3, [r7, #5]
 8002e4c:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ffa9 	bl	8002da8 <select_user_bank>

	cs_low();
 8002e56:	f7ff ff9b 	bl	8002d90 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8002e5a:	f107 010c 	add.w	r1, r7, #12
 8002e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e62:	2202      	movs	r2, #2
 8002e64:	4804      	ldr	r0, [pc, #16]	; (8002e78 <write_single_icm20948_reg+0x44>)
 8002e66:	f005 f870 	bl	8007f4a <HAL_SPI_Transmit>
	cs_high();
 8002e6a:	f7ff ff85 	bl	8002d78 <cs_high>
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200006a4 	.word	0x200006a4

08002e7c <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
 8002e86:	460b      	mov	r3, r1
 8002e88:	71bb      	strb	r3, [r7, #6]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 8002e8e:	79bb      	ldrb	r3, [r7, #6]
 8002e90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff84 	bl	8002da8 <select_user_bank>

	cs_low();
 8002ea0:	f7ff ff76 	bl	8002d90 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002ea4:	f107 010f 	add.w	r1, r7, #15
 8002ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eac:	2201      	movs	r2, #1
 8002eae:	4809      	ldr	r0, [pc, #36]	; (8002ed4 <read_multiple_icm20948_reg+0x58>)
 8002eb0:	f005 f84b 	bl	8007f4a <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8002eb4:	797b      	ldrb	r3, [r7, #5]
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ebc:	4906      	ldr	r1, [pc, #24]	; (8002ed8 <read_multiple_icm20948_reg+0x5c>)
 8002ebe:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <read_multiple_icm20948_reg+0x58>)
 8002ec0:	f005 f97f 	bl	80081c2 <HAL_SPI_Receive>
	cs_high();
 8002ec4:	f7ff ff58 	bl	8002d78 <cs_high>

	return reg_val;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <read_multiple_icm20948_reg+0x5c>)
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200006a4 	.word	0x200006a4
 8002ed8:	2000021c 	.word	0x2000021c

08002edc <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	603a      	str	r2, [r7, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
 8002eea:	460b      	mov	r3, r1
 8002eec:	71bb      	strb	r3, [r7, #6]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 8002ef2:	79bb      	ldrb	r3, [r7, #6]
 8002ef4:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff55 	bl	8002da8 <select_user_bank>

	cs_low();
 8002efe:	f7ff ff47 	bl	8002d90 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8002f02:	f107 010f 	add.w	r1, r7, #15
 8002f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4808      	ldr	r0, [pc, #32]	; (8002f30 <write_multiple_icm20948_reg+0x54>)
 8002f0e:	f005 f81c 	bl	8007f4a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8002f12:	797b      	ldrb	r3, [r7, #5]
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f1a:	6839      	ldr	r1, [r7, #0]
 8002f1c:	4804      	ldr	r0, [pc, #16]	; (8002f30 <write_multiple_icm20948_reg+0x54>)
 8002f1e:	f005 f814 	bl	8007f4a <HAL_SPI_Transmit>
	cs_high();
 8002f22:	f7ff ff29 	bl	8002d78 <cs_high>
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200006a4 	.word	0x200006a4

08002f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

//	Initialisering av buffer for dataoverføring over USB
//------------------------------------------------------------
  init_usbbuf();
 8002f38:	f7fe fa9a 	bl	8001470 <init_usbbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f3c:	f000 fee6 	bl	8003d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f40:	f000 f890 	bl	8003064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f44:	f7ff f9e0 	bl	8002308 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002f48:	f7fe f936 	bl	80011b8 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 8002f4c:	f008 fcf6 	bl	800b93c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002f50:	f000 f940 	bl	80031d4 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002f54:	f7ff fa6e 	bl	8002434 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

// Initialiserer tickstart for sending og trykk
  tickstart = HAL_GetTick();
 8002f58:	f000 ff3e 	bl	8003dd8 <HAL_GetTick>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4a36      	ldr	r2, [pc, #216]	; (8003038 <main+0x104>)
 8002f60:	6013      	str	r3, [r2, #0]
  trykktick = HAL_GetTick();
 8002f62:	f000 ff39 	bl	8003dd8 <HAL_GetTick>
 8002f66:	4603      	mov	r3, r0
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <main+0x108>)
 8002f6c:	701a      	strb	r2, [r3, #0]

//initialiser 9DOF
//------------------------------------------------------------
  icm20948_init();
 8002f6e:	f7ff fad7 	bl	8002520 <icm20948_init>

//	Oppstart av CAN
//------------------------------------------------------------
  oppstartCAN(3, &hcan1);
 8002f72:	4933      	ldr	r1, [pc, #204]	; (8003040 <main+0x10c>)
 8002f74:	2003      	movs	r0, #3
 8002f76:	f7fe fa11 	bl	800139c <oppstartCAN>
//------------------------------------------------------------

// Initialiserer trykksensoren.
//------------------------------------------------------------
  TRYKKSENSOR_Initialiser( &trykksensor, &hi2c1 );
 8002f7a:	4932      	ldr	r1, [pc, #200]	; (8003044 <main+0x110>)
 8002f7c:	4832      	ldr	r0, [pc, #200]	; (8003048 <main+0x114>)
 8002f7e:	f000 fa93 	bl	80034a8 <TRYKKSENSOR_Initialiser>
  TRYKKSENSOR_LesKalibrering( &trykksensor );
 8002f82:	4831      	ldr	r0, [pc, #196]	; (8003048 <main+0x114>)
 8002f84:	f000 fad2 	bl	800352c <TRYKKSENSOR_LesKalibrering>
	  //------------------------------------------------------------
	  //------------------------------------------------------------
	  //-----Er det sendt melding om å starte dataoverføring?-------
	  //------------------------------------------------------------

	  if(startdata == 0){
 8002f88:	4b30      	ldr	r3, [pc, #192]	; (800304c <main+0x118>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10c      	bne.n	8002faa <main+0x76>
		  HAL_GPIO_WritePin(GPIOC, STATLED_Pin, 1);
 8002f90:	2201      	movs	r2, #1
 8002f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f96:	482e      	ldr	r0, [pc, #184]	; (8003050 <main+0x11c>)
 8002f98:	f002 f876 	bl	8005088 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, DATALED_Pin, 0);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fa2:	482b      	ldr	r0, [pc, #172]	; (8003050 <main+0x11c>)
 8002fa4:	f002 f870 	bl	8005088 <HAL_GPIO_WritePin>
 8002fa8:	e7ee      	b.n	8002f88 <main+0x54>
//		  imuinit = 0;
//		  forstemaaling = 0;

	  }

	  else if(startdata == 1){
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <main+0x118>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d1ea      	bne.n	8002f88 <main+0x54>
		  //------------------------------------------------------------
		  //------------------------------------------------------------
		  //------------------------------------------------------------

		  // Non-blocking delayfunksjon
		  if((HAL_GetTick()-tickstart) >= 50){
 8002fb2:	f000 ff11 	bl	8003dd8 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <main+0x104>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b31      	cmp	r3, #49	; 0x31
 8002fc0:	d9e2      	bls.n	8002f88 <main+0x54>

		  //------------------------------------------------------------
		  //----------------------Sensordatabehandling------------------
		  //----------------------og overføring til ROV-----------------
	      //------------------------------------------------------------
			  if(kalibrer){
 8002fc2:	4b24      	ldr	r3, [pc, #144]	; (8003054 <main+0x120>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <main+0xac>
				  P0 = TRYKKSENSOR_LesTrykk(&trykksensor);
 8002fca:	481f      	ldr	r0, [pc, #124]	; (8003048 <main+0x114>)
 8002fcc:	f000 fb90 	bl	80036f0 <TRYKKSENSOR_LesTrykk>
 8002fd0:	eef0 7a40 	vmov.f32	s15, s0
 8002fd4:	4b20      	ldr	r3, [pc, #128]	; (8003058 <main+0x124>)
 8002fd6:	edc3 7a00 	vstr	s15, [r3]
				  kalibrer = 0;
 8002fda:	4b1e      	ldr	r3, [pc, #120]	; (8003054 <main+0x120>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
			  }
			  // Leser av data fra gyroskop og akselerometer med skalert funksjon
			  les_og_beregne_vinkler(CAN);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7fe fc09 	bl	80017f8 <les_og_beregne_vinkler>

			  // Leser av data fra temperatursensor
			  les_og_behandle_temp(CAN);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fe fac6 	bl	8001578 <les_og_behandle_temp>

			  // Leser av trykk og gjør om til dybde
			  P = TRYKKSENSOR_LesTrykk(&trykksensor);
 8002fec:	4816      	ldr	r0, [pc, #88]	; (8003048 <main+0x114>)
 8002fee:	f000 fb7f 	bl	80036f0 <TRYKKSENSOR_LesTrykk>
 8002ff2:	eef0 7a40 	vmov.f32	s15, s0
 8002ff6:	4b19      	ldr	r3, [pc, #100]	; (800305c <main+0x128>)
 8002ff8:	edc3 7a00 	vstr	s15, [r3]
			  c_hiv = dybdeutregning(P0, P, FERSKVANN);
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <main+0x124>)
 8002ffe:	edd3 7a00 	vldr	s15, [r3]
 8003002:	4b16      	ldr	r3, [pc, #88]	; (800305c <main+0x128>)
 8003004:	ed93 7a00 	vldr	s14, [r3]
 8003008:	2001      	movs	r0, #1
 800300a:	eef0 0a47 	vmov.f32	s1, s14
 800300e:	eeb0 0a67 	vmov.f32	s0, s15
 8003012:	f7fe fba1 	bl	8001758 <dybdeutregning>
 8003016:	4603      	mov	r3, r0
 8003018:	b21a      	sxth	r2, r3
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <main+0x12c>)
 800301c:	801a      	strh	r2, [r3, #0]

			  // Se etter lekkasje
			  sjekklekkasje();
 800301e:	f7fe f951 	bl	80012c4 <sjekklekkasje>

			  //----------------------
			  // Sender data over CAN
			  //----------------------

			  lag_datapakker_CAN();
 8003022:	f7ff f8fb 	bl	800221c <lag_datapakker_CAN>

			  senddatapakkerCAN();
 8003026:	f7ff f943 	bl	80022b0 <senddatapakkerCAN>

			  // resett timer
			  tickstart = HAL_GetTick();
 800302a:	f000 fed5 	bl	8003dd8 <HAL_GetTick>
 800302e:	4603      	mov	r3, r0
 8003030:	4a01      	ldr	r2, [pc, #4]	; (8003038 <main+0x104>)
 8003032:	6013      	str	r3, [r2, #0]
	  if(startdata == 0){
 8003034:	e7a8      	b.n	8002f88 <main+0x54>
 8003036:	bf00      	nop
 8003038:	20000658 	.word	0x20000658
 800303c:	2000022c 	.word	0x2000022c
 8003040:	20000500 	.word	0x20000500
 8003044:	20000528 	.word	0x20000528
 8003048:	200005b8 	.word	0x200005b8
 800304c:	20000267 	.word	0x20000267
 8003050:	40020800 	.word	0x40020800
 8003054:	20000268 	.word	0x20000268
 8003058:	200002d8 	.word	0x200002d8
 800305c:	200002d4 	.word	0x200002d4
 8003060:	20000262 	.word	0x20000262

08003064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b094      	sub	sp, #80	; 0x50
 8003068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800306a:	f107 0320 	add.w	r3, r7, #32
 800306e:	2230      	movs	r2, #48	; 0x30
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f009 f99c 	bl	800c3b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003078:	f107 030c 	add.w	r3, r7, #12
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	2300      	movs	r3, #0
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	4b28      	ldr	r3, [pc, #160]	; (8003130 <SystemClock_Config+0xcc>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	4a27      	ldr	r2, [pc, #156]	; (8003130 <SystemClock_Config+0xcc>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003096:	6413      	str	r3, [r2, #64]	; 0x40
 8003098:	4b25      	ldr	r3, [pc, #148]	; (8003130 <SystemClock_Config+0xcc>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a4:	2300      	movs	r3, #0
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	4b22      	ldr	r3, [pc, #136]	; (8003134 <SystemClock_Config+0xd0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a21      	ldr	r2, [pc, #132]	; (8003134 <SystemClock_Config+0xd0>)
 80030ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <SystemClock_Config+0xd0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030c0:	2301      	movs	r3, #1
 80030c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ca:	2302      	movs	r3, #2
 80030cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030d4:	2308      	movs	r3, #8
 80030d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80030d8:	2390      	movs	r3, #144	; 0x90
 80030da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030dc:	2302      	movs	r3, #2
 80030de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80030e0:	2306      	movs	r3, #6
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030e4:	f107 0320 	add.w	r3, r7, #32
 80030e8:	4618      	mov	r0, r3
 80030ea:	f004 fa47 	bl	800757c <HAL_RCC_OscConfig>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80030f4:	f000 f868 	bl	80031c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030f8:	230f      	movs	r3, #15
 80030fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030fc:	2302      	movs	r3, #2
 80030fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003104:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800310a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800310e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	2104      	movs	r1, #4
 8003116:	4618      	mov	r0, r3
 8003118:	f004 fca8 	bl	8007a6c <HAL_RCC_ClockConfig>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003122:	f000 f851 	bl	80031c8 <Error_Handler>
  }
}
 8003126:	bf00      	nop
 8003128:	3750      	adds	r7, #80	; 0x50
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	40007000 	.word	0x40007000

08003138 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 4 */
	//
	// Interupt for CAN-Buss mottak av data
	//

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan11) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan11, CAN_RX_FIFO0, &rxHeader, canRX); //Receive CAN bus message to canRX buffer
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8003142:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8003144:	2100      	movs	r1, #0
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f001 f971 	bl	800442e <HAL_CAN_GetRxMessage>
    switch (rxHeader.StdId) {
 800314c:	4b17      	ldr	r3, [pc, #92]	; (80031ac <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b7f      	cmp	r3, #127	; 0x7f
 8003152:	d01a      	beq.n	800318a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8003154:	2b7f      	cmp	r3, #127	; 0x7f
 8003156:	d822      	bhi.n	800319e <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 8003158:	2b60      	cmp	r3, #96	; 0x60
 800315a:	d002      	beq.n	8003162 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 800315c:	2b7e      	cmp	r3, #126	; 0x7e
 800315e:	d010      	beq.n	8003182 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
        memcpy(csend, (uint8_t*) &"pong!\n", 6);
        sendDataCAN(190, &hcan1);
        break;

    }
}
 8003160:	e01d      	b.n	800319e <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
        HAL_GPIO_WritePin(GPIOC, STATLED_Pin, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003168:	4811      	ldr	r0, [pc, #68]	; (80031b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800316a:	f001 ff8d 	bl	8005088 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, DATALED_Pin, 1);
 800316e:	2201      	movs	r2, #1
 8003170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003174:	480e      	ldr	r0, [pc, #56]	; (80031b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8003176:	f001 ff87 	bl	8005088 <HAL_GPIO_WritePin>
        startdata = 1;
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
        break;
 8003180:	e00d      	b.n	800319e <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
		kalibrer = 1;
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
		break;
 8003188:	e009      	b.n	800319e <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
        memcpy(csend, (uint8_t*) &"pong!\n", 6);
 800318a:	2206      	movs	r2, #6
 800318c:	490b      	ldr	r1, [pc, #44]	; (80031bc <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800318e:	480c      	ldr	r0, [pc, #48]	; (80031c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8003190:	f009 f900 	bl	800c394 <memcpy>
        sendDataCAN(190, &hcan1);
 8003194:	490b      	ldr	r1, [pc, #44]	; (80031c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8003196:	20be      	movs	r0, #190	; 0xbe
 8003198:	f7fe f950 	bl	800143c <sendDataCAN>
        break;
 800319c:	bf00      	nop
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000224 	.word	0x20000224
 80031ac:	20000598 	.word	0x20000598
 80031b0:	40020800 	.word	0x40020800
 80031b4:	20000267 	.word	0x20000267
 80031b8:	20000268 	.word	0x20000268
 80031bc:	0800d914 	.word	0x0800d914
 80031c0:	20000000 	.word	0x20000000
 80031c4:	20000500 	.word	0x20000500

080031c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031cc:	b672      	cpsid	i
}
 80031ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031d0:	e7fe      	b.n	80031d0 <Error_Handler+0x8>
	...

080031d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80031d8:	4b17      	ldr	r3, [pc, #92]	; (8003238 <MX_SPI1_Init+0x64>)
 80031da:	4a18      	ldr	r2, [pc, #96]	; (800323c <MX_SPI1_Init+0x68>)
 80031dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <MX_SPI1_Init+0x64>)
 80031e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <MX_SPI1_Init+0x64>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <MX_SPI1_Init+0x64>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <MX_SPI1_Init+0x64>)
 80031f4:	2202      	movs	r2, #2
 80031f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <MX_SPI1_Init+0x64>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <MX_SPI1_Init+0x64>)
 8003200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003204:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <MX_SPI1_Init+0x64>)
 8003208:	2218      	movs	r2, #24
 800320a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <MX_SPI1_Init+0x64>)
 800320e:	2200      	movs	r2, #0
 8003210:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <MX_SPI1_Init+0x64>)
 8003214:	2200      	movs	r2, #0
 8003216:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003218:	4b07      	ldr	r3, [pc, #28]	; (8003238 <MX_SPI1_Init+0x64>)
 800321a:	2200      	movs	r2, #0
 800321c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <MX_SPI1_Init+0x64>)
 8003220:	220a      	movs	r2, #10
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003224:	4804      	ldr	r0, [pc, #16]	; (8003238 <MX_SPI1_Init+0x64>)
 8003226:	f004 fe07 	bl	8007e38 <HAL_SPI_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003230:	f7ff ffca 	bl	80031c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003234:	bf00      	nop
 8003236:	bd80      	pop	{r7, pc}
 8003238:	200006a4 	.word	0x200006a4
 800323c:	40013000 	.word	0x40013000

08003240 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <HAL_SPI_MspInit+0x84>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d12b      	bne.n	80032ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_SPI_MspInit+0x88>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	4a17      	ldr	r2, [pc, #92]	; (80032c8 <HAL_SPI_MspInit+0x88>)
 800326c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003270:	6453      	str	r3, [r2, #68]	; 0x44
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_SPI_MspInit+0x88>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_SPI_MspInit+0x88>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <HAL_SPI_MspInit+0x88>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <HAL_SPI_MspInit+0x88>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800329a:	23e0      	movs	r3, #224	; 0xe0
 800329c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329e:	2302      	movs	r3, #2
 80032a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a6:	2303      	movs	r3, #3
 80032a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032aa:	2305      	movs	r3, #5
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ae:	f107 0314 	add.w	r3, r7, #20
 80032b2:	4619      	mov	r1, r3
 80032b4:	4805      	ldr	r0, [pc, #20]	; (80032cc <HAL_SPI_MspInit+0x8c>)
 80032b6:	f001 fd33 	bl	8004d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80032ba:	bf00      	nop
 80032bc:	3728      	adds	r7, #40	; 0x28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40013000 	.word	0x40013000
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020000 	.word	0x40020000

080032d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_MspInit+0x4c>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	4a0f      	ldr	r2, [pc, #60]	; (800331c <HAL_MspInit+0x4c>)
 80032e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e4:	6453      	str	r3, [r2, #68]	; 0x44
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_MspInit+0x4c>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_MspInit+0x4c>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a08      	ldr	r2, [pc, #32]	; (800331c <HAL_MspInit+0x4c>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_MspInit+0x4c>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800

08003320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003324:	e7fe      	b.n	8003324 <NMI_Handler+0x4>

08003326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003326:	b480      	push	{r7}
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800332a:	e7fe      	b.n	800332a <HardFault_Handler+0x4>

0800332c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003330:	e7fe      	b.n	8003330 <MemManage_Handler+0x4>

08003332 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003336:	e7fe      	b.n	8003336 <BusFault_Handler+0x4>

08003338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800333c:	e7fe      	b.n	800333c <UsageFault_Handler+0x4>

0800333e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800336c:	f000 fd20 	bl	8003db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}

08003374 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003378:	4802      	ldr	r0, [pc, #8]	; (8003384 <CAN1_RX0_IRQHandler+0x10>)
 800337a:	f001 f990 	bl	800469e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000500 	.word	0x20000500

08003388 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800338c:	4802      	ldr	r0, [pc, #8]	; (8003398 <OTG_FS_IRQHandler+0x10>)
 800338e:	f003 f8c2 	bl	8006516 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20001bd0 	.word	0x20001bd0

0800339c <TEMP_sjekk>:
 * Input:			Enhetsadresse, verdi til å indikere feil
 * Output:			Status på enhet
 * Return: 			temp_status [TEMP_FEIL, TEMP_SUKSESS]
 **********************************************************/

temp_status TEMP_sjekk(I2C_HandleTypeDef *handle, uint8_t Enhetslesing, uint8_t *feil){
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	460b      	mov	r3, r1
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	72fb      	strb	r3, [r7, #11]

	uint8_t stat;
	stat = HAL_I2C_IsDeviceReady(handle, Enhetslesing, 10, 1000);
 80033aa:	7afb      	ldrb	r3, [r7, #11]
 80033ac:	b299      	uxth	r1, r3
 80033ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b2:	220a      	movs	r2, #10
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f002 fae9 	bl	800598c <HAL_I2C_IsDeviceReady>
 80033ba:	4603      	mov	r3, r0
 80033bc:	75fb      	strb	r3, [r7, #23]
	if(HAL_OK != stat){
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d004      	beq.n	80033ce <TEMP_sjekk+0x32>
		*feil = 1;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
		return TEMP_FEIL;}
 80033ca:	2300      	movs	r3, #0
 80033cc:	e003      	b.n	80033d6 <TEMP_sjekk+0x3a>
	*feil = 0;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
	return TEMP_SUKSESS;
 80033d4:	2301      	movs	r3, #1
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <TEMP_les>:
 * Input:			Peker til uint16_t, hvilken enhet som leses av
 * Output:			Status på enhet
 * Return: 			temp_status [TEMP_FEIL, TEMP_SUKSESS]
 **********************************************************/

temp_status TEMP_les(I2C_HandleTypeDef *handle, uint8_t Enhetavlesning, float *temp_f){
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af04      	add	r7, sp, #16
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	460b      	mov	r3, r1
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	72fb      	strb	r3, [r7, #11]

	uint8_t stat;
	uint8_t temp_v[2];
	stat = HAL_I2C_Mem_Read(handle, Enhetavlesning, KOMMANDO_TEMP, 1, temp_v, 2, 1000);
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	b299      	uxth	r1, r3
 80033f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033f6:	9302      	str	r3, [sp, #8]
 80033f8:	2302      	movs	r3, #2
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	2301      	movs	r3, #1
 8003404:	2200      	movs	r2, #0
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f002 f89a 	bl	8005540 <HAL_I2C_Mem_Read>
 800340c:	4603      	mov	r3, r0
 800340e:	75fb      	strb	r3, [r7, #23]

	if(HAL_OK != stat){return TEMP_FEIL;}
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <TEMP_les+0x3a>
 8003416:	2300      	movs	r3, #0
 8003418:	e02d      	b.n	8003476 <TEMP_les+0x96>

	if(((temp_v[0]<<8|temp_v[1]) & 0x8000) >> 15)
 800341a:	7d3b      	ldrb	r3, [r7, #20]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	7d7a      	ldrb	r2, [r7, #21]
 8003420:	4313      	orrs	r3, r2
 8003422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00f      	beq.n	800344a <TEMP_les+0x6a>
		*temp_f = -(0x8000 - (0x7fff & (temp_v[0]<<8|temp_v[1])));
 800342a:	7d3b      	ldrb	r3, [r7, #20]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	7d7a      	ldrb	r2, [r7, #21]
 8003430:	4313      	orrs	r3, r2
 8003432:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003436:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	edc3 7a00 	vstr	s15, [r3]
 8003448:	e014      	b.n	8003474 <TEMP_les+0x94>
	else
		*temp_f = (temp_v[0]<<8|temp_v[1]) / 256.0;
 800344a:	7d3b      	ldrb	r3, [r7, #20]
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	7d7a      	ldrb	r2, [r7, #21]
 8003450:	4313      	orrs	r3, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd f80a 	bl	800046c <__aeabi_i2d>
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <TEMP_les+0xa0>)
 800345e:	f7fd f999 	bl	8000794 <__aeabi_ddiv>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f7fd fb41 	bl	8000af0 <__aeabi_d2f>
 800346e:	4602      	mov	r2, r0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]

	return TEMP_SUKSESS;
 8003474:	2301      	movs	r3, #1
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40700000 	.word	0x40700000

08003484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <SystemInit+0x20>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	4a05      	ldr	r2, [pc, #20]	; (80034a4 <SystemInit+0x20>)
 8003490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003498:	bf00      	nop
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <TRYKKSENSOR_Initialiser>:
#include "math.h"
#include "trykk.h"
#include "extern_variabler.h"

// INITIALISATION
void TRYKKSENSOR_Initialiser(TRYKKSENSOR *dev, I2C_HandleTypeDef *i2cHandle){
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]

//	// Resett sensor ved oppstart


	// Sett struct parametre
	dev->i2cHandle	= i2cHandle;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	601a      	str	r2, [r3, #0]

	dev->temp_f 		= 0.0f;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
	dev->TEMPt			= 0;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
	dev->dT				= 0;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	61da      	str	r2, [r3, #28]
	dev->OFF			= 0;
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	dev->SENS			= 0;
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	dev->trykk_comp 	= 0;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
	dev->D1				= 0;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	60da      	str	r2, [r3, #12]
	dev->D2				= 0;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]

	dev->SENS_T1		= 0;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	861a      	strh	r2, [r3, #48]	; 0x30
	dev->OFF_T1			= 0;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	865a      	strh	r2, [r3, #50]	; 0x32
	dev->TCS			= 0;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	869a      	strh	r2, [r3, #52]	; 0x34
	dev->TCO			= 0;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	86da      	strh	r2, [r3, #54]	; 0x36
	dev->TREF			= 0;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	871a      	strh	r2, [r3, #56]	; 0x38
	dev->TEMPSENS		= 0;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	875a      	strh	r2, [r3, #58]	; 0x3a

}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <TRYKKSENSOR_LesKalibrering>:

// READ FACTORY CALIBRATION
trykk_status TRYKKSENSOR_LesKalibrering(TRYKKSENSOR *dev){
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	uint8_t TCO_buf[2];				// Temperature coefficient of pressure offset buffer
	uint8_t TREF_buf[2];			// Temperatur referanse buffer
	uint8_t TEMPSENS_buf[2];		// Temperatur sensitivitet buffer
	uint8_t reset_buf[1];

	reset_buf[0] = TRYKKSENSOR_RESET;
 8003534:	231e      	movs	r3, #30
 8003536:	733b      	strb	r3, [r7, #12]

	// Reset trykksensor

	stat = TRYKKSENSOR_SkrivRegister(dev, (uint8_t *)reset_buf);
 8003538:	f107 030c 	add.w	r3, r7, #12
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fb9e 	bl	8003c80 <TRYKKSENSOR_SkrivRegister>
 8003544:	4603      	mov	r3, r0
 8003546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(stat != TRYKK_SUKSESS){
 800354a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800354e:	2b01      	cmp	r3, #1
 8003550:	d005      	beq.n	800355e <TRYKKSENSOR_LesKalibrering+0x32>
		trykkfeil += 1;
 8003552:	4b66      	ldr	r3, [pc, #408]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4b64      	ldr	r3, [pc, #400]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 800355c:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(10);
 800355e:	200a      	movs	r0, #10
 8003560:	f000 fc46 	bl	8003df0 <HAL_Delay>

	// Les pressure sensitivity
	stat = TRYKKSENSOR_LesRegistrene( dev, TRYKKSENSOR_PROM_C1, (uint8_t *)SENS_T1_buf, 2 );
 8003564:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003568:	2302      	movs	r3, #2
 800356a:	21a2      	movs	r1, #162	; 0xa2
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fb61 	bl	8003c34 <TRYKKSENSOR_LesRegistrene>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(stat != TRYKK_SUKSESS){
 8003578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800357c:	2b01      	cmp	r3, #1
 800357e:	d005      	beq.n	800358c <TRYKKSENSOR_LesKalibrering+0x60>
		trykkfeil += 1;
 8003580:	4b5a      	ldr	r3, [pc, #360]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	3301      	adds	r3, #1
 8003586:	b2da      	uxtb	r2, r3
 8003588:	4b58      	ldr	r3, [pc, #352]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 800358a:	701a      	strb	r2, [r3, #0]
	}

	// Les pressure offset buffer
	stat = TRYKKSENSOR_LesRegistrene( dev, TRYKKSENSOR_PROM_C2, (uint8_t *)OFF_T1_buf, 2 );
 800358c:	f107 0220 	add.w	r2, r7, #32
 8003590:	2302      	movs	r3, #2
 8003592:	21a4      	movs	r1, #164	; 0xa4
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fb4d 	bl	8003c34 <TRYKKSENSOR_LesRegistrene>
 800359a:	4603      	mov	r3, r0
 800359c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(stat != TRYKK_SUKSESS){
 80035a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d005      	beq.n	80035b4 <TRYKKSENSOR_LesKalibrering+0x88>
		trykkfeil += 1;
 80035a8:	4b50      	ldr	r3, [pc, #320]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	4b4e      	ldr	r3, [pc, #312]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 80035b2:	701a      	strb	r2, [r3, #0]
	}

	// Les temperature coefficient of pressure sensitivity
	stat = TRYKKSENSOR_LesRegistrene( dev, TRYKKSENSOR_PROM_C3, (uint8_t *)TCS_buf, 2 );
 80035b4:	f107 021c 	add.w	r2, r7, #28
 80035b8:	2302      	movs	r3, #2
 80035ba:	21a6      	movs	r1, #166	; 0xa6
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fb39 	bl	8003c34 <TRYKKSENSOR_LesRegistrene>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(stat != TRYKK_SUKSESS){
 80035c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d005      	beq.n	80035dc <TRYKKSENSOR_LesKalibrering+0xb0>
		trykkfeil += 1;
 80035d0:	4b46      	ldr	r3, [pc, #280]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	4b44      	ldr	r3, [pc, #272]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 80035da:	701a      	strb	r2, [r3, #0]
	}

	// Les temperature coefficient of pressure offset
	stat = TRYKKSENSOR_LesRegistrene( dev, TRYKKSENSOR_PROM_C4, (uint8_t *)TCO_buf, 2 );
 80035dc:	f107 0218 	add.w	r2, r7, #24
 80035e0:	2302      	movs	r3, #2
 80035e2:	21a8      	movs	r1, #168	; 0xa8
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fb25 	bl	8003c34 <TRYKKSENSOR_LesRegistrene>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(stat != TRYKK_SUKSESS){
 80035f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d005      	beq.n	8003604 <TRYKKSENSOR_LesKalibrering+0xd8>
		trykkfeil += 1;
 80035f8:	4b3c      	ldr	r3, [pc, #240]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	3301      	adds	r3, #1
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	4b3a      	ldr	r3, [pc, #232]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 8003602:	701a      	strb	r2, [r3, #0]
	}

	// Les temperatur referanse
	stat = TRYKKSENSOR_LesRegistrene( dev, TRYKKSENSOR_PROM_C5, (uint8_t *)TREF_buf, 2 );
 8003604:	f107 0214 	add.w	r2, r7, #20
 8003608:	2302      	movs	r3, #2
 800360a:	21aa      	movs	r1, #170	; 0xaa
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb11 	bl	8003c34 <TRYKKSENSOR_LesRegistrene>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(stat != TRYKK_SUKSESS){
 8003618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800361c:	2b01      	cmp	r3, #1
 800361e:	d005      	beq.n	800362c <TRYKKSENSOR_LesKalibrering+0x100>
		trykkfeil += 1;
 8003620:	4b32      	ldr	r3, [pc, #200]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	b2da      	uxtb	r2, r3
 8003628:	4b30      	ldr	r3, [pc, #192]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 800362a:	701a      	strb	r2, [r3, #0]
	}

	// Les temperatur sensitivitet og legger denne ie TEMPSENSbuf
	stat = TRYKKSENSOR_LesRegistrene( dev, TRYKKSENSOR_PROM_C6, (uint8_t *)TEMPSENS_buf, 2 );
 800362c:	f107 0210 	add.w	r2, r7, #16
 8003630:	2302      	movs	r3, #2
 8003632:	21ac      	movs	r1, #172	; 0xac
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fafd 	bl	8003c34 <TRYKKSENSOR_LesRegistrene>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(stat != TRYKK_SUKSESS){
 8003640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003644:	2b01      	cmp	r3, #1
 8003646:	d005      	beq.n	8003654 <TRYKKSENSOR_LesKalibrering+0x128>
		trykkfeil += 1;
 8003648:	4b28      	ldr	r3, [pc, #160]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	3301      	adds	r3, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	4b26      	ldr	r3, [pc, #152]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 8003652:	701a      	strb	r2, [r3, #0]
	}

	// Samle leste verdier til 16-bits variabler.
	dev->SENS_T1 = (SENS_T1_buf[0]<<8|SENS_T1_buf[1]);
 8003654:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	b21a      	sxth	r2, r3
 800365c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003660:	b21b      	sxth	r3, r3
 8003662:	4313      	orrs	r3, r2
 8003664:	b21b      	sxth	r3, r3
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	861a      	strh	r2, [r3, #48]	; 0x30
	dev->OFF_T1 = (OFF_T1_buf[0]<<8|OFF_T1_buf[1]);
 800366c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	b21a      	sxth	r2, r3
 8003674:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003678:	b21b      	sxth	r3, r3
 800367a:	4313      	orrs	r3, r2
 800367c:	b21b      	sxth	r3, r3
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	865a      	strh	r2, [r3, #50]	; 0x32
	dev->TCS = (TCS_buf[0]<<8|TCS_buf[1]);
 8003684:	7f3b      	ldrb	r3, [r7, #28]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	b21a      	sxth	r2, r3
 800368a:	7f7b      	ldrb	r3, [r7, #29]
 800368c:	b21b      	sxth	r3, r3
 800368e:	4313      	orrs	r3, r2
 8003690:	b21b      	sxth	r3, r3
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	869a      	strh	r2, [r3, #52]	; 0x34
	dev->TCO = (TCO_buf[0]<<8|TCO_buf[1]);
 8003698:	7e3b      	ldrb	r3, [r7, #24]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	b21a      	sxth	r2, r3
 800369e:	7e7b      	ldrb	r3, [r7, #25]
 80036a0:	b21b      	sxth	r3, r3
 80036a2:	4313      	orrs	r3, r2
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	86da      	strh	r2, [r3, #54]	; 0x36
	dev->TREF = (TREF_buf[0]<<8|TREF_buf[1]);
 80036ac:	7d3b      	ldrb	r3, [r7, #20]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	b21a      	sxth	r2, r3
 80036b2:	7d7b      	ldrb	r3, [r7, #21]
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	4313      	orrs	r3, r2
 80036b8:	b21b      	sxth	r3, r3
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	871a      	strh	r2, [r3, #56]	; 0x38
	dev->TEMPSENS = (TEMPSENS_buf[0]<<8|TEMPSENS_buf[1]);
 80036c0:	7c3b      	ldrb	r3, [r7, #16]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	b21a      	sxth	r2, r3
 80036c6:	7c7b      	ldrb	r3, [r7, #17]
 80036c8:	b21b      	sxth	r3, r3
 80036ca:	4313      	orrs	r3, r2
 80036cc:	b21b      	sxth	r3, r3
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	875a      	strh	r2, [r3, #58]	; 0x3a

	if(trykkfeil > 0) return TRYKK_FEIL;
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <TRYKKSENSOR_LesKalibrering+0x1c0>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <TRYKKSENSOR_LesKalibrering+0x1b4>
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <TRYKKSENSOR_LesKalibrering+0x1b6>

	return TRYKK_SUKSESS;
 80036e0:	2301      	movs	r3, #1
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3728      	adds	r7, #40	; 0x28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200002d0 	.word	0x200002d0

080036f0 <TRYKKSENSOR_LesTrykk>:

// DATA ACQUISITION
float TRYKKSENSOR_LesTrykk(TRYKKSENSOR *dev){
 80036f0:	b5b0      	push	{r4, r5, r7, lr}
 80036f2:	b08c      	sub	sp, #48	; 0x30
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	uint8_t D1_buf[3];			// Digital pressure value buffer
	uint8_t trykkbuf[1];
	uint8_t tempbuf[1];
	float trykk_f;

	trykkbuf[0] = TRYKKSENSOR_D1_256;
 80036f8:	2340      	movs	r3, #64	; 0x40
 80036fa:	743b      	strb	r3, [r7, #16]
	tempbuf[0] = TRYKKSENSOR_D2_256;
 80036fc:	2350      	movs	r3, #80	; 0x50
 80036fe:	733b      	strb	r3, [r7, #12]
	float T2;
	float OFF2;
	float SENS2;


	dev->D2				= 0; // Digital Temperature value
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]
	dev->D1 			= 0; // Digital Pressure value
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	60da      	str	r2, [r3, #12]

	// Les Digital temperature value og legg det i D2buf

	stat = TRYKKSENSOR_SkrivRegister(dev, (uint8_t *)tempbuf);
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	4619      	mov	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fab4 	bl	8003c80 <TRYKKSENSOR_SkrivRegister>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(stat != TRYKK_SUKSESS){
 800371e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003722:	2b01      	cmp	r3, #1
 8003724:	d005      	beq.n	8003732 <TRYKKSENSOR_LesTrykk+0x42>
		trykkfeil += 1;
 8003726:	4bc8      	ldr	r3, [pc, #800]	; (8003a48 <TRYKKSENSOR_LesTrykk+0x358>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	3301      	adds	r3, #1
 800372c:	b2da      	uxtb	r2, r3
 800372e:	4bc6      	ldr	r3, [pc, #792]	; (8003a48 <TRYKKSENSOR_LesTrykk+0x358>)
 8003730:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(10);
 8003732:	200a      	movs	r0, #10
 8003734:	f000 fb5c 	bl	8003df0 <HAL_Delay>


	stat = TRYKKSENSOR_LesRegistrene( dev, TRYKKSENSOR_ADC_READ, (uint8_t *)D2_buf, 3 );
 8003738:	f107 0218 	add.w	r2, r7, #24
 800373c:	2303      	movs	r3, #3
 800373e:	2100      	movs	r1, #0
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fa77 	bl	8003c34 <TRYKKSENSOR_LesRegistrene>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(stat != TRYKK_SUKSESS){
 800374c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003750:	2b01      	cmp	r3, #1
 8003752:	d005      	beq.n	8003760 <TRYKKSENSOR_LesTrykk+0x70>
		trykkfeil += 1;
 8003754:	4bbc      	ldr	r3, [pc, #752]	; (8003a48 <TRYKKSENSOR_LesTrykk+0x358>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4bba      	ldr	r3, [pc, #744]	; (8003a48 <TRYKKSENSOR_LesTrykk+0x358>)
 800375e:	701a      	strb	r2, [r3, #0]
	}

	// Les Digital pressure value og legg det i D1buf
	stat = TRYKKSENSOR_SkrivRegister(dev, (uint8_t *)trykkbuf);
 8003760:	f107 0310 	add.w	r3, r7, #16
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa8a 	bl	8003c80 <TRYKKSENSOR_SkrivRegister>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(stat != TRYKK_SUKSESS){
 8003772:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003776:	2b01      	cmp	r3, #1
 8003778:	d005      	beq.n	8003786 <TRYKKSENSOR_LesTrykk+0x96>
		trykkfeil += 1;
 800377a:	4bb3      	ldr	r3, [pc, #716]	; (8003a48 <TRYKKSENSOR_LesTrykk+0x358>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	3301      	adds	r3, #1
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4bb1      	ldr	r3, [pc, #708]	; (8003a48 <TRYKKSENSOR_LesTrykk+0x358>)
 8003784:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(10);
 8003786:	200a      	movs	r0, #10
 8003788:	f000 fb32 	bl	8003df0 <HAL_Delay>

	stat = TRYKKSENSOR_LesRegistrene( dev, TRYKKSENSOR_ADC_READ, (uint8_t *)D1_buf, 3 );
 800378c:	f107 0214 	add.w	r2, r7, #20
 8003790:	2303      	movs	r3, #3
 8003792:	2100      	movs	r1, #0
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fa4d 	bl	8003c34 <TRYKKSENSOR_LesRegistrene>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(stat != TRYKK_SUKSESS){
 80037a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d005      	beq.n	80037b4 <TRYKKSENSOR_LesTrykk+0xc4>
		trykkfeil += 1;
 80037a8:	4ba7      	ldr	r3, [pc, #668]	; (8003a48 <TRYKKSENSOR_LesTrykk+0x358>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	4ba5      	ldr	r3, [pc, #660]	; (8003a48 <TRYKKSENSOR_LesTrykk+0x358>)
 80037b2:	701a      	strb	r2, [r3, #0]
	}

	// Samle leste verdier til 32-bits variabler.
	dev->D2 = ((D2_buf[0]<<16)|(D2_buf[1]<<8)|D2_buf[2]);
 80037b4:	7e3b      	ldrb	r3, [r7, #24]
 80037b6:	041a      	lsls	r2, r3, #16
 80037b8:	7e7b      	ldrb	r3, [r7, #25]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	4313      	orrs	r3, r2
 80037be:	7eba      	ldrb	r2, [r7, #26]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	461a      	mov	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	611a      	str	r2, [r3, #16]
	dev->D1 = (D1_buf[0]<<16|D1_buf[1]<<8|D1_buf[2]);
 80037c8:	7d3b      	ldrb	r3, [r7, #20]
 80037ca:	041a      	lsls	r2, r3, #16
 80037cc:	7d7b      	ldrb	r3, [r7, #21]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	4313      	orrs	r3, r2
 80037d2:	7dba      	ldrb	r2, [r7, #22]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	461a      	mov	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60da      	str	r2, [r3, #12]

	// Regn ut temperaturen
	dev->dT = dev->D2 - (dev->TREF *pow(2,8));				// Formel fra datablad.
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fc fe33 	bl	800044c <__aeabi_ui2d>
 80037e6:	4604      	mov	r4, r0
 80037e8:	460d      	mov	r5, r1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fc fe3c 	bl	800046c <__aeabi_i2d>
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	4b94      	ldr	r3, [pc, #592]	; (8003a4c <TRYKKSENSOR_LesTrykk+0x35c>)
 80037fa:	f7fc fea1 	bl	8000540 <__aeabi_dmul>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4620      	mov	r0, r4
 8003804:	4629      	mov	r1, r5
 8003806:	f7fc fce3 	bl	80001d0 <__aeabi_dsub>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4610      	mov	r0, r2
 8003810:	4619      	mov	r1, r3
 8003812:	f7fd f945 	bl	8000aa0 <__aeabi_d2iz>
 8003816:	4602      	mov	r2, r0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	61da      	str	r2, [r3, #28]
	dev->TEMPt = 2000 + (dev->dT*dev->TEMPSENS/pow(2,23));	// Formel fra datablad.
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	4618      	mov	r0, r3
 800382a:	f7fc fe1f 	bl	800046c <__aeabi_i2d>
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	4b87      	ldr	r3, [pc, #540]	; (8003a50 <TRYKKSENSOR_LesTrykk+0x360>)
 8003834:	f7fc ffae 	bl	8000794 <__aeabi_ddiv>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	4b83      	ldr	r3, [pc, #524]	; (8003a54 <TRYKKSENSOR_LesTrykk+0x364>)
 8003846:	f7fc fcc5 	bl	80001d4 <__adddf3>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	f7fd f925 	bl	8000aa0 <__aeabi_d2iz>
 8003856:	4602      	mov	r2, r0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	619a      	str	r2, [r3, #24]
	dev->temp_f = dev->TEMPt/100.0;							//
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fc fe03 	bl	800046c <__aeabi_i2d>
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	4b7b      	ldr	r3, [pc, #492]	; (8003a58 <TRYKKSENSOR_LesTrykk+0x368>)
 800386c:	f7fc ff92 	bl	8000794 <__aeabi_ddiv>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	f7fd f93a 	bl	8000af0 <__aeabi_d2f>
 800387c:	4602      	mov	r2, r0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	615a      	str	r2, [r3, #20]

	// Regn ut temperaturkompensert trykk
	dev->OFF = (dev->OFF_T1*pow(2,18)) + ((dev->TCO*dev->dT)/pow(2,5));		// Formel fra datablad
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003886:	4618      	mov	r0, r3
 8003888:	f7fc fdf0 	bl	800046c <__aeabi_i2d>
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	4b72      	ldr	r3, [pc, #456]	; (8003a5c <TRYKKSENSOR_LesTrykk+0x36c>)
 8003892:	f7fc fe55 	bl	8000540 <__aeabi_dmul>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4614      	mov	r4, r2
 800389c:	461d      	mov	r5, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a2:	461a      	mov	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	fb03 f302 	mul.w	r3, r3, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fddd 	bl	800046c <__aeabi_i2d>
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	4b6a      	ldr	r3, [pc, #424]	; (8003a60 <TRYKKSENSOR_LesTrykk+0x370>)
 80038b8:	f7fc ff6c 	bl	8000794 <__aeabi_ddiv>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4620      	mov	r0, r4
 80038c2:	4629      	mov	r1, r5
 80038c4:	f7fc fc86 	bl	80001d4 <__adddf3>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f7fd fa98 	bl	8000e04 <__aeabi_d2lz>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	e9c1 2308 	strd	r2, r3, [r1, #32]
	dev->SENS = (dev->SENS_T1*pow(2,17)) + (dev->TCS*dev->dT)/pow(2,7); 	// Formel fra datablad.
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fdc2 	bl	800046c <__aeabi_i2d>
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80038f0:	f7fc fe26 	bl	8000540 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4614      	mov	r4, r2
 80038fa:	461d      	mov	r5, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003900:	461a      	mov	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	fb03 f302 	mul.w	r3, r3, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f7fc fdae 	bl	800046c <__aeabi_i2d>
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <TRYKKSENSOR_LesTrykk+0x374>)
 8003916:	f7fc ff3d 	bl	8000794 <__aeabi_ddiv>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4620      	mov	r0, r4
 8003920:	4629      	mov	r1, r5
 8003922:	f7fc fc57 	bl	80001d4 <__adddf3>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	f7fd fa69 	bl	8000e04 <__aeabi_d2lz>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28



	// SECOND ORDER TEMPERATURE COMPENSATION FLOWCHART
	if(dev->TEMPt<2000){
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003944:	f280 80c2 	bge.w	8003acc <TRYKKSENSOR_LesTrykk+0x3dc>
		T2 = (float)(3*pow(dev->dT,2) / pow(2,33));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4618      	mov	r0, r3
 800394e:	f7fc fd8d 	bl	800046c <__aeabi_i2d>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8003a40 <TRYKKSENSOR_LesTrykk+0x350>
 800395a:	ec43 2b10 	vmov	d0, r2, r3
 800395e:	f008 fd73 	bl	800c448 <pow>
 8003962:	ec51 0b10 	vmov	r0, r1, d0
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <TRYKKSENSOR_LesTrykk+0x378>)
 800396c:	f7fc fde8 	bl	8000540 <__aeabi_dmul>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 8003980:	f7fc ff08 	bl	8000794 <__aeabi_ddiv>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4610      	mov	r0, r2
 800398a:	4619      	mov	r1, r3
 800398c:	f7fd f8b0 	bl	8000af0 <__aeabi_d2f>
 8003990:	4603      	mov	r3, r0
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
		OFF2 = (float)(3* pow((dev->TEMPt-2000),2) / pow(2,3));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800399c:	4618      	mov	r0, r3
 800399e:	f7fc fd65 	bl	800046c <__aeabi_i2d>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8003a40 <TRYKKSENSOR_LesTrykk+0x350>
 80039aa:	ec43 2b10 	vmov	d0, r2, r3
 80039ae:	f008 fd4b 	bl	800c448 <pow>
 80039b2:	ec51 0b10 	vmov	r0, r1, d0
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <TRYKKSENSOR_LesTrykk+0x378>)
 80039bc:	f7fc fdc0 	bl	8000540 <__aeabi_dmul>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <TRYKKSENSOR_LesTrykk+0x37c>)
 80039ce:	f7fc fee1 	bl	8000794 <__aeabi_ddiv>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	f7fd f889 	bl	8000af0 <__aeabi_d2f>
 80039de:	4603      	mov	r3, r0
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
		SENS2 = (float)(7*pow((dev->TEMPt-2000),2) / pow(2,3));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fc fd3e 	bl	800046c <__aeabi_i2d>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8003a40 <TRYKKSENSOR_LesTrykk+0x350>
 80039f8:	ec43 2b10 	vmov	d0, r2, r3
 80039fc:	f008 fd24 	bl	800c448 <pow>
 8003a00:	ec51 0b10 	vmov	r0, r1, d0
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <TRYKKSENSOR_LesTrykk+0x380>)
 8003a0a:	f7fc fd99 	bl	8000540 <__aeabi_dmul>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <TRYKKSENSOR_LesTrykk+0x37c>)
 8003a1c:	f7fc feba 	bl	8000794 <__aeabi_ddiv>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	f7fd f862 	bl	8000af0 <__aeabi_d2f>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24

		if(dev->TEMPt<(-1500)){
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	4a0f      	ldr	r2, [pc, #60]	; (8003a74 <TRYKKSENSOR_LesTrykk+0x384>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	da51      	bge.n	8003ade <TRYKKSENSOR_LesTrykk+0x3ee>
 8003a3a:	e01d      	b.n	8003a78 <TRYKKSENSOR_LesTrykk+0x388>
 8003a3c:	f3af 8000 	nop.w
 8003a40:	00000000 	.word	0x00000000
 8003a44:	40000000 	.word	0x40000000
 8003a48:	200002d0 	.word	0x200002d0
 8003a4c:	40700000 	.word	0x40700000
 8003a50:	41600000 	.word	0x41600000
 8003a54:	409f4000 	.word	0x409f4000
 8003a58:	40590000 	.word	0x40590000
 8003a5c:	41100000 	.word	0x41100000
 8003a60:	40400000 	.word	0x40400000
 8003a64:	40600000 	.word	0x40600000
 8003a68:	40080000 	.word	0x40080000
 8003a6c:	40200000 	.word	0x40200000
 8003a70:	401c0000 	.word	0x401c0000
 8003a74:	fffffa24 	.word	0xfffffa24
			SENS2 = (float)(SENS2 + 3*pow((dev->TEMPt+1500),2));
 8003a78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a7a:	f7fc fd09 	bl	8000490 <__aeabi_f2d>
 8003a7e:	4604      	mov	r4, r0
 8003a80:	460d      	mov	r5, r1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fcee 	bl	800046c <__aeabi_i2d>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8003c18 <TRYKKSENSOR_LesTrykk+0x528>
 8003a98:	ec43 2b10 	vmov	d0, r2, r3
 8003a9c:	f008 fcd4 	bl	800c448 <pow>
 8003aa0:	ec51 0b10 	vmov	r0, r1, d0
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	4b5d      	ldr	r3, [pc, #372]	; (8003c20 <TRYKKSENSOR_LesTrykk+0x530>)
 8003aaa:	f7fc fd49 	bl	8000540 <__aeabi_dmul>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	f7fc fb8d 	bl	80001d4 <__adddf3>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f7fd f815 	bl	8000af0 <__aeabi_d2f>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aca:	e008      	b.n	8003ade <TRYKKSENSOR_LesTrykk+0x3ee>
		}

	}
	else {
		T2 = 0;
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
		OFF2 = 0;
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
		SENS2 = 0;
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
	}

	dev->TEMPt = dev->TEMPt - T2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003af6:	ee17 2a90 	vmov	r2, s15
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	619a      	str	r2, [r3, #24]
	dev->OFF = dev->OFF-OFF2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	f7fd f912 	bl	8000d30 <__aeabi_l2f>
 8003b0c:	ee07 0a10 	vmov	s14, r0
 8003b10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b18:	ee17 0a90 	vmov	r0, s15
 8003b1c:	f7fd f95e 	bl	8000ddc <__aeabi_f2lz>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	e9c1 2308 	strd	r2, r3, [r1, #32]
	dev->SENS = dev->SENS-SENS2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	f7fd f8fc 	bl	8000d30 <__aeabi_l2f>
 8003b38:	ee07 0a10 	vmov	s14, r0
 8003b3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b44:	ee17 0a90 	vmov	r0, s15
 8003b48:	f7fd f948 	bl	8000ddc <__aeabi_f2lz>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	dev->trykk_comp = (int32_t)(((dev->D1*dev->SENS/pow(2,21)) - dev->OFF)/pow(2,15));	// Formel fra datablad.
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f04f 0100 	mov.w	r1, #0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003b66:	fb02 f501 	mul.w	r5, r2, r1
 8003b6a:	fb00 f403 	mul.w	r4, r0, r3
 8003b6e:	442c      	add	r4, r5
 8003b70:	fba0 2302 	umull	r2, r3, r0, r2
 8003b74:	18e1      	adds	r1, r4, r3
 8003b76:	460b      	mov	r3, r1
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f7fc fcb2 	bl	80004e4 <__aeabi_l2d>
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <TRYKKSENSOR_LesTrykk+0x534>)
 8003b86:	f7fc fe05 	bl	8000794 <__aeabi_ddiv>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4614      	mov	r4, r2
 8003b90:	461d      	mov	r5, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f7fc fca2 	bl	80004e4 <__aeabi_l2d>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	f7fc fb12 	bl	80001d0 <__aeabi_dsub>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <TRYKKSENSOR_LesTrykk+0x538>)
 8003bba:	f7fc fdeb 	bl	8000794 <__aeabi_ddiv>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f7fc ff6b 	bl	8000aa0 <__aeabi_d2iz>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	609a      	str	r2, [r3, #8]
	trykk_f = (float)(dev->trykk_comp/100.0);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fc fc49 	bl	800046c <__aeabi_i2d>
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <TRYKKSENSOR_LesTrykk+0x53c>)
 8003be0:	f7fc fdd8 	bl	8000794 <__aeabi_ddiv>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	f7fc ff80 	bl	8000af0 <__aeabi_d2f>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	61fb      	str	r3, [r7, #28]

	if(trykkfeil > 0) return TRYKK_FEIL;
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <TRYKKSENSOR_LesTrykk+0x540>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <TRYKKSENSOR_LesTrykk+0x512>
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e000      	b.n	8003c04 <TRYKKSENSOR_LesTrykk+0x514>

	return trykk_f;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	ee07 3a90 	vmov	s15, r3
}
 8003c08:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0c:	3730      	adds	r7, #48	; 0x30
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bdb0      	pop	{r4, r5, r7, pc}
 8003c12:	bf00      	nop
 8003c14:	f3af 8000 	nop.w
 8003c18:	00000000 	.word	0x00000000
 8003c1c:	40000000 	.word	0x40000000
 8003c20:	40080000 	.word	0x40080000
 8003c24:	41400000 	.word	0x41400000
 8003c28:	40e00000 	.word	0x40e00000
 8003c2c:	40590000 	.word	0x40590000
 8003c30:	200002d0 	.word	0x200002d0

08003c34 <TRYKKSENSOR_LesRegistrene>:
	if(status != HAL_OK) return TRYKK_FEIL;

	return TRYKK_SUKSESS;
}

trykk_status TRYKKSENSOR_LesRegistrene(TRYKKSENSOR *dev, uint8_t reg, uint8_t *data, uint8_t lengde){
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af04      	add	r7, sp, #16
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	460b      	mov	r3, r1
 8003c42:	72fb      	strb	r3, [r7, #11]
 8003c44:	4613      	mov	r3, r2
 8003c46:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read( dev->i2cHandle, TRYKKSENSOR_DEVICE_READ, reg, I2C_MEMADD_SIZE_8BIT, data, lengde, HAL_MAX_DELAY);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	7afb      	ldrb	r3, [r7, #11]
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	7abb      	ldrb	r3, [r7, #10]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f04f 31ff 	mov.w	r1, #4294967295
 8003c58:	9102      	str	r1, [sp, #8]
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	2301      	movs	r3, #1
 8003c62:	21ef      	movs	r1, #239	; 0xef
 8003c64:	f001 fc6c 	bl	8005540 <HAL_I2C_Mem_Read>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	75fb      	strb	r3, [r7, #23]

	if(status != HAL_OK) return TRYKK_FEIL;
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <TRYKKSENSOR_LesRegistrene+0x42>
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <TRYKKSENSOR_LesRegistrene+0x44>

	return TRYKK_SUKSESS;
 8003c76:	2301      	movs	r3, #1
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <TRYKKSENSOR_SkrivRegister>:

trykk_status TRYKKSENSOR_SkrivRegister(TRYKKSENSOR *dev, uint8_t *data){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Master_Transmit(dev->i2cHandle, TRYKKSENSOR_DEVICE_WRITE, data, 1, HAL_MAX_DELAY);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2301      	movs	r3, #1
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	21ee      	movs	r1, #238	; 0xee
 8003c9a:	f001 fb53 	bl	8005344 <HAL_I2C_Master_Transmit>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	73fb      	strb	r3, [r7, #15]
//	status =  HAL_I2C_Mem_Write(dev->i2cHandle, TRYKKSENSOR_DEVICE_WRITE, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);

	if(status != HAL_OK) return TRYKK_FEIL;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <TRYKKSENSOR_SkrivRegister+0x2c>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <TRYKKSENSOR_SkrivRegister+0x2e>

	return TRYKK_SUKSESS;
 8003cac:	2301      	movs	r3, #1
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cbc:	480d      	ldr	r0, [pc, #52]	; (8003cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cbe:	490e      	ldr	r1, [pc, #56]	; (8003cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cc0:	4a0e      	ldr	r2, [pc, #56]	; (8003cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cc4:	e002      	b.n	8003ccc <LoopCopyDataInit>

08003cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cca:	3304      	adds	r3, #4

08003ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cd0:	d3f9      	bcc.n	8003cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cd2:	4a0b      	ldr	r2, [pc, #44]	; (8003d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cd4:	4c0b      	ldr	r4, [pc, #44]	; (8003d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cd8:	e001      	b.n	8003cde <LoopFillZerobss>

08003cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cdc:	3204      	adds	r2, #4

08003cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ce0:	d3fb      	bcc.n	8003cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ce2:	f7ff fbcf 	bl	8003484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ce6:	f008 fb31 	bl	800c34c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cea:	f7ff f923 	bl	8002f34 <main>
  bx  lr    
 8003cee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cf8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003cfc:	0800da40 	.word	0x0800da40
  ldr r2, =_sbss
 8003d00:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003d04:	20001fd8 	.word	0x20001fd8

08003d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d08:	e7fe      	b.n	8003d08 <ADC_IRQHandler>
	...

08003d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_Init+0x40>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0d      	ldr	r2, [pc, #52]	; (8003d4c <HAL_Init+0x40>)
 8003d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_Init+0x40>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <HAL_Init+0x40>)
 8003d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d28:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <HAL_Init+0x40>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <HAL_Init+0x40>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d34:	2003      	movs	r0, #3
 8003d36:	f000 ffb1 	bl	8004c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d3a:	200f      	movs	r0, #15
 8003d3c:	f000 f808 	bl	8003d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d40:	f7ff fac6 	bl	80032d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023c00 	.word	0x40023c00

08003d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_InitTick+0x54>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_InitTick+0x58>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	4619      	mov	r1, r3
 8003d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 ffc9 	bl	8004d06 <HAL_SYSTICK_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e00e      	b.n	8003d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b0f      	cmp	r3, #15
 8003d82:	d80a      	bhi.n	8003d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d84:	2200      	movs	r2, #0
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	f000 ff91 	bl	8004cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d90:	4a06      	ldr	r2, [pc, #24]	; (8003dac <HAL_InitTick+0x5c>)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	e000      	b.n	8003d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	2000000c 	.word	0x2000000c
 8003da8:	20000014 	.word	0x20000014
 8003dac:	20000010 	.word	0x20000010

08003db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_IncTick+0x20>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_IncTick+0x24>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <HAL_IncTick+0x24>)
 8003dc2:	6013      	str	r3, [r2, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000014 	.word	0x20000014
 8003dd4:	200006fc 	.word	0x200006fc

08003dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return uwTick;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_GetTick+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	200006fc 	.word	0x200006fc

08003df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003df8:	f7ff ffee 	bl	8003dd8 <HAL_GetTick>
 8003dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d005      	beq.n	8003e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_Delay+0x44>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e16:	bf00      	nop
 8003e18:	f7ff ffde 	bl	8003dd8 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d8f7      	bhi.n	8003e18 <HAL_Delay+0x28>
  {
  }
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000014 	.word	0x20000014

08003e38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0ed      	b.n	8004026 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd f9e4 	bl	8001224 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e6c:	f7ff ffb4 	bl	8003dd8 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e72:	e012      	b.n	8003e9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e74:	f7ff ffb0 	bl	8003dd8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b0a      	cmp	r3, #10
 8003e80:	d90b      	bls.n	8003e9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2205      	movs	r2, #5
 8003e92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0c5      	b.n	8004026 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0e5      	beq.n	8003e74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0202 	bic.w	r2, r2, #2
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb8:	f7ff ff8e 	bl	8003dd8 <HAL_GetTick>
 8003ebc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ebe:	e012      	b.n	8003ee6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ec0:	f7ff ff8a 	bl	8003dd8 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b0a      	cmp	r3, #10
 8003ecc:	d90b      	bls.n	8003ee6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2205      	movs	r2, #5
 8003ede:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e09f      	b.n	8004026 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e5      	bne.n	8003ec0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7e1b      	ldrb	r3, [r3, #24]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d108      	bne.n	8003f0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e007      	b.n	8003f1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	7e5b      	ldrb	r3, [r3, #25]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d108      	bne.n	8003f38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e007      	b.n	8003f48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7e9b      	ldrb	r3, [r3, #26]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d108      	bne.n	8003f62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0220 	orr.w	r2, r2, #32
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e007      	b.n	8003f72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0220 	bic.w	r2, r2, #32
 8003f70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	7edb      	ldrb	r3, [r3, #27]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d108      	bne.n	8003f8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0210 	bic.w	r2, r2, #16
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e007      	b.n	8003f9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0210 	orr.w	r2, r2, #16
 8003f9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	7f1b      	ldrb	r3, [r3, #28]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d108      	bne.n	8003fb6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e007      	b.n	8003fc6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0208 	bic.w	r2, r2, #8
 8003fc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7f5b      	ldrb	r3, [r3, #29]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d108      	bne.n	8003fe0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0204 	orr.w	r2, r2, #4
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e007      	b.n	8003ff0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0204 	bic.w	r2, r2, #4
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	ea42 0103 	orr.w	r1, r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	1e5a      	subs	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004046:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004048:	7cfb      	ldrb	r3, [r7, #19]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d003      	beq.n	8004056 <HAL_CAN_ConfigFilter+0x26>
 800404e:	7cfb      	ldrb	r3, [r7, #19]
 8004050:	2b02      	cmp	r3, #2
 8004052:	f040 80be 	bne.w	80041d2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004056:	4b65      	ldr	r3, [pc, #404]	; (80041ec <HAL_CAN_ConfigFilter+0x1bc>)
 8004058:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004060:	f043 0201 	orr.w	r2, r3, #1
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004070:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	431a      	orrs	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2201      	movs	r2, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	401a      	ands	r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d123      	bne.n	8004100 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	401a      	ands	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3248      	adds	r2, #72	; 0x48
 80040e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f6:	6979      	ldr	r1, [r7, #20]
 80040f8:	3348      	adds	r3, #72	; 0x48
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	440b      	add	r3, r1
 80040fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d122      	bne.n	800414e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	431a      	orrs	r2, r3
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004128:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	3248      	adds	r2, #72	; 0x48
 800412e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004142:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004144:	6979      	ldr	r1, [r7, #20]
 8004146:	3348      	adds	r3, #72	; 0x48
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	440b      	add	r3, r1
 800414c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43db      	mvns	r3, r3
 8004160:	401a      	ands	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004168:	e007      	b.n	800417a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	431a      	orrs	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	43db      	mvns	r3, r3
 800418c:	401a      	ands	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004194:	e007      	b.n	80041a6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	431a      	orrs	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d107      	bne.n	80041be <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041c4:	f023 0201 	bic.w	r2, r3, #1
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e006      	b.n	80041e0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
  }
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40006400 	.word	0x40006400

080041f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d12e      	bne.n	8004262 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800421c:	f7ff fddc 	bl	8003dd8 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004222:	e012      	b.n	800424a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004224:	f7ff fdd8 	bl	8003dd8 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b0a      	cmp	r3, #10
 8004230:	d90b      	bls.n	800424a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2205      	movs	r2, #5
 8004242:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e012      	b.n	8004270 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e5      	bne.n	8004224 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e006      	b.n	8004270 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	; 0x24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3020 	ldrb.w	r3, [r3, #32]
 800428c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004296:	7ffb      	ldrb	r3, [r7, #31]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d003      	beq.n	80042a4 <HAL_CAN_AddTxMessage+0x2c>
 800429c:	7ffb      	ldrb	r3, [r7, #31]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	f040 80b8 	bne.w	8004414 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80a0 	beq.w	8004404 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	0e1b      	lsrs	r3, r3, #24
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d907      	bls.n	80042e4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e09e      	b.n	8004422 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042e4:	2201      	movs	r2, #1
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	409a      	lsls	r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10d      	bne.n	8004312 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	6809      	ldr	r1, [r1, #0]
 8004304:	431a      	orrs	r2, r3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3318      	adds	r3, #24
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	440b      	add	r3, r1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e00f      	b.n	8004332 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800431c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004322:	68f9      	ldr	r1, [r7, #12]
 8004324:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004326:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3318      	adds	r3, #24
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	440b      	add	r3, r1
 8004330:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6819      	ldr	r1, [r3, #0]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	3318      	adds	r3, #24
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	440b      	add	r3, r1
 8004342:	3304      	adds	r3, #4
 8004344:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	7d1b      	ldrb	r3, [r3, #20]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d111      	bne.n	8004372 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	3318      	adds	r3, #24
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	4413      	add	r3, r2
 800435a:	3304      	adds	r3, #4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	6811      	ldr	r1, [r2, #0]
 8004362:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	3318      	adds	r3, #24
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	440b      	add	r3, r1
 800436e:	3304      	adds	r3, #4
 8004370:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3307      	adds	r3, #7
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	061a      	lsls	r2, r3, #24
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3306      	adds	r3, #6
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3305      	adds	r3, #5
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	4313      	orrs	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	3204      	adds	r2, #4
 8004392:	7812      	ldrb	r2, [r2, #0]
 8004394:	4610      	mov	r0, r2
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	6811      	ldr	r1, [r2, #0]
 800439a:	ea43 0200 	orr.w	r2, r3, r0
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	440b      	add	r3, r1
 80043a4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80043a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3303      	adds	r3, #3
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	061a      	lsls	r2, r3, #24
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3302      	adds	r3, #2
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3301      	adds	r3, #1
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	4313      	orrs	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	7812      	ldrb	r2, [r2, #0]
 80043ca:	4610      	mov	r0, r2
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	6811      	ldr	r1, [r2, #0]
 80043d0:	ea43 0200 	orr.w	r2, r3, r0
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	440b      	add	r3, r1
 80043da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80043de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3318      	adds	r3, #24
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	4413      	add	r3, r2
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	6811      	ldr	r1, [r2, #0]
 80043f2:	f043 0201 	orr.w	r2, r3, #1
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	3318      	adds	r3, #24
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	440b      	add	r3, r1
 80043fe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e00e      	b.n	8004422 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e006      	b.n	8004422 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3724      	adds	r7, #36	; 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800442e:	b480      	push	{r7}
 8004430:	b087      	sub	sp, #28
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004442:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d003      	beq.n	8004452 <HAL_CAN_GetRxMessage+0x24>
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b02      	cmp	r3, #2
 800444e:	f040 80f3 	bne.w	8004638 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10e      	bne.n	8004476 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e0e7      	b.n	8004646 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d107      	bne.n	8004494 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0d8      	b.n	8004646 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	331b      	adds	r3, #27
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	4413      	add	r3, r2
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0204 	and.w	r2, r3, #4
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10c      	bne.n	80044cc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	331b      	adds	r3, #27
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	4413      	add	r3, r2
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	0d5b      	lsrs	r3, r3, #21
 80044c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e00b      	b.n	80044e4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	331b      	adds	r3, #27
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	4413      	add	r3, r2
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	08db      	lsrs	r3, r3, #3
 80044dc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	331b      	adds	r3, #27
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	4413      	add	r3, r2
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0202 	and.w	r2, r3, #2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	331b      	adds	r3, #27
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	4413      	add	r3, r2
 8004506:	3304      	adds	r3, #4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 020f 	and.w	r2, r3, #15
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	331b      	adds	r3, #27
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	4413      	add	r3, r2
 800451e:	3304      	adds	r3, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	0a1b      	lsrs	r3, r3, #8
 8004524:	b2da      	uxtb	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	331b      	adds	r3, #27
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	4413      	add	r3, r2
 8004536:	3304      	adds	r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	0c1b      	lsrs	r3, r3, #16
 800453c:	b29a      	uxth	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	4413      	add	r3, r2
 800454c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	4413      	add	r3, r2
 8004562:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	0a1a      	lsrs	r2, r3, #8
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	4413      	add	r3, r2
 800457c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	0c1a      	lsrs	r2, r3, #16
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	3302      	adds	r3, #2
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	4413      	add	r3, r2
 8004596:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	0e1a      	lsrs	r2, r3, #24
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	3303      	adds	r3, #3
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	0a1a      	lsrs	r2, r3, #8
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	3305      	adds	r3, #5
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	0c1a      	lsrs	r2, r3, #16
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	3306      	adds	r3, #6
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	0e1a      	lsrs	r2, r3, #24
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	3307      	adds	r3, #7
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d108      	bne.n	8004624 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0220 	orr.w	r2, r2, #32
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	e007      	b.n	8004634 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0220 	orr.w	r2, r2, #32
 8004632:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e006      	b.n	8004646 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004652:	b480      	push	{r7}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004662:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d002      	beq.n	8004670 <HAL_CAN_ActivateNotification+0x1e>
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d109      	bne.n	8004684 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6959      	ldr	r1, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e006      	b.n	8004692 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
  }
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b08a      	sub	sp, #40	; 0x28
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d07c      	beq.n	80047de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d023      	beq.n	8004736 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2201      	movs	r2, #1
 80046f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f983 	bl	8004a0c <HAL_CAN_TxMailbox0CompleteCallback>
 8004706:	e016      	b.n	8004736 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d004      	beq.n	800471c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
 800471a:	e00c      	b.n	8004736 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	e002      	b.n	8004736 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f989 	bl	8004a48 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d024      	beq.n	800478a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004748:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f963 	bl	8004a20 <HAL_CAN_TxMailbox1CompleteCallback>
 800475a:	e016      	b.n	800478a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
 800476e:	e00c      	b.n	800478a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	e002      	b.n	800478a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f969 	bl	8004a5c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d024      	beq.n	80047de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800479c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f943 	bl	8004a34 <HAL_CAN_TxMailbox2CompleteCallback>
 80047ae:	e016      	b.n	80047de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
 80047c2:	e00c      	b.n	80047de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
 80047d6:	e002      	b.n	80047de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f949 	bl	8004a70 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00c      	beq.n	8004802 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2210      	movs	r2, #16
 8004800:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d006      	beq.n	8004824 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2208      	movs	r2, #8
 800481c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f930 	bl	8004a84 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7fe fc7b 	bl	8003138 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00c      	beq.n	8004866 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800485c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2210      	movs	r2, #16
 8004864:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00b      	beq.n	8004888 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d006      	beq.n	8004888 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2208      	movs	r2, #8
 8004880:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f912 	bl	8004aac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f8f9 	bl	8004a98 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d006      	beq.n	80048c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2210      	movs	r2, #16
 80048c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f8fc 	bl	8004ac0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d006      	beq.n	80048ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2208      	movs	r2, #8
 80048e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8f5 	bl	8004ad4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d07b      	beq.n	80049ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d072      	beq.n	80049e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	f043 0302 	orr.w	r3, r3, #2
 8004934:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	f043 0304 	orr.w	r3, r3, #4
 8004950:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004958:	2b00      	cmp	r3, #0
 800495a:	d043      	beq.n	80049e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004962:	2b00      	cmp	r3, #0
 8004964:	d03e      	beq.n	80049e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800496c:	2b60      	cmp	r3, #96	; 0x60
 800496e:	d02b      	beq.n	80049c8 <HAL_CAN_IRQHandler+0x32a>
 8004970:	2b60      	cmp	r3, #96	; 0x60
 8004972:	d82e      	bhi.n	80049d2 <HAL_CAN_IRQHandler+0x334>
 8004974:	2b50      	cmp	r3, #80	; 0x50
 8004976:	d022      	beq.n	80049be <HAL_CAN_IRQHandler+0x320>
 8004978:	2b50      	cmp	r3, #80	; 0x50
 800497a:	d82a      	bhi.n	80049d2 <HAL_CAN_IRQHandler+0x334>
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d019      	beq.n	80049b4 <HAL_CAN_IRQHandler+0x316>
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d826      	bhi.n	80049d2 <HAL_CAN_IRQHandler+0x334>
 8004984:	2b30      	cmp	r3, #48	; 0x30
 8004986:	d010      	beq.n	80049aa <HAL_CAN_IRQHandler+0x30c>
 8004988:	2b30      	cmp	r3, #48	; 0x30
 800498a:	d822      	bhi.n	80049d2 <HAL_CAN_IRQHandler+0x334>
 800498c:	2b10      	cmp	r3, #16
 800498e:	d002      	beq.n	8004996 <HAL_CAN_IRQHandler+0x2f8>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d005      	beq.n	80049a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004994:	e01d      	b.n	80049d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	f043 0308 	orr.w	r3, r3, #8
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800499e:	e019      	b.n	80049d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f043 0310 	orr.w	r3, r3, #16
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049a8:	e014      	b.n	80049d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	f043 0320 	orr.w	r3, r3, #32
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049b2:	e00f      	b.n	80049d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049bc:	e00a      	b.n	80049d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049c6:	e005      	b.n	80049d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049d0:	e000      	b.n	80049d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80049d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80049e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2204      	movs	r2, #4
 80049ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f872 	bl	8004ae8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a04:	bf00      	nop
 8004a06:	3728      	adds	r7, #40	; 0x28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <__NVIC_SetPriorityGrouping+0x44>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b2e:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <__NVIC_SetPriorityGrouping+0x44>)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	60d3      	str	r3, [r2, #12]
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	e000ed00 	.word	0xe000ed00

08004b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <__NVIC_GetPriorityGrouping+0x18>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	0a1b      	lsrs	r3, r3, #8
 8004b4e:	f003 0307 	and.w	r3, r3, #7
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	e000ed00 	.word	0xe000ed00

08004b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	db0b      	blt.n	8004b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	f003 021f 	and.w	r2, r3, #31
 8004b78:	4907      	ldr	r1, [pc, #28]	; (8004b98 <__NVIC_EnableIRQ+0x38>)
 8004b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	2001      	movs	r0, #1
 8004b82:	fa00 f202 	lsl.w	r2, r0, r2
 8004b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	e000e100 	.word	0xe000e100

08004b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	6039      	str	r1, [r7, #0]
 8004ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	db0a      	blt.n	8004bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	490c      	ldr	r1, [pc, #48]	; (8004be8 <__NVIC_SetPriority+0x4c>)
 8004bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bba:	0112      	lsls	r2, r2, #4
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bc4:	e00a      	b.n	8004bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	4908      	ldr	r1, [pc, #32]	; (8004bec <__NVIC_SetPriority+0x50>)
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	3b04      	subs	r3, #4
 8004bd4:	0112      	lsls	r2, r2, #4
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	440b      	add	r3, r1
 8004bda:	761a      	strb	r2, [r3, #24]
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	e000e100 	.word	0xe000e100
 8004bec:	e000ed00 	.word	0xe000ed00

08004bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b089      	sub	sp, #36	; 0x24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f1c3 0307 	rsb	r3, r3, #7
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	bf28      	it	cs
 8004c0e:	2304      	movcs	r3, #4
 8004c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	3304      	adds	r3, #4
 8004c16:	2b06      	cmp	r3, #6
 8004c18:	d902      	bls.n	8004c20 <NVIC_EncodePriority+0x30>
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3b03      	subs	r3, #3
 8004c1e:	e000      	b.n	8004c22 <NVIC_EncodePriority+0x32>
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	401a      	ands	r2, r3
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c38:	f04f 31ff 	mov.w	r1, #4294967295
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c42:	43d9      	mvns	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c48:	4313      	orrs	r3, r2
         );
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3724      	adds	r7, #36	; 0x24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c68:	d301      	bcc.n	8004c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e00f      	b.n	8004c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c6e:	4a0a      	ldr	r2, [pc, #40]	; (8004c98 <SysTick_Config+0x40>)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c76:	210f      	movs	r1, #15
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	f7ff ff8e 	bl	8004b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <SysTick_Config+0x40>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c86:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <SysTick_Config+0x40>)
 8004c88:	2207      	movs	r2, #7
 8004c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	e000e010 	.word	0xe000e010

08004c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ff29 	bl	8004afc <__NVIC_SetPriorityGrouping>
}
 8004caa:	bf00      	nop
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	4603      	mov	r3, r0
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cc4:	f7ff ff3e 	bl	8004b44 <__NVIC_GetPriorityGrouping>
 8004cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	6978      	ldr	r0, [r7, #20]
 8004cd0:	f7ff ff8e 	bl	8004bf0 <NVIC_EncodePriority>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff ff5d 	bl	8004b9c <__NVIC_SetPriority>
}
 8004ce2:	bf00      	nop
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff ff31 	bl	8004b60 <__NVIC_EnableIRQ>
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff ffa2 	bl	8004c58 <SysTick_Config>
 8004d14:	4603      	mov	r3, r0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e16b      	b.n	8005014 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	f040 815a 	bne.w	800500e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d005      	beq.n	8004d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d130      	bne.n	8004dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4013      	ands	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004da8:	2201      	movs	r2, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 0201 	and.w	r2, r3, #1
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d017      	beq.n	8004e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	2203      	movs	r2, #3
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4013      	ands	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d123      	bne.n	8004e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	08da      	lsrs	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3208      	adds	r2, #8
 8004e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	220f      	movs	r2, #15
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	08da      	lsrs	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3208      	adds	r2, #8
 8004e5e:	69b9      	ldr	r1, [r7, #24]
 8004e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	2203      	movs	r2, #3
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0203 	and.w	r2, r3, #3
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80b4 	beq.w	800500e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	4b60      	ldr	r3, [pc, #384]	; (800502c <HAL_GPIO_Init+0x30c>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	4a5f      	ldr	r2, [pc, #380]	; (800502c <HAL_GPIO_Init+0x30c>)
 8004eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb6:	4b5d      	ldr	r3, [pc, #372]	; (800502c <HAL_GPIO_Init+0x30c>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ec2:	4a5b      	ldr	r2, [pc, #364]	; (8005030 <HAL_GPIO_Init+0x310>)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	089b      	lsrs	r3, r3, #2
 8004ec8:	3302      	adds	r3, #2
 8004eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	220f      	movs	r2, #15
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a52      	ldr	r2, [pc, #328]	; (8005034 <HAL_GPIO_Init+0x314>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d02b      	beq.n	8004f46 <HAL_GPIO_Init+0x226>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a51      	ldr	r2, [pc, #324]	; (8005038 <HAL_GPIO_Init+0x318>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d025      	beq.n	8004f42 <HAL_GPIO_Init+0x222>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a50      	ldr	r2, [pc, #320]	; (800503c <HAL_GPIO_Init+0x31c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01f      	beq.n	8004f3e <HAL_GPIO_Init+0x21e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a4f      	ldr	r2, [pc, #316]	; (8005040 <HAL_GPIO_Init+0x320>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d019      	beq.n	8004f3a <HAL_GPIO_Init+0x21a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a4e      	ldr	r2, [pc, #312]	; (8005044 <HAL_GPIO_Init+0x324>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <HAL_GPIO_Init+0x216>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a4d      	ldr	r2, [pc, #308]	; (8005048 <HAL_GPIO_Init+0x328>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00d      	beq.n	8004f32 <HAL_GPIO_Init+0x212>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a4c      	ldr	r2, [pc, #304]	; (800504c <HAL_GPIO_Init+0x32c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <HAL_GPIO_Init+0x20e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a4b      	ldr	r2, [pc, #300]	; (8005050 <HAL_GPIO_Init+0x330>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d101      	bne.n	8004f2a <HAL_GPIO_Init+0x20a>
 8004f26:	2307      	movs	r3, #7
 8004f28:	e00e      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	e00c      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f2e:	2306      	movs	r3, #6
 8004f30:	e00a      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f32:	2305      	movs	r3, #5
 8004f34:	e008      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f36:	2304      	movs	r3, #4
 8004f38:	e006      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e004      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e002      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f46:	2300      	movs	r3, #0
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	f002 0203 	and.w	r2, r2, #3
 8004f4e:	0092      	lsls	r2, r2, #2
 8004f50:	4093      	lsls	r3, r2
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f58:	4935      	ldr	r1, [pc, #212]	; (8005030 <HAL_GPIO_Init+0x310>)
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	089b      	lsrs	r3, r3, #2
 8004f5e:	3302      	adds	r3, #2
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f66:	4b3b      	ldr	r3, [pc, #236]	; (8005054 <HAL_GPIO_Init+0x334>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f8a:	4a32      	ldr	r2, [pc, #200]	; (8005054 <HAL_GPIO_Init+0x334>)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f90:	4b30      	ldr	r3, [pc, #192]	; (8005054 <HAL_GPIO_Init+0x334>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fb4:	4a27      	ldr	r2, [pc, #156]	; (8005054 <HAL_GPIO_Init+0x334>)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fba:	4b26      	ldr	r3, [pc, #152]	; (8005054 <HAL_GPIO_Init+0x334>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <HAL_GPIO_Init+0x334>)
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <HAL_GPIO_Init+0x334>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005008:	4a12      	ldr	r2, [pc, #72]	; (8005054 <HAL_GPIO_Init+0x334>)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3301      	adds	r3, #1
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	f67f ae90 	bls.w	8004d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	3724      	adds	r7, #36	; 0x24
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	40013800 	.word	0x40013800
 8005034:	40020000 	.word	0x40020000
 8005038:	40020400 	.word	0x40020400
 800503c:	40020800 	.word	0x40020800
 8005040:	40020c00 	.word	0x40020c00
 8005044:	40021000 	.word	0x40021000
 8005048:	40021400 	.word	0x40021400
 800504c:	40021800 	.word	0x40021800
 8005050:	40021c00 	.word	0x40021c00
 8005054:	40013c00 	.word	0x40013c00

08005058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	887b      	ldrh	r3, [r7, #2]
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e001      	b.n	800507a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
 8005094:	4613      	mov	r3, r2
 8005096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005098:	787b      	ldrb	r3, [r7, #1]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800509e:	887a      	ldrh	r2, [r7, #2]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050a4:	e003      	b.n	80050ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050a6:	887b      	ldrh	r3, [r7, #2]
 80050a8:	041a      	lsls	r2, r3, #16
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	619a      	str	r2, [r3, #24]
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e12b      	b.n	8005326 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fd f9d4 	bl	8002490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2224      	movs	r2, #36	; 0x24
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800510e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800511e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005120:	f002 fe76 	bl	8007e10 <HAL_RCC_GetPCLK1Freq>
 8005124:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4a81      	ldr	r2, [pc, #516]	; (8005330 <HAL_I2C_Init+0x274>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d807      	bhi.n	8005140 <HAL_I2C_Init+0x84>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4a80      	ldr	r2, [pc, #512]	; (8005334 <HAL_I2C_Init+0x278>)
 8005134:	4293      	cmp	r3, r2
 8005136:	bf94      	ite	ls
 8005138:	2301      	movls	r3, #1
 800513a:	2300      	movhi	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e006      	b.n	800514e <HAL_I2C_Init+0x92>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a7d      	ldr	r2, [pc, #500]	; (8005338 <HAL_I2C_Init+0x27c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	bf94      	ite	ls
 8005148:	2301      	movls	r3, #1
 800514a:	2300      	movhi	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e0e7      	b.n	8005326 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a78      	ldr	r2, [pc, #480]	; (800533c <HAL_I2C_Init+0x280>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	0c9b      	lsrs	r3, r3, #18
 8005160:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4a6a      	ldr	r2, [pc, #424]	; (8005330 <HAL_I2C_Init+0x274>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d802      	bhi.n	8005190 <HAL_I2C_Init+0xd4>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	3301      	adds	r3, #1
 800518e:	e009      	b.n	80051a4 <HAL_I2C_Init+0xe8>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	4a69      	ldr	r2, [pc, #420]	; (8005340 <HAL_I2C_Init+0x284>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	099b      	lsrs	r3, r3, #6
 80051a2:	3301      	adds	r3, #1
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	495c      	ldr	r1, [pc, #368]	; (8005330 <HAL_I2C_Init+0x274>)
 80051c0:	428b      	cmp	r3, r1
 80051c2:	d819      	bhi.n	80051f8 <HAL_I2C_Init+0x13c>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1e59      	subs	r1, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80051d2:	1c59      	adds	r1, r3, #1
 80051d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051d8:	400b      	ands	r3, r1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_I2C_Init+0x138>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1e59      	subs	r1, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ec:	3301      	adds	r3, #1
 80051ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f2:	e051      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 80051f4:	2304      	movs	r3, #4
 80051f6:	e04f      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d111      	bne.n	8005224 <HAL_I2C_Init+0x168>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1e58      	subs	r0, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6859      	ldr	r1, [r3, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	440b      	add	r3, r1
 800520e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005212:	3301      	adds	r3, #1
 8005214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e012      	b.n	800524a <HAL_I2C_Init+0x18e>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1e58      	subs	r0, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	0099      	lsls	r1, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	fbb0 f3f3 	udiv	r3, r0, r3
 800523a:	3301      	adds	r3, #1
 800523c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_I2C_Init+0x196>
 800524e:	2301      	movs	r3, #1
 8005250:	e022      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10e      	bne.n	8005278 <HAL_I2C_Init+0x1bc>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1e58      	subs	r0, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	440b      	add	r3, r1
 8005268:	fbb0 f3f3 	udiv	r3, r0, r3
 800526c:	3301      	adds	r3, #1
 800526e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005276:	e00f      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1e58      	subs	r0, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	0099      	lsls	r1, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	fbb0 f3f3 	udiv	r3, r0, r3
 800528e:	3301      	adds	r3, #1
 8005290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	6809      	ldr	r1, [r1, #0]
 800529c:	4313      	orrs	r3, r2
 800529e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69da      	ldr	r2, [r3, #28]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6911      	ldr	r1, [r2, #16]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68d2      	ldr	r2, [r2, #12]
 80052d2:	4311      	orrs	r1, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	430b      	orrs	r3, r1
 80052da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	000186a0 	.word	0x000186a0
 8005334:	001e847f 	.word	0x001e847f
 8005338:	003d08ff 	.word	0x003d08ff
 800533c:	431bde83 	.word	0x431bde83
 8005340:	10624dd3 	.word	0x10624dd3

08005344 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	461a      	mov	r2, r3
 8005350:	460b      	mov	r3, r1
 8005352:	817b      	strh	r3, [r7, #10]
 8005354:	4613      	mov	r3, r2
 8005356:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005358:	f7fe fd3e 	bl	8003dd8 <HAL_GetTick>
 800535c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b20      	cmp	r3, #32
 8005368:	f040 80e0 	bne.w	800552c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	2319      	movs	r3, #25
 8005372:	2201      	movs	r2, #1
 8005374:	4970      	ldr	r1, [pc, #448]	; (8005538 <HAL_I2C_Master_Transmit+0x1f4>)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fda0 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	e0d3      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_I2C_Master_Transmit+0x50>
 8005390:	2302      	movs	r3, #2
 8005392:	e0cc      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d007      	beq.n	80053ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2221      	movs	r2, #33	; 0x21
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2210      	movs	r2, #16
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	893a      	ldrh	r2, [r7, #8]
 80053ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a50      	ldr	r2, [pc, #320]	; (800553c <HAL_I2C_Master_Transmit+0x1f8>)
 80053fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80053fc:	8979      	ldrh	r1, [r7, #10]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	6a3a      	ldr	r2, [r7, #32]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fbf0 	bl	8005be8 <I2C_MasterRequestWrite>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e08d      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005428:	e066      	b.n	80054f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	6a39      	ldr	r1, [r7, #32]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 fe1a 	bl	8006068 <I2C_WaitOnTXEFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	2b04      	cmp	r3, #4
 8005440:	d107      	bne.n	8005452 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005450:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e06b      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b04      	cmp	r3, #4
 8005492:	d11b      	bne.n	80054cc <HAL_I2C_Master_Transmit+0x188>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	2b00      	cmp	r3, #0
 800549a:	d017      	beq.n	80054cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	6a39      	ldr	r1, [r7, #32]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fe0a 	bl	80060ea <I2C_WaitOnBTFFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d107      	bne.n	80054f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e01a      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d194      	bne.n	800542a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	e000      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800552c:	2302      	movs	r3, #2
  }
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	00100002 	.word	0x00100002
 800553c:	ffff0000 	.word	0xffff0000

08005540 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08c      	sub	sp, #48	; 0x30
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	4608      	mov	r0, r1
 800554a:	4611      	mov	r1, r2
 800554c:	461a      	mov	r2, r3
 800554e:	4603      	mov	r3, r0
 8005550:	817b      	strh	r3, [r7, #10]
 8005552:	460b      	mov	r3, r1
 8005554:	813b      	strh	r3, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800555a:	f7fe fc3d 	bl	8003dd8 <HAL_GetTick>
 800555e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b20      	cmp	r3, #32
 800556a:	f040 8208 	bne.w	800597e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	2319      	movs	r3, #25
 8005574:	2201      	movs	r2, #1
 8005576:	497b      	ldr	r1, [pc, #492]	; (8005764 <HAL_I2C_Mem_Read+0x224>)
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 fc9f 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005584:	2302      	movs	r3, #2
 8005586:	e1fb      	b.n	8005980 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_I2C_Mem_Read+0x56>
 8005592:	2302      	movs	r3, #2
 8005594:	e1f4      	b.n	8005980 <HAL_I2C_Mem_Read+0x440>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d007      	beq.n	80055bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2222      	movs	r2, #34	; 0x22
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2240      	movs	r2, #64	; 0x40
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4a5b      	ldr	r2, [pc, #364]	; (8005768 <HAL_I2C_Mem_Read+0x228>)
 80055fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055fe:	88f8      	ldrh	r0, [r7, #6]
 8005600:	893a      	ldrh	r2, [r7, #8]
 8005602:	8979      	ldrh	r1, [r7, #10]
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	4603      	mov	r3, r0
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 fb6c 	bl	8005cec <I2C_RequestMemoryRead>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e1b0      	b.n	8005980 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005622:	2b00      	cmp	r3, #0
 8005624:	d113      	bne.n	800564e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005626:	2300      	movs	r3, #0
 8005628:	623b      	str	r3, [r7, #32]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	623b      	str	r3, [r7, #32]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	e184      	b.n	8005958 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005652:	2b01      	cmp	r3, #1
 8005654:	d11b      	bne.n	800568e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	e164      	b.n	8005958 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005692:	2b02      	cmp	r3, #2
 8005694:	d11b      	bne.n	80056ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	e144      	b.n	8005958 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80056e4:	e138      	b.n	8005958 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	f200 80f1 	bhi.w	80058d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d123      	bne.n	8005740 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fd35 	bl	800616c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e139      	b.n	8005980 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800573e:	e10b      	b.n	8005958 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005744:	2b02      	cmp	r3, #2
 8005746:	d14e      	bne.n	80057e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	2200      	movs	r2, #0
 8005750:	4906      	ldr	r1, [pc, #24]	; (800576c <HAL_I2C_Mem_Read+0x22c>)
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 fbb2 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e10e      	b.n	8005980 <HAL_I2C_Mem_Read+0x440>
 8005762:	bf00      	nop
 8005764:	00100002 	.word	0x00100002
 8005768:	ffff0000 	.word	0xffff0000
 800576c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057e4:	e0b8      	b.n	8005958 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	2200      	movs	r2, #0
 80057ee:	4966      	ldr	r1, [pc, #408]	; (8005988 <HAL_I2C_Mem_Read+0x448>)
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fb63 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0bf      	b.n	8005980 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	2200      	movs	r2, #0
 800584a:	494f      	ldr	r1, [pc, #316]	; (8005988 <HAL_I2C_Mem_Read+0x448>)
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fb35 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e091      	b.n	8005980 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058d0:	e042      	b.n	8005958 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 fc48 	bl	800616c <I2C_WaitOnRXNEFlagUntilTimeout>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e04c      	b.n	8005980 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b04      	cmp	r3, #4
 8005924:	d118      	bne.n	8005958 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595c:	2b00      	cmp	r3, #0
 800595e:	f47f aec2 	bne.w	80056e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	e000      	b.n	8005980 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800597e:	2302      	movs	r3, #2
  }
}
 8005980:	4618      	mov	r0, r3
 8005982:	3728      	adds	r7, #40	; 0x28
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	00010004 	.word	0x00010004

0800598c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	607a      	str	r2, [r7, #4]
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	460b      	mov	r3, r1
 800599a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800599c:	f7fe fa1c 	bl	8003dd8 <HAL_GetTick>
 80059a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80059a2:	2301      	movs	r3, #1
 80059a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	f040 8111 	bne.w	8005bd6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	2319      	movs	r3, #25
 80059ba:	2201      	movs	r2, #1
 80059bc:	4988      	ldr	r1, [pc, #544]	; (8005be0 <HAL_I2C_IsDeviceReady+0x254>)
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 fa7c 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
 80059cc:	e104      	b.n	8005bd8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_I2C_IsDeviceReady+0x50>
 80059d8:	2302      	movs	r3, #2
 80059da:	e0fd      	b.n	8005bd8 <HAL_I2C_IsDeviceReady+0x24c>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d007      	beq.n	8005a02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0201 	orr.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2224      	movs	r2, #36	; 0x24
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a70      	ldr	r2, [pc, #448]	; (8005be4 <HAL_I2C_IsDeviceReady+0x258>)
 8005a24:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fa3a 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00d      	beq.n	8005a6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5c:	d103      	bne.n	8005a66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e0b6      	b.n	8005bd8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a6a:	897b      	ldrh	r3, [r7, #10]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005a7a:	f7fe f9ad 	bl	8003dd8 <HAL_GetTick>
 8005a7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	bf0c      	ite	eq
 8005a8e:	2301      	moveq	r3, #1
 8005a90:	2300      	movne	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa4:	bf0c      	ite	eq
 8005aa6:	2301      	moveq	r3, #1
 8005aa8:	2300      	movne	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005aae:	e025      	b.n	8005afc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ab0:	f7fe f992 	bl	8003dd8 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d302      	bcc.n	8005ac6 <HAL_I2C_IsDeviceReady+0x13a>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d103      	bne.n	8005ace <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	22a0      	movs	r2, #160	; 0xa0
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	bf0c      	ite	eq
 8005adc:	2301      	moveq	r3, #1
 8005ade:	2300      	movne	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af2:	bf0c      	ite	eq
 8005af4:	2301      	moveq	r3, #1
 8005af6:	2300      	movne	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2ba0      	cmp	r3, #160	; 0xa0
 8005b06:	d005      	beq.n	8005b14 <HAL_I2C_IsDeviceReady+0x188>
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <HAL_I2C_IsDeviceReady+0x188>
 8005b0e:	7dbb      	ldrb	r3, [r7, #22]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0cd      	beq.n	8005ab0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d129      	bne.n	8005b7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	2319      	movs	r3, #25
 8005b56:	2201      	movs	r2, #1
 8005b58:	4921      	ldr	r1, [pc, #132]	; (8005be0 <HAL_I2C_IsDeviceReady+0x254>)
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 f9ae 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e036      	b.n	8005bd8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e02c      	b.n	8005bd8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	2319      	movs	r3, #25
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	490f      	ldr	r1, [pc, #60]	; (8005be0 <HAL_I2C_IsDeviceReady+0x254>)
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f98a 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e012      	b.n	8005bd8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	f4ff af32 	bcc.w	8005a26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005bd6:	2302      	movs	r3, #2
  }
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	00100002 	.word	0x00100002
 8005be4:	ffff0000 	.word	0xffff0000

08005be8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d006      	beq.n	8005c12 <I2C_MasterRequestWrite+0x2a>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d003      	beq.n	8005c12 <I2C_MasterRequestWrite+0x2a>
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c10:	d108      	bne.n	8005c24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	e00b      	b.n	8005c3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	2b12      	cmp	r3, #18
 8005c2a:	d107      	bne.n	8005c3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f937 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00d      	beq.n	8005c70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c62:	d103      	bne.n	8005c6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e035      	b.n	8005cdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c78:	d108      	bne.n	8005c8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c7a:	897b      	ldrh	r3, [r7, #10]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c88:	611a      	str	r2, [r3, #16]
 8005c8a:	e01b      	b.n	8005cc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c8c:	897b      	ldrh	r3, [r7, #10]
 8005c8e:	11db      	asrs	r3, r3, #7
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f003 0306 	and.w	r3, r3, #6
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	f063 030f 	orn	r3, r3, #15
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	490e      	ldr	r1, [pc, #56]	; (8005ce4 <I2C_MasterRequestWrite+0xfc>)
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 f95d 	bl	8005f6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e010      	b.n	8005cdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cba:	897b      	ldrh	r3, [r7, #10]
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4907      	ldr	r1, [pc, #28]	; (8005ce8 <I2C_MasterRequestWrite+0x100>)
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f94d 	bl	8005f6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	00010008 	.word	0x00010008
 8005ce8:	00010002 	.word	0x00010002

08005cec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	817b      	strh	r3, [r7, #10]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	813b      	strh	r3, [r7, #8]
 8005d02:	4613      	mov	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 f8c2 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00d      	beq.n	8005d5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d4c:	d103      	bne.n	8005d56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e0aa      	b.n	8005eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d5a:	897b      	ldrh	r3, [r7, #10]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	6a3a      	ldr	r2, [r7, #32]
 8005d6e:	4952      	ldr	r1, [pc, #328]	; (8005eb8 <I2C_RequestMemoryRead+0x1cc>)
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f8fa 	bl	8005f6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e097      	b.n	8005eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d98:	6a39      	ldr	r1, [r7, #32]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 f964 	bl	8006068 <I2C_WaitOnTXEFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00d      	beq.n	8005dc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d107      	bne.n	8005dbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e076      	b.n	8005eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dc2:	88fb      	ldrh	r3, [r7, #6]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d105      	bne.n	8005dd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc8:	893b      	ldrh	r3, [r7, #8]
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	611a      	str	r2, [r3, #16]
 8005dd2:	e021      	b.n	8005e18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005dd4:	893b      	ldrh	r3, [r7, #8]
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de4:	6a39      	ldr	r1, [r7, #32]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f93e 	bl	8006068 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00d      	beq.n	8005e0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d107      	bne.n	8005e0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e050      	b.n	8005eb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e0e:	893b      	ldrh	r3, [r7, #8]
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1a:	6a39      	ldr	r1, [r7, #32]
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 f923 	bl	8006068 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00d      	beq.n	8005e44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d107      	bne.n	8005e40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e035      	b.n	8005eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f82b 	bl	8005ebc <I2C_WaitOnFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00d      	beq.n	8005e88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7a:	d103      	bne.n	8005e84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e013      	b.n	8005eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e88:	897b      	ldrh	r3, [r7, #10]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	6a3a      	ldr	r2, [r7, #32]
 8005e9c:	4906      	ldr	r1, [pc, #24]	; (8005eb8 <I2C_RequestMemoryRead+0x1cc>)
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f863 	bl	8005f6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e000      	b.n	8005eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	00010002 	.word	0x00010002

08005ebc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ecc:	e025      	b.n	8005f1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d021      	beq.n	8005f1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed6:	f7fd ff7f 	bl	8003dd8 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d302      	bcc.n	8005eec <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d116      	bne.n	8005f1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e023      	b.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	0c1b      	lsrs	r3, r3, #16
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d10d      	bne.n	8005f40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	43da      	mvns	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bf0c      	ite	eq
 8005f36:	2301      	moveq	r3, #1
 8005f38:	2300      	movne	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	e00c      	b.n	8005f5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	43da      	mvns	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	bf0c      	ite	eq
 8005f52:	2301      	moveq	r3, #1
 8005f54:	2300      	movne	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d0b6      	beq.n	8005ece <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f78:	e051      	b.n	800601e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f88:	d123      	bne.n	8005fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fa2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f043 0204 	orr.w	r2, r3, #4
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e046      	b.n	8006060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d021      	beq.n	800601e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fda:	f7fd fefd 	bl	8003dd8 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d302      	bcc.n	8005ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d116      	bne.n	800601e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f043 0220 	orr.w	r2, r3, #32
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e020      	b.n	8006060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	0c1b      	lsrs	r3, r3, #16
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d10c      	bne.n	8006042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	43da      	mvns	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4013      	ands	r3, r2
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	bf14      	ite	ne
 800603a:	2301      	movne	r3, #1
 800603c:	2300      	moveq	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	e00b      	b.n	800605a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	43da      	mvns	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	4013      	ands	r3, r2
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	bf14      	ite	ne
 8006054:	2301      	movne	r3, #1
 8006056:	2300      	moveq	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d18d      	bne.n	8005f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006074:	e02d      	b.n	80060d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f8ce 	bl	8006218 <I2C_IsAcknowledgeFailed>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e02d      	b.n	80060e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d021      	beq.n	80060d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608e:	f7fd fea3 	bl	8003dd8 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	429a      	cmp	r2, r3
 800609c:	d302      	bcc.n	80060a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d116      	bne.n	80060d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e007      	b.n	80060e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060dc:	2b80      	cmp	r3, #128	; 0x80
 80060de:	d1ca      	bne.n	8006076 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060f6:	e02d      	b.n	8006154 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f88d 	bl	8006218 <I2C_IsAcknowledgeFailed>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e02d      	b.n	8006164 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610e:	d021      	beq.n	8006154 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006110:	f7fd fe62 	bl	8003dd8 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	429a      	cmp	r2, r3
 800611e:	d302      	bcc.n	8006126 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d116      	bne.n	8006154 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	f043 0220 	orr.w	r2, r3, #32
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e007      	b.n	8006164 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b04      	cmp	r3, #4
 8006160:	d1ca      	bne.n	80060f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006178:	e042      	b.n	8006200 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b10      	cmp	r3, #16
 8006186:	d119      	bne.n	80061bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0210 	mvn.w	r2, #16
 8006190:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e029      	b.n	8006210 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061bc:	f7fd fe0c 	bl	8003dd8 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d302      	bcc.n	80061d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d116      	bne.n	8006200 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	f043 0220 	orr.w	r2, r3, #32
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e007      	b.n	8006210 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	d1b5      	bne.n	800617a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622e:	d11b      	bne.n	8006268 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006238:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006254:	f043 0204 	orr.w	r2, r3, #4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006278:	b08f      	sub	sp, #60	; 0x3c
 800627a:	af0a      	add	r7, sp, #40	; 0x28
 800627c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e10f      	b.n	80064a8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f005 fd2a 	bl	800bcfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2203      	movs	r2, #3
 80062ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f002 fc73 	bl	8008bb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	603b      	str	r3, [r7, #0]
 80062d2:	687e      	ldr	r6, [r7, #4]
 80062d4:	466d      	mov	r5, sp
 80062d6:	f106 0410 	add.w	r4, r6, #16
 80062da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80062ea:	1d33      	adds	r3, r6, #4
 80062ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062ee:	6838      	ldr	r0, [r7, #0]
 80062f0:	f002 fb4a 	bl	8008988 <USB_CoreInit>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e0d0      	b.n	80064a8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2100      	movs	r1, #0
 800630c:	4618      	mov	r0, r3
 800630e:	f002 fc61 	bl	8008bd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006312:	2300      	movs	r3, #0
 8006314:	73fb      	strb	r3, [r7, #15]
 8006316:	e04a      	b.n	80063ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006318:	7bfa      	ldrb	r2, [r7, #15]
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	4613      	mov	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	333d      	adds	r3, #61	; 0x3d
 8006328:	2201      	movs	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800632c:	7bfa      	ldrb	r2, [r7, #15]
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	333c      	adds	r3, #60	; 0x3c
 800633c:	7bfa      	ldrb	r2, [r7, #15]
 800633e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006340:	7bfa      	ldrb	r2, [r7, #15]
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	b298      	uxth	r0, r3
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	3342      	adds	r3, #66	; 0x42
 8006354:	4602      	mov	r2, r0
 8006356:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006358:	7bfa      	ldrb	r2, [r7, #15]
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	4613      	mov	r3, r2
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	1a9b      	subs	r3, r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	333f      	adds	r3, #63	; 0x3f
 8006368:	2200      	movs	r2, #0
 800636a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800636c:	7bfa      	ldrb	r2, [r7, #15]
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	4613      	mov	r3, r2
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	1a9b      	subs	r3, r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	3344      	adds	r3, #68	; 0x44
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006380:	7bfa      	ldrb	r2, [r7, #15]
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	4613      	mov	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	3348      	adds	r3, #72	; 0x48
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006394:	7bfa      	ldrb	r2, [r7, #15]
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	3350      	adds	r3, #80	; 0x50
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	3301      	adds	r3, #1
 80063ac:	73fb      	strb	r3, [r7, #15]
 80063ae:	7bfa      	ldrb	r2, [r7, #15]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d3af      	bcc.n	8006318 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]
 80063bc:	e044      	b.n	8006448 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80063be:	7bfa      	ldrb	r2, [r7, #15]
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80063d0:	2200      	movs	r2, #0
 80063d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80063d4:	7bfa      	ldrb	r2, [r7, #15]
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	4613      	mov	r3, r2
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	1a9b      	subs	r3, r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	440b      	add	r3, r1
 80063e2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80063e6:	7bfa      	ldrb	r2, [r7, #15]
 80063e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063ea:	7bfa      	ldrb	r2, [r7, #15]
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	4613      	mov	r3, r2
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	1a9b      	subs	r3, r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	440b      	add	r3, r1
 80063f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80063fc:	2200      	movs	r2, #0
 80063fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006400:	7bfa      	ldrb	r2, [r7, #15]
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	4613      	mov	r3, r2
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006416:	7bfa      	ldrb	r2, [r7, #15]
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800642c:	7bfa      	ldrb	r2, [r7, #15]
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	3301      	adds	r3, #1
 8006446:	73fb      	strb	r3, [r7, #15]
 8006448:	7bfa      	ldrb	r2, [r7, #15]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	429a      	cmp	r2, r3
 8006450:	d3b5      	bcc.n	80063be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	687e      	ldr	r6, [r7, #4]
 800645a:	466d      	mov	r5, sp
 800645c:	f106 0410 	add.w	r4, r6, #16
 8006460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006468:	e894 0003 	ldmia.w	r4, {r0, r1}
 800646c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006470:	1d33      	adds	r3, r6, #4
 8006472:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006474:	6838      	ldr	r0, [r7, #0]
 8006476:	f002 fbf9 	bl	8008c6c <USB_DevInit>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d005      	beq.n	800648c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e00d      	b.n	80064a8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f003 fc75 	bl	8009d90 <USB_DevDisconnect>

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_PCD_Start+0x1c>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e020      	b.n	800650e <HAL_PCD_Start+0x5e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d109      	bne.n	80064f0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d005      	beq.n	80064f0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f002 fb4b 	bl	8008b90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f003 fc25 	bl	8009d4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006516:	b590      	push	{r4, r7, lr}
 8006518:	b08d      	sub	sp, #52	; 0x34
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f003 fce3 	bl	8009ef8 <USB_GetMode>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	f040 839d 	bne.w	8006c74 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f003 fc47 	bl	8009dd2 <USB_ReadInterrupts>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 8393 	beq.w	8006c72 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f003 fc3e 	bl	8009dd2 <USB_ReadInterrupts>
 8006556:	4603      	mov	r3, r0
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b02      	cmp	r3, #2
 800655e:	d107      	bne.n	8006570 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695a      	ldr	r2, [r3, #20]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f002 0202 	and.w	r2, r2, #2
 800656e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4618      	mov	r0, r3
 8006576:	f003 fc2c 	bl	8009dd2 <USB_ReadInterrupts>
 800657a:	4603      	mov	r3, r0
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b10      	cmp	r3, #16
 8006582:	d161      	bne.n	8006648 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0210 	bic.w	r2, r2, #16
 8006592:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	f003 020f 	and.w	r2, r3, #15
 80065a0:	4613      	mov	r3, r2
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	4413      	add	r3, r2
 80065b0:	3304      	adds	r3, #4
 80065b2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	0c5b      	lsrs	r3, r3, #17
 80065b8:	f003 030f 	and.w	r3, r3, #15
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d124      	bne.n	800660a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d035      	beq.n	8006638 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	091b      	lsrs	r3, r3, #4
 80065d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6a38      	ldr	r0, [r7, #32]
 80065e0:	f003 fa63 	bl	8009aaa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	091b      	lsrs	r3, r3, #4
 80065ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065f0:	441a      	add	r2, r3
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006602:	441a      	add	r2, r3
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	619a      	str	r2, [r3, #24]
 8006608:	e016      	b.n	8006638 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	0c5b      	lsrs	r3, r3, #17
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	2b06      	cmp	r3, #6
 8006614:	d110      	bne.n	8006638 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800661c:	2208      	movs	r2, #8
 800661e:	4619      	mov	r1, r3
 8006620:	6a38      	ldr	r0, [r7, #32]
 8006622:	f003 fa42 	bl	8009aaa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	091b      	lsrs	r3, r3, #4
 800662e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006632:	441a      	add	r2, r3
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0210 	orr.w	r2, r2, #16
 8006646:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f003 fbc0 	bl	8009dd2 <USB_ReadInterrupts>
 8006652:	4603      	mov	r3, r0
 8006654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006658:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800665c:	d16e      	bne.n	800673c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f003 fbc6 	bl	8009df8 <USB_ReadDevAllOutEpInterrupt>
 800666c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800666e:	e062      	b.n	8006736 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d057      	beq.n	800672a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	4611      	mov	r1, r2
 8006684:	4618      	mov	r0, r3
 8006686:	f003 fbeb 	bl	8009e60 <USB_ReadDevOutEPInterrupt>
 800668a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00c      	beq.n	80066b0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a2:	461a      	mov	r2, r3
 80066a4:	2301      	movs	r3, #1
 80066a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80066a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fdb0 	bl	8007210 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00c      	beq.n	80066d4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c6:	461a      	mov	r2, r3
 80066c8:	2308      	movs	r3, #8
 80066ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80066cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 feaa 	bl	8007428 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d008      	beq.n	80066f0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	461a      	mov	r2, r3
 80066ec:	2310      	movs	r3, #16
 80066ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006706:	461a      	mov	r2, r3
 8006708:	2320      	movs	r3, #32
 800670a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006722:	461a      	mov	r2, r3
 8006724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006728:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	3301      	adds	r3, #1
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	085b      	lsrs	r3, r3, #1
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d199      	bne.n	8006670 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f003 fb46 	bl	8009dd2 <USB_ReadInterrupts>
 8006746:	4603      	mov	r3, r0
 8006748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800674c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006750:	f040 80c0 	bne.w	80068d4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f003 fb67 	bl	8009e2c <USB_ReadDevAllInEpInterrupt>
 800675e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006764:	e0b2      	b.n	80068cc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80a7 	beq.w	80068c0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	4611      	mov	r1, r2
 800677c:	4618      	mov	r0, r3
 800677e:	f003 fb8d 	bl	8009e9c <USB_ReadDevInEPInterrupt>
 8006782:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d057      	beq.n	800683e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	f003 030f 	and.w	r3, r3, #15
 8006794:	2201      	movs	r2, #1
 8006796:	fa02 f303 	lsl.w	r3, r2, r3
 800679a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	43db      	mvns	r3, r3
 80067a8:	69f9      	ldr	r1, [r7, #28]
 80067aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ae:	4013      	ands	r3, r2
 80067b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067be:	461a      	mov	r2, r3
 80067c0:	2301      	movs	r3, #1
 80067c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d132      	bne.n	8006832 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d0:	4613      	mov	r3, r2
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	3348      	adds	r3, #72	; 0x48
 80067dc:	6819      	ldr	r1, [r3, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e2:	4613      	mov	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	1a9b      	subs	r3, r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4403      	add	r3, r0
 80067ec:	3344      	adds	r3, #68	; 0x44
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4419      	add	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f6:	4613      	mov	r3, r2
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4403      	add	r3, r0
 8006800:	3348      	adds	r3, #72	; 0x48
 8006802:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	2b00      	cmp	r3, #0
 8006808:	d113      	bne.n	8006832 <HAL_PCD_IRQHandler+0x31c>
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680e:	4613      	mov	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	440b      	add	r3, r1
 8006818:	3350      	adds	r3, #80	; 0x50
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d108      	bne.n	8006832 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800682a:	461a      	mov	r2, r3
 800682c:	2101      	movs	r1, #1
 800682e:	f003 fb95 	bl	8009f5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	b2db      	uxtb	r3, r3
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f005 faee 	bl	800be1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	461a      	mov	r2, r3
 8006856:	2308      	movs	r3, #8
 8006858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f003 0310 	and.w	r3, r3, #16
 8006860:	2b00      	cmp	r3, #0
 8006862:	d008      	beq.n	8006876 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006870:	461a      	mov	r2, r3
 8006872:	2310      	movs	r3, #16
 8006874:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688c:	461a      	mov	r2, r3
 800688e:	2340      	movs	r3, #64	; 0x40
 8006890:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	461a      	mov	r2, r3
 80068aa:	2302      	movs	r3, #2
 80068ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80068b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fc1b 	bl	80070f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	3301      	adds	r3, #1
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f47f af49 	bne.w	8006766 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f003 fa7a 	bl	8009dd2 <USB_ReadInterrupts>
 80068de:	4603      	mov	r3, r0
 80068e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068e8:	d122      	bne.n	8006930 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068f8:	f023 0301 	bic.w	r3, r3, #1
 80068fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006904:	2b01      	cmp	r3, #1
 8006906:	d108      	bne.n	800691a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006910:	2100      	movs	r1, #0
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fe26 	bl	8007564 <HAL_PCDEx_LPM_Callback>
 8006918:	e002      	b.n	8006920 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f005 faf4 	bl	800bf08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695a      	ldr	r2, [r3, #20]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800692e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4618      	mov	r0, r3
 8006936:	f003 fa4c 	bl	8009dd2 <USB_ReadInterrupts>
 800693a:	4603      	mov	r3, r0
 800693c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006944:	d112      	bne.n	800696c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b01      	cmp	r3, #1
 8006954:	d102      	bne.n	800695c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f005 fab0 	bl	800bebc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695a      	ldr	r2, [r3, #20]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800696a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f003 fa2e 	bl	8009dd2 <USB_ReadInterrupts>
 8006976:	4603      	mov	r3, r0
 8006978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006980:	f040 80c7 	bne.w	8006b12 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2110      	movs	r1, #16
 800699e:	4618      	mov	r0, r3
 80069a0:	f002 fac8 	bl	8008f34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069a4:	2300      	movs	r3, #0
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a8:	e056      	b.n	8006a58 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b6:	461a      	mov	r2, r3
 80069b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069dc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	69fa      	ldr	r2, [r7, #28]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a10:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a22:	0151      	lsls	r1, r2, #5
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	440a      	add	r2, r1
 8006a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a42:	0151      	lsls	r1, r2, #5
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	440a      	add	r2, r1
 8006a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a50:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	3301      	adds	r3, #1
 8006a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d3a3      	bcc.n	80069aa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	69fa      	ldr	r2, [r7, #28]
 8006a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a70:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006a74:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a8e:	f043 030b 	orr.w	r3, r3, #11
 8006a92:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9e:	69fa      	ldr	r2, [r7, #28]
 8006aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aa4:	f043 030b 	orr.w	r3, r3, #11
 8006aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8006aaa:	e015      	b.n	8006ad8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	69fa      	ldr	r2, [r7, #28]
 8006ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006abe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006ac2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ad2:	f043 030b 	orr.w	r3, r3, #11
 8006ad6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69fa      	ldr	r2, [r7, #28]
 8006ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ae6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006aea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006afc:	461a      	mov	r2, r3
 8006afe:	f003 fa2d 	bl	8009f5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695a      	ldr	r2, [r3, #20]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f003 f95b 	bl	8009dd2 <USB_ReadInterrupts>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b26:	d124      	bne.n	8006b72 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f003 f9f1 	bl	8009f14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f002 fa59 	bl	8008fee <USB_GetDevSpeed>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	461a      	mov	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681c      	ldr	r4, [r3, #0]
 8006b48:	f001 f956 	bl	8007df8 <HAL_RCC_GetHCLKFreq>
 8006b4c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	4620      	mov	r0, r4
 8006b58:	f001 ff78 	bl	8008a4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f005 f984 	bl	800be6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695a      	ldr	r2, [r3, #20]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f003 f92b 	bl	8009dd2 <USB_ReadInterrupts>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d10a      	bne.n	8006b9c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f005 f961 	bl	800be4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695a      	ldr	r2, [r3, #20]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f002 0208 	and.w	r2, r2, #8
 8006b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f003 f916 	bl	8009dd2 <USB_ReadInterrupts>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb0:	d10f      	bne.n	8006bd2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f005 f9c3 	bl	800bf48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695a      	ldr	r2, [r3, #20]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f003 f8fb 	bl	8009dd2 <USB_ReadInterrupts>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006be6:	d10f      	bne.n	8006c08 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f005 f996 	bl	800bf24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695a      	ldr	r2, [r3, #20]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f003 f8e0 	bl	8009dd2 <USB_ReadInterrupts>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1c:	d10a      	bne.n	8006c34 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f005 f9a4 	bl	800bf6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695a      	ldr	r2, [r3, #20]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f003 f8ca 	bl	8009dd2 <USB_ReadInterrupts>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d115      	bne.n	8006c74 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f005 f994 	bl	800bf88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	605a      	str	r2, [r3, #4]
 8006c70:	e000      	b.n	8006c74 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006c72:	bf00      	nop
    }
  }
}
 8006c74:	3734      	adds	r7, #52	; 0x34
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd90      	pop	{r4, r7, pc}

08006c7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b082      	sub	sp, #8
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_PCD_SetAddress+0x1a>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e013      	b.n	8006cbc <HAL_PCD_SetAddress+0x42>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	78fa      	ldrb	r2, [r7, #3]
 8006caa:	4611      	mov	r1, r2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f003 f828 	bl	8009d02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	4608      	mov	r0, r1
 8006cce:	4611      	mov	r1, r2
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	70fb      	strb	r3, [r7, #3]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	803b      	strh	r3, [r7, #0]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	da0f      	bge.n	8006d0a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	f003 020f 	and.w	r2, r3, #15
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	3338      	adds	r3, #56	; 0x38
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3304      	adds	r3, #4
 8006d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	705a      	strb	r2, [r3, #1]
 8006d08:	e00f      	b.n	8006d2a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	f003 020f 	and.w	r2, r3, #15
 8006d10:	4613      	mov	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	1a9b      	subs	r3, r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	4413      	add	r3, r2
 8006d20:	3304      	adds	r3, #4
 8006d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	f003 030f 	and.w	r3, r3, #15
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006d36:	883a      	ldrh	r2, [r7, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	78ba      	ldrb	r2, [r7, #2]
 8006d40:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006d54:	78bb      	ldrb	r3, [r7, #2]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d102      	bne.n	8006d60 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <HAL_PCD_EP_Open+0xaa>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e00e      	b.n	8006d8c <HAL_PCD_EP_Open+0xc8>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68f9      	ldr	r1, [r7, #12]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f002 f95b 	bl	8009038 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	da0f      	bge.n	8006dc8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	f003 020f 	and.w	r2, r3, #15
 8006dae:	4613      	mov	r3, r2
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	1a9b      	subs	r3, r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	3338      	adds	r3, #56	; 0x38
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	4413      	add	r3, r2
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	705a      	strb	r2, [r3, #1]
 8006dc6:	e00f      	b.n	8006de8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	f003 020f 	and.w	r2, r3, #15
 8006dce:	4613      	mov	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	4413      	add	r3, r2
 8006dde:	3304      	adds	r3, #4
 8006de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_PCD_EP_Close+0x6e>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e00e      	b.n	8006e20 <HAL_PCD_EP_Close+0x8c>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68f9      	ldr	r1, [r7, #12]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f002 f999 	bl	8009148 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	607a      	str	r2, [r7, #4]
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	460b      	mov	r3, r1
 8006e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	f003 020f 	and.w	r2, r3, #15
 8006e3e:	4613      	mov	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3304      	adds	r3, #4
 8006e50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2200      	movs	r2, #0
 8006e62:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2200      	movs	r2, #0
 8006e68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e6a:	7afb      	ldrb	r3, [r7, #11]
 8006e6c:	f003 030f 	and.w	r3, r3, #15
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d102      	bne.n	8006e84 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e84:	7afb      	ldrb	r3, [r7, #11]
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d109      	bne.n	8006ea2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6979      	ldr	r1, [r7, #20]
 8006e9c:	f002 fc74 	bl	8009788 <USB_EP0StartXfer>
 8006ea0:	e008      	b.n	8006eb4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	6979      	ldr	r1, [r7, #20]
 8006eb0:	f002 fa26 	bl	8009300 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	f003 020f 	and.w	r2, r3, #15
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006ee0:	681b      	ldr	r3, [r3, #0]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
 8006efa:	460b      	mov	r3, r1
 8006efc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	f003 020f 	and.w	r2, r3, #15
 8006f04:	4613      	mov	r3, r2
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	3338      	adds	r3, #56	; 0x38
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	3304      	adds	r3, #4
 8006f14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2200      	movs	r2, #0
 8006f26:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d102      	bne.n	8006f48 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6979      	ldr	r1, [r7, #20]
 8006f60:	f002 fc12 	bl	8009788 <USB_EP0StartXfer>
 8006f64:	e008      	b.n	8006f78 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	6979      	ldr	r1, [r7, #20]
 8006f74:	f002 f9c4 	bl	8009300 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006f8e:	78fb      	ldrb	r3, [r7, #3]
 8006f90:	f003 020f 	and.w	r2, r3, #15
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d901      	bls.n	8006fa0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e050      	b.n	8007042 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	da0f      	bge.n	8006fc8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fa8:	78fb      	ldrb	r3, [r7, #3]
 8006faa:	f003 020f 	and.w	r2, r3, #15
 8006fae:	4613      	mov	r3, r2
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	3338      	adds	r3, #56	; 0x38
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	4413      	add	r3, r2
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	705a      	strb	r2, [r3, #1]
 8006fc6:	e00d      	b.n	8006fe4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006fc8:	78fa      	ldrb	r2, [r7, #3]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	4413      	add	r3, r2
 8006fda:	3304      	adds	r3, #4
 8006fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_PCD_EP_SetStall+0x82>
 8007000:	2302      	movs	r3, #2
 8007002:	e01e      	b.n	8007042 <HAL_PCD_EP_SetStall+0xc0>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68f9      	ldr	r1, [r7, #12]
 8007012:	4618      	mov	r0, r3
 8007014:	f002 fda1 	bl	8009b5a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	b2d9      	uxtb	r1, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007032:	461a      	mov	r2, r3
 8007034:	f002 ff92 	bl	8009f5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007056:	78fb      	ldrb	r3, [r7, #3]
 8007058:	f003 020f 	and.w	r2, r3, #15
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d901      	bls.n	8007068 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e042      	b.n	80070ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800706c:	2b00      	cmp	r3, #0
 800706e:	da0f      	bge.n	8007090 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	f003 020f 	and.w	r2, r3, #15
 8007076:	4613      	mov	r3, r2
 8007078:	00db      	lsls	r3, r3, #3
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	3338      	adds	r3, #56	; 0x38
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	4413      	add	r3, r2
 8007084:	3304      	adds	r3, #4
 8007086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	705a      	strb	r2, [r3, #1]
 800708e:	e00f      	b.n	80070b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	f003 020f 	and.w	r2, r3, #15
 8007096:	4613      	mov	r3, r2
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	4413      	add	r3, r2
 80070a6:	3304      	adds	r3, #4
 80070a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070b6:	78fb      	ldrb	r3, [r7, #3]
 80070b8:	f003 030f 	and.w	r3, r3, #15
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_PCD_EP_ClrStall+0x86>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e00e      	b.n	80070ee <HAL_PCD_EP_ClrStall+0xa4>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68f9      	ldr	r1, [r7, #12]
 80070de:	4618      	mov	r0, r3
 80070e0:	f002 fda9 	bl	8009c36 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b08a      	sub	sp, #40	; 0x28
 80070fa:	af02      	add	r7, sp, #8
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	4613      	mov	r3, r2
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	1a9b      	subs	r3, r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	3338      	adds	r3, #56	; 0x38
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	4413      	add	r3, r2
 800711a:	3304      	adds	r3, #4
 800711c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	429a      	cmp	r2, r3
 8007128:	d901      	bls.n	800712e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e06c      	b.n	8007208 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	695a      	ldr	r2, [r3, #20]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	429a      	cmp	r2, r3
 8007142:	d902      	bls.n	800714a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	3303      	adds	r3, #3
 800714e:	089b      	lsrs	r3, r3, #2
 8007150:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007152:	e02b      	b.n	80071ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	695a      	ldr	r2, [r3, #20]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	429a      	cmp	r2, r3
 8007168:	d902      	bls.n	8007170 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	3303      	adds	r3, #3
 8007174:	089b      	lsrs	r3, r3, #2
 8007176:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68d9      	ldr	r1, [r3, #12]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007188:	b2db      	uxtb	r3, r3
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	4603      	mov	r3, r0
 800718e:	6978      	ldr	r0, [r7, #20]
 8007190:	f002 fc4d 	bl	8009a2e <USB_WritePacket>

    ep->xfer_buff  += len;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	441a      	add	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	699a      	ldr	r2, [r3, #24]
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	441a      	add	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d809      	bhi.n	80071d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d203      	bcs.n	80071d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1be      	bne.n	8007154 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	695a      	ldr	r2, [r3, #20]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d811      	bhi.n	8007206 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	2201      	movs	r2, #1
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	43db      	mvns	r3, r3
 80071fc:	6939      	ldr	r1, [r7, #16]
 80071fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007202:	4013      	ands	r3, r2
 8007204:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3720      	adds	r7, #32
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	333c      	adds	r3, #60	; 0x3c
 8007228:	3304      	adds	r3, #4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	2b01      	cmp	r3, #1
 8007244:	f040 80a0 	bne.w	8007388 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d015      	beq.n	800727e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4a72      	ldr	r2, [pc, #456]	; (8007420 <PCD_EP_OutXfrComplete_int+0x210>)
 8007256:	4293      	cmp	r3, r2
 8007258:	f240 80dd 	bls.w	8007416 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 80d7 	beq.w	8007416 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	461a      	mov	r2, r3
 8007276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800727a:	6093      	str	r3, [r2, #8]
 800727c:	e0cb      	b.n	8007416 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b00      	cmp	r3, #0
 8007286:	d009      	beq.n	800729c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007294:	461a      	mov	r2, r3
 8007296:	2320      	movs	r3, #32
 8007298:	6093      	str	r3, [r2, #8]
 800729a:	e0bc      	b.n	8007416 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f040 80b7 	bne.w	8007416 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4a5d      	ldr	r2, [pc, #372]	; (8007420 <PCD_EP_OutXfrComplete_int+0x210>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d90f      	bls.n	80072d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c6:	461a      	mov	r2, r3
 80072c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072cc:	6093      	str	r3, [r2, #8]
 80072ce:	e0a2      	b.n	8007416 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	4613      	mov	r3, r2
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80072e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	0159      	lsls	r1, r3, #5
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	440b      	add	r3, r1
 80072ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80072f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	4613      	mov	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	1a9b      	subs	r3, r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4403      	add	r3, r0
 8007306:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800730a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	4613      	mov	r3, r2
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	1a9b      	subs	r3, r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800731e:	6819      	ldr	r1, [r3, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	1a9b      	subs	r3, r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4403      	add	r3, r0
 800732e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4419      	add	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	4613      	mov	r3, r2
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	1a9b      	subs	r3, r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4403      	add	r3, r0
 8007344:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007348:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d114      	bne.n	800737a <PCD_EP_OutXfrComplete_int+0x16a>
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	4613      	mov	r3, r2
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	1a9b      	subs	r3, r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	440b      	add	r3, r1
 800735e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d108      	bne.n	800737a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6818      	ldr	r0, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007372:	461a      	mov	r2, r3
 8007374:	2101      	movs	r1, #1
 8007376:	f002 fdf1 	bl	8009f5c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f004 fd2f 	bl	800bde4 <HAL_PCD_DataOutStageCallback>
 8007386:	e046      	b.n	8007416 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4a26      	ldr	r2, [pc, #152]	; (8007424 <PCD_EP_OutXfrComplete_int+0x214>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d124      	bne.n	80073da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a6:	461a      	mov	r2, r3
 80073a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ac:	6093      	str	r3, [r2, #8]
 80073ae:	e032      	b.n	8007416 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d008      	beq.n	80073cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c6:	461a      	mov	r2, r3
 80073c8:	2320      	movs	r3, #32
 80073ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f004 fd06 	bl	800bde4 <HAL_PCD_DataOutStageCallback>
 80073d8:	e01d      	b.n	8007416 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d114      	bne.n	800740a <PCD_EP_OutXfrComplete_int+0x1fa>
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	1a9b      	subs	r3, r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d108      	bne.n	800740a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007402:	461a      	mov	r2, r3
 8007404:	2100      	movs	r1, #0
 8007406:	f002 fda9 	bl	8009f5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f004 fce7 	bl	800bde4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	4f54300a 	.word	0x4f54300a
 8007424:	4f54310a 	.word	0x4f54310a

08007428 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	333c      	adds	r3, #60	; 0x3c
 8007440:	3304      	adds	r3, #4
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4a15      	ldr	r2, [pc, #84]	; (80074b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d90e      	bls.n	800747c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007464:	2b00      	cmp	r3, #0
 8007466:	d009      	beq.n	800747c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007474:	461a      	mov	r2, r3
 8007476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f004 fc9f 	bl	800bdc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d90c      	bls.n	80074a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d108      	bne.n	80074a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800749c:	461a      	mov	r2, r3
 800749e:	2101      	movs	r1, #1
 80074a0:	f002 fd5c 	bl	8009f5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	4f54300a 	.word	0x4f54300a

080074b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
 80074c0:	4613      	mov	r3, r2
 80074c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d107      	bne.n	80074e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80074d2:	883b      	ldrh	r3, [r7, #0]
 80074d4:	0419      	lsls	r1, r3, #16
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	430a      	orrs	r2, r1
 80074de:	629a      	str	r2, [r3, #40]	; 0x28
 80074e0:	e028      	b.n	8007534 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	0c1b      	lsrs	r3, r3, #16
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	4413      	add	r3, r2
 80074ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80074f0:	2300      	movs	r3, #0
 80074f2:	73fb      	strb	r3, [r7, #15]
 80074f4:	e00d      	b.n	8007512 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	3340      	adds	r3, #64	; 0x40
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	0c1b      	lsrs	r3, r3, #16
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	4413      	add	r3, r2
 800750a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	3301      	adds	r3, #1
 8007510:	73fb      	strb	r3, [r7, #15]
 8007512:	7bfa      	ldrb	r2, [r7, #15]
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	3b01      	subs	r3, #1
 8007518:	429a      	cmp	r2, r3
 800751a:	d3ec      	bcc.n	80074f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800751c:	883b      	ldrh	r3, [r7, #0]
 800751e:	0418      	lsls	r0, r3, #16
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6819      	ldr	r1, [r3, #0]
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	3b01      	subs	r3, #1
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	4302      	orrs	r2, r0
 800752c:	3340      	adds	r3, #64	; 0x40
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	887a      	ldrh	r2, [r7, #2]
 8007554:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e264      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d075      	beq.n	8007686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800759a:	4ba3      	ldr	r3, [pc, #652]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f003 030c 	and.w	r3, r3, #12
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d00c      	beq.n	80075c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075a6:	4ba0      	ldr	r3, [pc, #640]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	d112      	bne.n	80075d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075b2:	4b9d      	ldr	r3, [pc, #628]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075be:	d10b      	bne.n	80075d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075c0:	4b99      	ldr	r3, [pc, #612]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d05b      	beq.n	8007684 <HAL_RCC_OscConfig+0x108>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d157      	bne.n	8007684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e23f      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e0:	d106      	bne.n	80075f0 <HAL_RCC_OscConfig+0x74>
 80075e2:	4b91      	ldr	r3, [pc, #580]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a90      	ldr	r2, [pc, #576]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80075e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	e01d      	b.n	800762c <HAL_RCC_OscConfig+0xb0>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075f8:	d10c      	bne.n	8007614 <HAL_RCC_OscConfig+0x98>
 80075fa:	4b8b      	ldr	r3, [pc, #556]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a8a      	ldr	r2, [pc, #552]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 8007600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	4b88      	ldr	r3, [pc, #544]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a87      	ldr	r2, [pc, #540]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 800760c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	e00b      	b.n	800762c <HAL_RCC_OscConfig+0xb0>
 8007614:	4b84      	ldr	r3, [pc, #528]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a83      	ldr	r2, [pc, #524]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 800761a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	4b81      	ldr	r3, [pc, #516]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a80      	ldr	r2, [pc, #512]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 8007626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800762a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d013      	beq.n	800765c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007634:	f7fc fbd0 	bl	8003dd8 <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800763c:	f7fc fbcc 	bl	8003dd8 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b64      	cmp	r3, #100	; 0x64
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e204      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800764e:	4b76      	ldr	r3, [pc, #472]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0f0      	beq.n	800763c <HAL_RCC_OscConfig+0xc0>
 800765a:	e014      	b.n	8007686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800765c:	f7fc fbbc 	bl	8003dd8 <HAL_GetTick>
 8007660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007662:	e008      	b.n	8007676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007664:	f7fc fbb8 	bl	8003dd8 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b64      	cmp	r3, #100	; 0x64
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e1f0      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007676:	4b6c      	ldr	r3, [pc, #432]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f0      	bne.n	8007664 <HAL_RCC_OscConfig+0xe8>
 8007682:	e000      	b.n	8007686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d063      	beq.n	800775a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007692:	4b65      	ldr	r3, [pc, #404]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 030c 	and.w	r3, r3, #12
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800769e:	4b62      	ldr	r3, [pc, #392]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d11c      	bne.n	80076e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076aa:	4b5f      	ldr	r3, [pc, #380]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d116      	bne.n	80076e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076b6:	4b5c      	ldr	r3, [pc, #368]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_RCC_OscConfig+0x152>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d001      	beq.n	80076ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e1c4      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ce:	4b56      	ldr	r3, [pc, #344]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	4952      	ldr	r1, [pc, #328]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076e2:	e03a      	b.n	800775a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d020      	beq.n	800772e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076ec:	4b4f      	ldr	r3, [pc, #316]	; (800782c <HAL_RCC_OscConfig+0x2b0>)
 80076ee:	2201      	movs	r2, #1
 80076f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f2:	f7fc fb71 	bl	8003dd8 <HAL_GetTick>
 80076f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076f8:	e008      	b.n	800770c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076fa:	f7fc fb6d 	bl	8003dd8 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	2b02      	cmp	r3, #2
 8007706:	d901      	bls.n	800770c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e1a5      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800770c:	4b46      	ldr	r3, [pc, #280]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0f0      	beq.n	80076fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007718:	4b43      	ldr	r3, [pc, #268]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	4940      	ldr	r1, [pc, #256]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 8007728:	4313      	orrs	r3, r2
 800772a:	600b      	str	r3, [r1, #0]
 800772c:	e015      	b.n	800775a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800772e:	4b3f      	ldr	r3, [pc, #252]	; (800782c <HAL_RCC_OscConfig+0x2b0>)
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007734:	f7fc fb50 	bl	8003dd8 <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800773c:	f7fc fb4c 	bl	8003dd8 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e184      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800774e:	4b36      	ldr	r3, [pc, #216]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f0      	bne.n	800773c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0308 	and.w	r3, r3, #8
 8007762:	2b00      	cmp	r3, #0
 8007764:	d030      	beq.n	80077c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d016      	beq.n	800779c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800776e:	4b30      	ldr	r3, [pc, #192]	; (8007830 <HAL_RCC_OscConfig+0x2b4>)
 8007770:	2201      	movs	r2, #1
 8007772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007774:	f7fc fb30 	bl	8003dd8 <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800777c:	f7fc fb2c 	bl	8003dd8 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e164      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800778e:	4b26      	ldr	r3, [pc, #152]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 8007790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0f0      	beq.n	800777c <HAL_RCC_OscConfig+0x200>
 800779a:	e015      	b.n	80077c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800779c:	4b24      	ldr	r3, [pc, #144]	; (8007830 <HAL_RCC_OscConfig+0x2b4>)
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077a2:	f7fc fb19 	bl	8003dd8 <HAL_GetTick>
 80077a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077a8:	e008      	b.n	80077bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077aa:	f7fc fb15 	bl	8003dd8 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d901      	bls.n	80077bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e14d      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077bc:	4b1a      	ldr	r3, [pc, #104]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80077be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1f0      	bne.n	80077aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80a0 	beq.w	8007916 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077d6:	2300      	movs	r3, #0
 80077d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077da:	4b13      	ldr	r3, [pc, #76]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10f      	bne.n	8007806 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	4a0e      	ldr	r2, [pc, #56]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80077f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f4:	6413      	str	r3, [r2, #64]	; 0x40
 80077f6:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <HAL_RCC_OscConfig+0x2ac>)
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fe:	60bb      	str	r3, [r7, #8]
 8007800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007802:	2301      	movs	r3, #1
 8007804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007806:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <HAL_RCC_OscConfig+0x2b8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780e:	2b00      	cmp	r3, #0
 8007810:	d121      	bne.n	8007856 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007812:	4b08      	ldr	r3, [pc, #32]	; (8007834 <HAL_RCC_OscConfig+0x2b8>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a07      	ldr	r2, [pc, #28]	; (8007834 <HAL_RCC_OscConfig+0x2b8>)
 8007818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800781c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800781e:	f7fc fadb 	bl	8003dd8 <HAL_GetTick>
 8007822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007824:	e011      	b.n	800784a <HAL_RCC_OscConfig+0x2ce>
 8007826:	bf00      	nop
 8007828:	40023800 	.word	0x40023800
 800782c:	42470000 	.word	0x42470000
 8007830:	42470e80 	.word	0x42470e80
 8007834:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007838:	f7fc face 	bl	8003dd8 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e106      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800784a:	4b85      	ldr	r3, [pc, #532]	; (8007a60 <HAL_RCC_OscConfig+0x4e4>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0f0      	beq.n	8007838 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d106      	bne.n	800786c <HAL_RCC_OscConfig+0x2f0>
 800785e:	4b81      	ldr	r3, [pc, #516]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 8007860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007862:	4a80      	ldr	r2, [pc, #512]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 8007864:	f043 0301 	orr.w	r3, r3, #1
 8007868:	6713      	str	r3, [r2, #112]	; 0x70
 800786a:	e01c      	b.n	80078a6 <HAL_RCC_OscConfig+0x32a>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	2b05      	cmp	r3, #5
 8007872:	d10c      	bne.n	800788e <HAL_RCC_OscConfig+0x312>
 8007874:	4b7b      	ldr	r3, [pc, #492]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 8007876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007878:	4a7a      	ldr	r2, [pc, #488]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 800787a:	f043 0304 	orr.w	r3, r3, #4
 800787e:	6713      	str	r3, [r2, #112]	; 0x70
 8007880:	4b78      	ldr	r3, [pc, #480]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 8007882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007884:	4a77      	ldr	r2, [pc, #476]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	6713      	str	r3, [r2, #112]	; 0x70
 800788c:	e00b      	b.n	80078a6 <HAL_RCC_OscConfig+0x32a>
 800788e:	4b75      	ldr	r3, [pc, #468]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 8007890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007892:	4a74      	ldr	r2, [pc, #464]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 8007894:	f023 0301 	bic.w	r3, r3, #1
 8007898:	6713      	str	r3, [r2, #112]	; 0x70
 800789a:	4b72      	ldr	r3, [pc, #456]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 800789c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789e:	4a71      	ldr	r2, [pc, #452]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 80078a0:	f023 0304 	bic.w	r3, r3, #4
 80078a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d015      	beq.n	80078da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ae:	f7fc fa93 	bl	8003dd8 <HAL_GetTick>
 80078b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b4:	e00a      	b.n	80078cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078b6:	f7fc fa8f 	bl	8003dd8 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d901      	bls.n	80078cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e0c5      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078cc:	4b65      	ldr	r3, [pc, #404]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 80078ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0ee      	beq.n	80078b6 <HAL_RCC_OscConfig+0x33a>
 80078d8:	e014      	b.n	8007904 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078da:	f7fc fa7d 	bl	8003dd8 <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e0:	e00a      	b.n	80078f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078e2:	f7fc fa79 	bl	8003dd8 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d901      	bls.n	80078f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e0af      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f8:	4b5a      	ldr	r3, [pc, #360]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 80078fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1ee      	bne.n	80078e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007904:	7dfb      	ldrb	r3, [r7, #23]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d105      	bne.n	8007916 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800790a:	4b56      	ldr	r3, [pc, #344]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	4a55      	ldr	r2, [pc, #340]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 8007910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007914:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 809b 	beq.w	8007a56 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007920:	4b50      	ldr	r3, [pc, #320]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 030c 	and.w	r3, r3, #12
 8007928:	2b08      	cmp	r3, #8
 800792a:	d05c      	beq.n	80079e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	2b02      	cmp	r3, #2
 8007932:	d141      	bne.n	80079b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007934:	4b4c      	ldr	r3, [pc, #304]	; (8007a68 <HAL_RCC_OscConfig+0x4ec>)
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800793a:	f7fc fa4d 	bl	8003dd8 <HAL_GetTick>
 800793e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007942:	f7fc fa49 	bl	8003dd8 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e081      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007954:	4b43      	ldr	r3, [pc, #268]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1f0      	bne.n	8007942 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	69da      	ldr	r2, [r3, #28]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	431a      	orrs	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	019b      	lsls	r3, r3, #6
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	3b01      	subs	r3, #1
 800797a:	041b      	lsls	r3, r3, #16
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	061b      	lsls	r3, r3, #24
 8007984:	4937      	ldr	r1, [pc, #220]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 8007986:	4313      	orrs	r3, r2
 8007988:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800798a:	4b37      	ldr	r3, [pc, #220]	; (8007a68 <HAL_RCC_OscConfig+0x4ec>)
 800798c:	2201      	movs	r2, #1
 800798e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007990:	f7fc fa22 	bl	8003dd8 <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007998:	f7fc fa1e 	bl	8003dd8 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e056      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079aa:	4b2e      	ldr	r3, [pc, #184]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0f0      	beq.n	8007998 <HAL_RCC_OscConfig+0x41c>
 80079b6:	e04e      	b.n	8007a56 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079b8:	4b2b      	ldr	r3, [pc, #172]	; (8007a68 <HAL_RCC_OscConfig+0x4ec>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079be:	f7fc fa0b 	bl	8003dd8 <HAL_GetTick>
 80079c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c4:	e008      	b.n	80079d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079c6:	f7fc fa07 	bl	8003dd8 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d901      	bls.n	80079d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e03f      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d8:	4b22      	ldr	r3, [pc, #136]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1f0      	bne.n	80079c6 <HAL_RCC_OscConfig+0x44a>
 80079e4:	e037      	b.n	8007a56 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d101      	bne.n	80079f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e032      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079f2:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <HAL_RCC_OscConfig+0x4e8>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d028      	beq.n	8007a52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d121      	bne.n	8007a52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d11a      	bne.n	8007a52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a22:	4013      	ands	r3, r2
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a28:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d111      	bne.n	8007a52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	085b      	lsrs	r3, r3, #1
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d107      	bne.n	8007a52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d001      	beq.n	8007a56 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e000      	b.n	8007a58 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40007000 	.word	0x40007000
 8007a64:	40023800 	.word	0x40023800
 8007a68:	42470060 	.word	0x42470060

08007a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e0cc      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a80:	4b68      	ldr	r3, [pc, #416]	; (8007c24 <HAL_RCC_ClockConfig+0x1b8>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d90c      	bls.n	8007aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a8e:	4b65      	ldr	r3, [pc, #404]	; (8007c24 <HAL_RCC_ClockConfig+0x1b8>)
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a96:	4b63      	ldr	r3, [pc, #396]	; (8007c24 <HAL_RCC_ClockConfig+0x1b8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d001      	beq.n	8007aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e0b8      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d020      	beq.n	8007af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ac0:	4b59      	ldr	r3, [pc, #356]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	4a58      	ldr	r2, [pc, #352]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ad8:	4b53      	ldr	r3, [pc, #332]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	4a52      	ldr	r2, [pc, #328]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ae4:	4b50      	ldr	r3, [pc, #320]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	494d      	ldr	r1, [pc, #308]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d044      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d107      	bne.n	8007b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b0a:	4b47      	ldr	r3, [pc, #284]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d119      	bne.n	8007b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e07f      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d003      	beq.n	8007b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d107      	bne.n	8007b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b2a:	4b3f      	ldr	r3, [pc, #252]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d109      	bne.n	8007b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e06f      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b3a:	4b3b      	ldr	r3, [pc, #236]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e067      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b4a:	4b37      	ldr	r3, [pc, #220]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f023 0203 	bic.w	r2, r3, #3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	4934      	ldr	r1, [pc, #208]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b5c:	f7fc f93c 	bl	8003dd8 <HAL_GetTick>
 8007b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b62:	e00a      	b.n	8007b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b64:	f7fc f938 	bl	8003dd8 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e04f      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b7a:	4b2b      	ldr	r3, [pc, #172]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f003 020c 	and.w	r2, r3, #12
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d1eb      	bne.n	8007b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b8c:	4b25      	ldr	r3, [pc, #148]	; (8007c24 <HAL_RCC_ClockConfig+0x1b8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0307 	and.w	r3, r3, #7
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d20c      	bcs.n	8007bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b9a:	4b22      	ldr	r3, [pc, #136]	; (8007c24 <HAL_RCC_ClockConfig+0x1b8>)
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba2:	4b20      	ldr	r3, [pc, #128]	; (8007c24 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d001      	beq.n	8007bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e032      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d008      	beq.n	8007bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bc0:	4b19      	ldr	r3, [pc, #100]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	4916      	ldr	r1, [pc, #88]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bde:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	490e      	ldr	r1, [pc, #56]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bf2:	f000 f821 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	091b      	lsrs	r3, r3, #4
 8007bfe:	f003 030f 	and.w	r3, r3, #15
 8007c02:	490a      	ldr	r1, [pc, #40]	; (8007c2c <HAL_RCC_ClockConfig+0x1c0>)
 8007c04:	5ccb      	ldrb	r3, [r1, r3]
 8007c06:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0a:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <HAL_RCC_ClockConfig+0x1c4>)
 8007c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c0e:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <HAL_RCC_ClockConfig+0x1c8>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fc f89c 	bl	8003d50 <HAL_InitTick>

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40023c00 	.word	0x40023c00
 8007c28:	40023800 	.word	0x40023800
 8007c2c:	0800d95c 	.word	0x0800d95c
 8007c30:	2000000c 	.word	0x2000000c
 8007c34:	20000010 	.word	0x20000010

08007c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	607b      	str	r3, [r7, #4]
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c50:	4b67      	ldr	r3, [pc, #412]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 030c 	and.w	r3, r3, #12
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	d00d      	beq.n	8007c78 <HAL_RCC_GetSysClockFreq+0x40>
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	f200 80bd 	bhi.w	8007ddc <HAL_RCC_GetSysClockFreq+0x1a4>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <HAL_RCC_GetSysClockFreq+0x34>
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d003      	beq.n	8007c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c6a:	e0b7      	b.n	8007ddc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c6c:	4b61      	ldr	r3, [pc, #388]	; (8007df4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c6e:	60bb      	str	r3, [r7, #8]
       break;
 8007c70:	e0b7      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c72:	4b60      	ldr	r3, [pc, #384]	; (8007df4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c74:	60bb      	str	r3, [r7, #8]
      break;
 8007c76:	e0b4      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c78:	4b5d      	ldr	r3, [pc, #372]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c82:	4b5b      	ldr	r3, [pc, #364]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d04d      	beq.n	8007d2a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c8e:	4b58      	ldr	r3, [pc, #352]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	099b      	lsrs	r3, r3, #6
 8007c94:	461a      	mov	r2, r3
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c9e:	f04f 0100 	mov.w	r1, #0
 8007ca2:	ea02 0800 	and.w	r8, r2, r0
 8007ca6:	ea03 0901 	and.w	r9, r3, r1
 8007caa:	4640      	mov	r0, r8
 8007cac:	4649      	mov	r1, r9
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	f04f 0300 	mov.w	r3, #0
 8007cb6:	014b      	lsls	r3, r1, #5
 8007cb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007cbc:	0142      	lsls	r2, r0, #5
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	ebb0 0008 	subs.w	r0, r0, r8
 8007cc6:	eb61 0109 	sbc.w	r1, r1, r9
 8007cca:	f04f 0200 	mov.w	r2, #0
 8007cce:	f04f 0300 	mov.w	r3, #0
 8007cd2:	018b      	lsls	r3, r1, #6
 8007cd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007cd8:	0182      	lsls	r2, r0, #6
 8007cda:	1a12      	subs	r2, r2, r0
 8007cdc:	eb63 0301 	sbc.w	r3, r3, r1
 8007ce0:	f04f 0000 	mov.w	r0, #0
 8007ce4:	f04f 0100 	mov.w	r1, #0
 8007ce8:	00d9      	lsls	r1, r3, #3
 8007cea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cee:	00d0      	lsls	r0, r2, #3
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	eb12 0208 	adds.w	r2, r2, r8
 8007cf8:	eb43 0309 	adc.w	r3, r3, r9
 8007cfc:	f04f 0000 	mov.w	r0, #0
 8007d00:	f04f 0100 	mov.w	r1, #0
 8007d04:	0299      	lsls	r1, r3, #10
 8007d06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007d0a:	0290      	lsls	r0, r2, #10
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4610      	mov	r0, r2
 8007d12:	4619      	mov	r1, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	461a      	mov	r2, r3
 8007d18:	f04f 0300 	mov.w	r3, #0
 8007d1c:	f7f9 f846 	bl	8000dac <__aeabi_uldivmod>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4613      	mov	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	e04a      	b.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d2a:	4b31      	ldr	r3, [pc, #196]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	099b      	lsrs	r3, r3, #6
 8007d30:	461a      	mov	r2, r3
 8007d32:	f04f 0300 	mov.w	r3, #0
 8007d36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d3a:	f04f 0100 	mov.w	r1, #0
 8007d3e:	ea02 0400 	and.w	r4, r2, r0
 8007d42:	ea03 0501 	and.w	r5, r3, r1
 8007d46:	4620      	mov	r0, r4
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f04f 0200 	mov.w	r2, #0
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	014b      	lsls	r3, r1, #5
 8007d54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d58:	0142      	lsls	r2, r0, #5
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	1b00      	subs	r0, r0, r4
 8007d60:	eb61 0105 	sbc.w	r1, r1, r5
 8007d64:	f04f 0200 	mov.w	r2, #0
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	018b      	lsls	r3, r1, #6
 8007d6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d72:	0182      	lsls	r2, r0, #6
 8007d74:	1a12      	subs	r2, r2, r0
 8007d76:	eb63 0301 	sbc.w	r3, r3, r1
 8007d7a:	f04f 0000 	mov.w	r0, #0
 8007d7e:	f04f 0100 	mov.w	r1, #0
 8007d82:	00d9      	lsls	r1, r3, #3
 8007d84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d88:	00d0      	lsls	r0, r2, #3
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	1912      	adds	r2, r2, r4
 8007d90:	eb45 0303 	adc.w	r3, r5, r3
 8007d94:	f04f 0000 	mov.w	r0, #0
 8007d98:	f04f 0100 	mov.w	r1, #0
 8007d9c:	0299      	lsls	r1, r3, #10
 8007d9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007da2:	0290      	lsls	r0, r2, #10
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4610      	mov	r0, r2
 8007daa:	4619      	mov	r1, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	461a      	mov	r2, r3
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	f7f8 fffa 	bl	8000dac <__aeabi_uldivmod>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007dc0:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	0c1b      	lsrs	r3, r3, #16
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	3301      	adds	r3, #1
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd8:	60bb      	str	r3, [r7, #8]
      break;
 8007dda:	e002      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ddc:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007dde:	60bb      	str	r3, [r7, #8]
      break;
 8007de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007de2:	68bb      	ldr	r3, [r7, #8]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007dee:	bf00      	nop
 8007df0:	40023800 	.word	0x40023800
 8007df4:	00f42400 	.word	0x00f42400

08007df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dfc:	4b03      	ldr	r3, [pc, #12]	; (8007e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	2000000c 	.word	0x2000000c

08007e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e14:	f7ff fff0 	bl	8007df8 <HAL_RCC_GetHCLKFreq>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	0a9b      	lsrs	r3, r3, #10
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	4903      	ldr	r1, [pc, #12]	; (8007e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e26:	5ccb      	ldrb	r3, [r1, r3]
 8007e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40023800 	.word	0x40023800
 8007e34:	0800d96c 	.word	0x0800d96c

08007e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e07b      	b.n	8007f42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d108      	bne.n	8007e64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e5a:	d009      	beq.n	8007e70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	61da      	str	r2, [r3, #28]
 8007e62:	e005      	b.n	8007e70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fb f9d8 	bl	8003240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ea6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eea:	431a      	orrs	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef4:	ea42 0103 	orr.w	r1, r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	0c1b      	lsrs	r3, r3, #16
 8007f0e:	f003 0104 	and.w	r1, r3, #4
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	f003 0210 	and.w	r2, r3, #16
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b088      	sub	sp, #32
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	603b      	str	r3, [r7, #0]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_SPI_Transmit+0x22>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e126      	b.n	80081ba <HAL_SPI_Transmit+0x270>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f74:	f7fb ff30 	bl	8003dd8 <HAL_GetTick>
 8007f78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d002      	beq.n	8007f90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f8e:	e10b      	b.n	80081a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <HAL_SPI_Transmit+0x52>
 8007f96:	88fb      	ldrh	r3, [r7, #6]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fa0:	e102      	b.n	80081a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	88fa      	ldrh	r2, [r7, #6]
 8007fc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fe8:	d10f      	bne.n	800800a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ff8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008008:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d007      	beq.n	8008028 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008026:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008030:	d14b      	bne.n	80080ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_SPI_Transmit+0xf6>
 800803a:	8afb      	ldrh	r3, [r7, #22]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d13e      	bne.n	80080be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008044:	881a      	ldrh	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008050:	1c9a      	adds	r2, r3, #2
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800805a:	b29b      	uxth	r3, r3
 800805c:	3b01      	subs	r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008064:	e02b      	b.n	80080be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b02      	cmp	r3, #2
 8008072:	d112      	bne.n	800809a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008078:	881a      	ldrh	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	1c9a      	adds	r2, r3, #2
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800808e:	b29b      	uxth	r3, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	b29a      	uxth	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	86da      	strh	r2, [r3, #54]	; 0x36
 8008098:	e011      	b.n	80080be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800809a:	f7fb fe9d 	bl	8003dd8 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d803      	bhi.n	80080b2 <HAL_SPI_Transmit+0x168>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b0:	d102      	bne.n	80080b8 <HAL_SPI_Transmit+0x16e>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d102      	bne.n	80080be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080bc:	e074      	b.n	80081a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1ce      	bne.n	8008066 <HAL_SPI_Transmit+0x11c>
 80080c8:	e04c      	b.n	8008164 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <HAL_SPI_Transmit+0x18e>
 80080d2:	8afb      	ldrh	r3, [r7, #22]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d140      	bne.n	800815a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	330c      	adds	r3, #12
 80080e2:	7812      	ldrb	r2, [r2, #0]
 80080e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080fe:	e02c      	b.n	800815a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b02      	cmp	r3, #2
 800810c:	d113      	bne.n	8008136 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	330c      	adds	r3, #12
 8008118:	7812      	ldrb	r2, [r2, #0]
 800811a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b01      	subs	r3, #1
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	86da      	strh	r2, [r3, #54]	; 0x36
 8008134:	e011      	b.n	800815a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008136:	f7fb fe4f 	bl	8003dd8 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d803      	bhi.n	800814e <HAL_SPI_Transmit+0x204>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d102      	bne.n	8008154 <HAL_SPI_Transmit+0x20a>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008158:	e026      	b.n	80081a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800815e:	b29b      	uxth	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1cd      	bne.n	8008100 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fbcb 	bl	8008904 <SPI_EndRxTxTransaction>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2220      	movs	r2, #32
 8008178:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10a      	bne.n	8008198 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008182:	2300      	movs	r3, #0
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	613b      	str	r3, [r7, #16]
 8008196:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	77fb      	strb	r3, [r7, #31]
 80081a4:	e000      	b.n	80081a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80081a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3720      	adds	r7, #32
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b088      	sub	sp, #32
 80081c6:	af02      	add	r7, sp, #8
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	603b      	str	r3, [r7, #0]
 80081ce:	4613      	mov	r3, r2
 80081d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081de:	d112      	bne.n	8008206 <HAL_SPI_Receive+0x44>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10e      	bne.n	8008206 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2204      	movs	r2, #4
 80081ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80081f0:	88fa      	ldrh	r2, [r7, #6]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	4613      	mov	r3, r2
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	68b9      	ldr	r1, [r7, #8]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f8f1 	bl	80083e4 <HAL_SPI_TransmitReceive>
 8008202:	4603      	mov	r3, r0
 8008204:	e0ea      	b.n	80083dc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800820c:	2b01      	cmp	r3, #1
 800820e:	d101      	bne.n	8008214 <HAL_SPI_Receive+0x52>
 8008210:	2302      	movs	r3, #2
 8008212:	e0e3      	b.n	80083dc <HAL_SPI_Receive+0x21a>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800821c:	f7fb fddc 	bl	8003dd8 <HAL_GetTick>
 8008220:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b01      	cmp	r3, #1
 800822c:	d002      	beq.n	8008234 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800822e:	2302      	movs	r3, #2
 8008230:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008232:	e0ca      	b.n	80083ca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <HAL_SPI_Receive+0x7e>
 800823a:	88fb      	ldrh	r3, [r7, #6]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d102      	bne.n	8008246 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008244:	e0c1      	b.n	80083ca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2204      	movs	r2, #4
 800824a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	88fa      	ldrh	r2, [r7, #6]
 800825e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	88fa      	ldrh	r2, [r7, #6]
 8008264:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800828c:	d10f      	bne.n	80082ae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800829c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b8:	2b40      	cmp	r3, #64	; 0x40
 80082ba:	d007      	beq.n	80082cc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d162      	bne.n	800839a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80082d4:	e02e      	b.n	8008334 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d115      	bne.n	8008310 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f103 020c 	add.w	r2, r3, #12
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f0:	7812      	ldrb	r2, [r2, #0]
 80082f2:	b2d2      	uxtb	r2, r2
 80082f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008304:	b29b      	uxth	r3, r3
 8008306:	3b01      	subs	r3, #1
 8008308:	b29a      	uxth	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800830e:	e011      	b.n	8008334 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008310:	f7fb fd62 	bl	8003dd8 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d803      	bhi.n	8008328 <HAL_SPI_Receive+0x166>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008326:	d102      	bne.n	800832e <HAL_SPI_Receive+0x16c>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008332:	e04a      	b.n	80083ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008338:	b29b      	uxth	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1cb      	bne.n	80082d6 <HAL_SPI_Receive+0x114>
 800833e:	e031      	b.n	80083a4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b01      	cmp	r3, #1
 800834c:	d113      	bne.n	8008376 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68da      	ldr	r2, [r3, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008358:	b292      	uxth	r2, r2
 800835a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	1c9a      	adds	r2, r3, #2
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800836a:	b29b      	uxth	r3, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008374:	e011      	b.n	800839a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008376:	f7fb fd2f 	bl	8003dd8 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	429a      	cmp	r2, r3
 8008384:	d803      	bhi.n	800838e <HAL_SPI_Receive+0x1cc>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838c:	d102      	bne.n	8008394 <HAL_SPI_Receive+0x1d2>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d102      	bne.n	800839a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008398:	e017      	b.n	80083ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800839e:	b29b      	uxth	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1cd      	bne.n	8008340 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 fa45 	bl	8008838 <SPI_EndRxTransaction>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2220      	movs	r2, #32
 80083b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	75fb      	strb	r3, [r7, #23]
 80083c6:	e000      	b.n	80083ca <HAL_SPI_Receive+0x208>
  }

error :
 80083c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08c      	sub	sp, #48	; 0x30
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083f2:	2301      	movs	r3, #1
 80083f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008402:	2b01      	cmp	r3, #1
 8008404:	d101      	bne.n	800840a <HAL_SPI_TransmitReceive+0x26>
 8008406:	2302      	movs	r3, #2
 8008408:	e18a      	b.n	8008720 <HAL_SPI_TransmitReceive+0x33c>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008412:	f7fb fce1 	bl	8003dd8 <HAL_GetTick>
 8008416:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800841e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008428:	887b      	ldrh	r3, [r7, #2]
 800842a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800842c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008430:	2b01      	cmp	r3, #1
 8008432:	d00f      	beq.n	8008454 <HAL_SPI_TransmitReceive+0x70>
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800843a:	d107      	bne.n	800844c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d103      	bne.n	800844c <HAL_SPI_TransmitReceive+0x68>
 8008444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008448:	2b04      	cmp	r3, #4
 800844a:	d003      	beq.n	8008454 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800844c:	2302      	movs	r3, #2
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008452:	e15b      	b.n	800870c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d005      	beq.n	8008466 <HAL_SPI_TransmitReceive+0x82>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <HAL_SPI_TransmitReceive+0x82>
 8008460:	887b      	ldrh	r3, [r7, #2]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d103      	bne.n	800846e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800846c:	e14e      	b.n	800870c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b04      	cmp	r3, #4
 8008478:	d003      	beq.n	8008482 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2205      	movs	r2, #5
 800847e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	887a      	ldrh	r2, [r7, #2]
 8008492:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	887a      	ldrh	r2, [r7, #2]
 8008498:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	887a      	ldrh	r2, [r7, #2]
 80084a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	887a      	ldrh	r2, [r7, #2]
 80084aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d007      	beq.n	80084d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084de:	d178      	bne.n	80085d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <HAL_SPI_TransmitReceive+0x10a>
 80084e8:	8b7b      	ldrh	r3, [r7, #26]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d166      	bne.n	80085bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f2:	881a      	ldrh	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	1c9a      	adds	r2, r3, #2
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	b29a      	uxth	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008512:	e053      	b.n	80085bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b02      	cmp	r3, #2
 8008520:	d11b      	bne.n	800855a <HAL_SPI_TransmitReceive+0x176>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008526:	b29b      	uxth	r3, r3
 8008528:	2b00      	cmp	r3, #0
 800852a:	d016      	beq.n	800855a <HAL_SPI_TransmitReceive+0x176>
 800852c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852e:	2b01      	cmp	r3, #1
 8008530:	d113      	bne.n	800855a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	881a      	ldrh	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008542:	1c9a      	adds	r2, r3, #2
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800854c:	b29b      	uxth	r3, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	b29a      	uxth	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b01      	cmp	r3, #1
 8008566:	d119      	bne.n	800859c <HAL_SPI_TransmitReceive+0x1b8>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800856c:	b29b      	uxth	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d014      	beq.n	800859c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	b292      	uxth	r2, r2
 800857e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008584:	1c9a      	adds	r2, r3, #2
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008598:	2301      	movs	r3, #1
 800859a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800859c:	f7fb fc1c 	bl	8003dd8 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d807      	bhi.n	80085bc <HAL_SPI_TransmitReceive+0x1d8>
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b2:	d003      	beq.n	80085bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085ba:	e0a7      	b.n	800870c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1a6      	bne.n	8008514 <HAL_SPI_TransmitReceive+0x130>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1a1      	bne.n	8008514 <HAL_SPI_TransmitReceive+0x130>
 80085d0:	e07c      	b.n	80086cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <HAL_SPI_TransmitReceive+0x1fc>
 80085da:	8b7b      	ldrh	r3, [r7, #26]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d16b      	bne.n	80086b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	330c      	adds	r3, #12
 80085ea:	7812      	ldrb	r2, [r2, #0]
 80085ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008606:	e057      	b.n	80086b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b02      	cmp	r3, #2
 8008614:	d11c      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x26c>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800861a:	b29b      	uxth	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d017      	beq.n	8008650 <HAL_SPI_TransmitReceive+0x26c>
 8008620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008622:	2b01      	cmp	r3, #1
 8008624:	d114      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	330c      	adds	r3, #12
 8008630:	7812      	ldrb	r2, [r2, #0]
 8008632:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008642:	b29b      	uxth	r3, r3
 8008644:	3b01      	subs	r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b01      	cmp	r3, #1
 800865c:	d119      	bne.n	8008692 <HAL_SPI_TransmitReceive+0x2ae>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008662:	b29b      	uxth	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d014      	beq.n	8008692 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	b2d2      	uxtb	r2, r2
 8008674:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008684:	b29b      	uxth	r3, r3
 8008686:	3b01      	subs	r3, #1
 8008688:	b29a      	uxth	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800868e:	2301      	movs	r3, #1
 8008690:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008692:	f7fb fba1 	bl	8003dd8 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800869e:	429a      	cmp	r2, r3
 80086a0:	d803      	bhi.n	80086aa <HAL_SPI_TransmitReceive+0x2c6>
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a8:	d102      	bne.n	80086b0 <HAL_SPI_TransmitReceive+0x2cc>
 80086aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d103      	bne.n	80086b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80086b6:	e029      	b.n	800870c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1a2      	bne.n	8008608 <HAL_SPI_TransmitReceive+0x224>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d19d      	bne.n	8008608 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f917 	bl	8008904 <SPI_EndRxTxTransaction>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d006      	beq.n	80086ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2220      	movs	r2, #32
 80086e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80086e8:	e010      	b.n	800870c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10b      	bne.n	800870a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086f2:	2300      	movs	r3, #0
 80086f4:	617b      	str	r3, [r7, #20]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	617b      	str	r3, [r7, #20]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	e000      	b.n	800870c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800870a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800871c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008720:	4618      	mov	r0, r3
 8008722:	3730      	adds	r7, #48	; 0x30
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	4613      	mov	r3, r2
 8008736:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008738:	f7fb fb4e 	bl	8003dd8 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	4413      	add	r3, r2
 8008746:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008748:	f7fb fb46 	bl	8003dd8 <HAL_GetTick>
 800874c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800874e:	4b39      	ldr	r3, [pc, #228]	; (8008834 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	015b      	lsls	r3, r3, #5
 8008754:	0d1b      	lsrs	r3, r3, #20
 8008756:	69fa      	ldr	r2, [r7, #28]
 8008758:	fb02 f303 	mul.w	r3, r2, r3
 800875c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800875e:	e054      	b.n	800880a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008766:	d050      	beq.n	800880a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008768:	f7fb fb36 	bl	8003dd8 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	429a      	cmp	r2, r3
 8008776:	d902      	bls.n	800877e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d13d      	bne.n	80087fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800878c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008796:	d111      	bne.n	80087bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087a0:	d004      	beq.n	80087ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087aa:	d107      	bne.n	80087bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087c4:	d10f      	bne.n	80087e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e017      	b.n	800882a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	3b01      	subs	r3, #1
 8008808:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4013      	ands	r3, r2
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	429a      	cmp	r2, r3
 8008818:	bf0c      	ite	eq
 800881a:	2301      	moveq	r3, #1
 800881c:	2300      	movne	r3, #0
 800881e:	b2db      	uxtb	r3, r3
 8008820:	461a      	mov	r2, r3
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	429a      	cmp	r2, r3
 8008826:	d19b      	bne.n	8008760 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3720      	adds	r7, #32
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	2000000c 	.word	0x2000000c

08008838 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af02      	add	r7, sp, #8
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800884c:	d111      	bne.n	8008872 <SPI_EndRxTransaction+0x3a>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008856:	d004      	beq.n	8008862 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008860:	d107      	bne.n	8008872 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008870:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800887a:	d12a      	bne.n	80088d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008884:	d012      	beq.n	80088ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2200      	movs	r2, #0
 800888e:	2180      	movs	r1, #128	; 0x80
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f7ff ff49 	bl	8008728 <SPI_WaitFlagStateUntilTimeout>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d02d      	beq.n	80088f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a0:	f043 0220 	orr.w	r2, r3, #32
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e026      	b.n	80088fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2200      	movs	r2, #0
 80088b4:	2101      	movs	r1, #1
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f7ff ff36 	bl	8008728 <SPI_WaitFlagStateUntilTimeout>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d01a      	beq.n	80088f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c6:	f043 0220 	orr.w	r2, r3, #32
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e013      	b.n	80088fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2200      	movs	r2, #0
 80088da:	2101      	movs	r1, #1
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f7ff ff23 	bl	8008728 <SPI_WaitFlagStateUntilTimeout>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d007      	beq.n	80088f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ec:	f043 0220 	orr.w	r2, r3, #32
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e000      	b.n	80088fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b088      	sub	sp, #32
 8008908:	af02      	add	r7, sp, #8
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008910:	4b1b      	ldr	r3, [pc, #108]	; (8008980 <SPI_EndRxTxTransaction+0x7c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a1b      	ldr	r2, [pc, #108]	; (8008984 <SPI_EndRxTxTransaction+0x80>)
 8008916:	fba2 2303 	umull	r2, r3, r2, r3
 800891a:	0d5b      	lsrs	r3, r3, #21
 800891c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008920:	fb02 f303 	mul.w	r3, r2, r3
 8008924:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800892e:	d112      	bne.n	8008956 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2200      	movs	r2, #0
 8008938:	2180      	movs	r1, #128	; 0x80
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7ff fef4 	bl	8008728 <SPI_WaitFlagStateUntilTimeout>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d016      	beq.n	8008974 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894a:	f043 0220 	orr.w	r2, r3, #32
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e00f      	b.n	8008976 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	3b01      	subs	r3, #1
 8008960:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800896c:	2b80      	cmp	r3, #128	; 0x80
 800896e:	d0f2      	beq.n	8008956 <SPI_EndRxTxTransaction+0x52>
 8008970:	e000      	b.n	8008974 <SPI_EndRxTxTransaction+0x70>
        break;
 8008972:	bf00      	nop
  }

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	2000000c 	.word	0x2000000c
 8008984:	165e9f81 	.word	0x165e9f81

08008988 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008988:	b084      	sub	sp, #16
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	f107 001c 	add.w	r0, r7, #28
 8008996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	2b01      	cmp	r3, #1
 800899e:	d122      	bne.n	80089e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80089b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d105      	bne.n	80089da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f001 fb1c 	bl	800a018 <USB_CoreReset>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73fb      	strb	r3, [r7, #15]
 80089e4:	e01a      	b.n	8008a1c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 fb10 	bl	800a018 <USB_CoreReset>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d106      	bne.n	8008a10 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	639a      	str	r2, [r3, #56]	; 0x38
 8008a0e:	e005      	b.n	8008a1c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d10b      	bne.n	8008a3a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f043 0206 	orr.w	r2, r3, #6
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f043 0220 	orr.w	r2, r3, #32
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a46:	b004      	add	sp, #16
 8008a48:	4770      	bx	lr
	...

08008a4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	4613      	mov	r3, r2
 8008a58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d165      	bne.n	8008b2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	4a41      	ldr	r2, [pc, #260]	; (8008b68 <USB_SetTurnaroundTime+0x11c>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d906      	bls.n	8008a76 <USB_SetTurnaroundTime+0x2a>
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4a40      	ldr	r2, [pc, #256]	; (8008b6c <USB_SetTurnaroundTime+0x120>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d202      	bcs.n	8008a76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008a70:	230f      	movs	r3, #15
 8008a72:	617b      	str	r3, [r7, #20]
 8008a74:	e062      	b.n	8008b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	4a3c      	ldr	r2, [pc, #240]	; (8008b6c <USB_SetTurnaroundTime+0x120>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d306      	bcc.n	8008a8c <USB_SetTurnaroundTime+0x40>
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	4a3b      	ldr	r2, [pc, #236]	; (8008b70 <USB_SetTurnaroundTime+0x124>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d202      	bcs.n	8008a8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008a86:	230e      	movs	r3, #14
 8008a88:	617b      	str	r3, [r7, #20]
 8008a8a:	e057      	b.n	8008b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4a38      	ldr	r2, [pc, #224]	; (8008b70 <USB_SetTurnaroundTime+0x124>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d306      	bcc.n	8008aa2 <USB_SetTurnaroundTime+0x56>
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4a37      	ldr	r2, [pc, #220]	; (8008b74 <USB_SetTurnaroundTime+0x128>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d202      	bcs.n	8008aa2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008a9c:	230d      	movs	r3, #13
 8008a9e:	617b      	str	r3, [r7, #20]
 8008aa0:	e04c      	b.n	8008b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	4a33      	ldr	r2, [pc, #204]	; (8008b74 <USB_SetTurnaroundTime+0x128>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d306      	bcc.n	8008ab8 <USB_SetTurnaroundTime+0x6c>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	4a32      	ldr	r2, [pc, #200]	; (8008b78 <USB_SetTurnaroundTime+0x12c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d802      	bhi.n	8008ab8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	e041      	b.n	8008b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4a2f      	ldr	r2, [pc, #188]	; (8008b78 <USB_SetTurnaroundTime+0x12c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d906      	bls.n	8008ace <USB_SetTurnaroundTime+0x82>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4a2e      	ldr	r2, [pc, #184]	; (8008b7c <USB_SetTurnaroundTime+0x130>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d802      	bhi.n	8008ace <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008ac8:	230b      	movs	r3, #11
 8008aca:	617b      	str	r3, [r7, #20]
 8008acc:	e036      	b.n	8008b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	4a2a      	ldr	r2, [pc, #168]	; (8008b7c <USB_SetTurnaroundTime+0x130>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d906      	bls.n	8008ae4 <USB_SetTurnaroundTime+0x98>
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	4a29      	ldr	r2, [pc, #164]	; (8008b80 <USB_SetTurnaroundTime+0x134>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d802      	bhi.n	8008ae4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008ade:	230a      	movs	r3, #10
 8008ae0:	617b      	str	r3, [r7, #20]
 8008ae2:	e02b      	b.n	8008b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4a26      	ldr	r2, [pc, #152]	; (8008b80 <USB_SetTurnaroundTime+0x134>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d906      	bls.n	8008afa <USB_SetTurnaroundTime+0xae>
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	4a25      	ldr	r2, [pc, #148]	; (8008b84 <USB_SetTurnaroundTime+0x138>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d202      	bcs.n	8008afa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008af4:	2309      	movs	r3, #9
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	e020      	b.n	8008b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4a21      	ldr	r2, [pc, #132]	; (8008b84 <USB_SetTurnaroundTime+0x138>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d306      	bcc.n	8008b10 <USB_SetTurnaroundTime+0xc4>
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4a20      	ldr	r2, [pc, #128]	; (8008b88 <USB_SetTurnaroundTime+0x13c>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d802      	bhi.n	8008b10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b0a:	2308      	movs	r3, #8
 8008b0c:	617b      	str	r3, [r7, #20]
 8008b0e:	e015      	b.n	8008b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	4a1d      	ldr	r2, [pc, #116]	; (8008b88 <USB_SetTurnaroundTime+0x13c>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d906      	bls.n	8008b26 <USB_SetTurnaroundTime+0xda>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4a1c      	ldr	r2, [pc, #112]	; (8008b8c <USB_SetTurnaroundTime+0x140>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d202      	bcs.n	8008b26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b20:	2307      	movs	r3, #7
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	e00a      	b.n	8008b3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b26:	2306      	movs	r3, #6
 8008b28:	617b      	str	r3, [r7, #20]
 8008b2a:	e007      	b.n	8008b3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008b32:	2309      	movs	r3, #9
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	e001      	b.n	8008b3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008b38:	2309      	movs	r3, #9
 8008b3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	029b      	lsls	r3, r3, #10
 8008b50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008b54:	431a      	orrs	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	371c      	adds	r7, #28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	00d8acbf 	.word	0x00d8acbf
 8008b6c:	00e4e1c0 	.word	0x00e4e1c0
 8008b70:	00f42400 	.word	0x00f42400
 8008b74:	01067380 	.word	0x01067380
 8008b78:	011a499f 	.word	0x011a499f
 8008b7c:	01312cff 	.word	0x01312cff
 8008b80:	014ca43f 	.word	0x014ca43f
 8008b84:	016e3600 	.word	0x016e3600
 8008b88:	01a6ab1f 	.word	0x01a6ab1f
 8008b8c:	01e84800 	.word	0x01e84800

08008b90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f043 0201 	orr.w	r2, r3, #1
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f023 0201 	bic.w	r2, r3, #1
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d115      	bne.n	8008c22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c02:	2001      	movs	r0, #1
 8008c04:	f7fb f8f4 	bl	8003df0 <HAL_Delay>
      ms++;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f001 f972 	bl	8009ef8 <USB_GetMode>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d01e      	beq.n	8008c58 <USB_SetCurrentMode+0x84>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b31      	cmp	r3, #49	; 0x31
 8008c1e:	d9f0      	bls.n	8008c02 <USB_SetCurrentMode+0x2e>
 8008c20:	e01a      	b.n	8008c58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d115      	bne.n	8008c54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c34:	2001      	movs	r0, #1
 8008c36:	f7fb f8db 	bl	8003df0 <HAL_Delay>
      ms++;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 f959 	bl	8009ef8 <USB_GetMode>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <USB_SetCurrentMode+0x84>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b31      	cmp	r3, #49	; 0x31
 8008c50:	d9f0      	bls.n	8008c34 <USB_SetCurrentMode+0x60>
 8008c52:	e001      	b.n	8008c58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e005      	b.n	8008c64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b32      	cmp	r3, #50	; 0x32
 8008c5c:	d101      	bne.n	8008c62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e000      	b.n	8008c64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b086      	sub	sp, #24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c86:	2300      	movs	r3, #0
 8008c88:	613b      	str	r3, [r7, #16]
 8008c8a:	e009      	b.n	8008ca0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	3340      	adds	r3, #64	; 0x40
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	2200      	movs	r2, #0
 8008c98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	613b      	str	r3, [r7, #16]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2b0e      	cmp	r3, #14
 8008ca4:	d9f2      	bls.n	8008c8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d11c      	bne.n	8008ce6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cba:	f043 0302 	orr.w	r3, r3, #2
 8008cbe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38
 8008ce4:	e00b      	b.n	8008cfe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d04:	461a      	mov	r2, r3
 8008d06:	2300      	movs	r3, #0
 8008d08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d10:	4619      	mov	r1, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d18:	461a      	mov	r2, r3
 8008d1a:	680b      	ldr	r3, [r1, #0]
 8008d1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d10c      	bne.n	8008d3e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d104      	bne.n	8008d34 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f945 	bl	8008fbc <USB_SetDevSpeed>
 8008d32:	e008      	b.n	8008d46 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d34:	2101      	movs	r1, #1
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f940 	bl	8008fbc <USB_SetDevSpeed>
 8008d3c:	e003      	b.n	8008d46 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d3e:	2103      	movs	r1, #3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f93b 	bl	8008fbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d46:	2110      	movs	r1, #16
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f8f3 	bl	8008f34 <USB_FlushTxFifo>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f90f 	bl	8008f7c <USB_FlushRxFifo>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6e:	461a      	mov	r2, r3
 8008d70:	2300      	movs	r3, #0
 8008d72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d86:	461a      	mov	r2, r3
 8008d88:	2300      	movs	r3, #0
 8008d8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	613b      	str	r3, [r7, #16]
 8008d90:	e043      	b.n	8008e1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008da8:	d118      	bne.n	8008ddc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	e013      	b.n	8008dee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	e008      	b.n	8008dee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de8:	461a      	mov	r2, r3
 8008dea:	2300      	movs	r3, #0
 8008dec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	3301      	adds	r3, #1
 8008e18:	613b      	str	r3, [r7, #16]
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d3b7      	bcc.n	8008d92 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]
 8008e26:	e043      	b.n	8008eb0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e3e:	d118      	bne.n	8008e72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10a      	bne.n	8008e5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e52:	461a      	mov	r2, r3
 8008e54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	e013      	b.n	8008e84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e68:	461a      	mov	r2, r3
 8008e6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	e008      	b.n	8008e84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7e:	461a      	mov	r2, r3
 8008e80:	2300      	movs	r3, #0
 8008e82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e90:	461a      	mov	r2, r3
 8008e92:	2300      	movs	r3, #0
 8008e94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ea8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	3301      	adds	r3, #1
 8008eae:	613b      	str	r3, [r7, #16]
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d3b7      	bcc.n	8008e28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008ed8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d105      	bne.n	8008eec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	f043 0210 	orr.w	r2, r3, #16
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	699a      	ldr	r2, [r3, #24]
 8008ef0:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <USB_DevInit+0x2c4>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d005      	beq.n	8008f0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	f043 0208 	orr.w	r2, r3, #8
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d107      	bne.n	8008f20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f18:	f043 0304 	orr.w	r3, r3, #4
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f2c:	b004      	add	sp, #16
 8008f2e:	4770      	bx	lr
 8008f30:	803c3800 	.word	0x803c3800

08008f34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	019b      	lsls	r3, r3, #6
 8008f46:	f043 0220 	orr.w	r2, r3, #32
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3301      	adds	r3, #1
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	4a08      	ldr	r2, [pc, #32]	; (8008f78 <USB_FlushTxFifo+0x44>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d901      	bls.n	8008f5e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e006      	b.n	8008f6c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b20      	cmp	r3, #32
 8008f68:	d0f1      	beq.n	8008f4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	00030d40 	.word	0x00030d40

08008f7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2210      	movs	r2, #16
 8008f8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3301      	adds	r3, #1
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	4a08      	ldr	r2, [pc, #32]	; (8008fb8 <USB_FlushRxFifo+0x3c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d901      	bls.n	8008f9e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e006      	b.n	8008fac <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f003 0310 	and.w	r3, r3, #16
 8008fa6:	2b10      	cmp	r3, #16
 8008fa8:	d0f1      	beq.n	8008f8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	00030d40 	.word	0x00030d40

08008fbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	68f9      	ldr	r1, [r7, #12]
 8008fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b087      	sub	sp, #28
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f003 0306 	and.w	r3, r3, #6
 8009006:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d102      	bne.n	8009014 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800900e:	2300      	movs	r3, #0
 8009010:	75fb      	strb	r3, [r7, #23]
 8009012:	e00a      	b.n	800902a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b02      	cmp	r3, #2
 8009018:	d002      	beq.n	8009020 <USB_GetDevSpeed+0x32>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2b06      	cmp	r3, #6
 800901e:	d102      	bne.n	8009026 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009020:	2302      	movs	r3, #2
 8009022:	75fb      	strb	r3, [r7, #23]
 8009024:	e001      	b.n	800902a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009026:	230f      	movs	r3, #15
 8009028:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800902a:	7dfb      	ldrb	r3, [r7, #23]
}
 800902c:	4618      	mov	r0, r3
 800902e:	371c      	adds	r7, #28
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	785b      	ldrb	r3, [r3, #1]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d13a      	bne.n	80090ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905a:	69da      	ldr	r2, [r3, #28]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	f003 030f 	and.w	r3, r3, #15
 8009064:	2101      	movs	r1, #1
 8009066:	fa01 f303 	lsl.w	r3, r1, r3
 800906a:	b29b      	uxth	r3, r3
 800906c:	68f9      	ldr	r1, [r7, #12]
 800906e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009072:	4313      	orrs	r3, r2
 8009074:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d155      	bne.n	8009138 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	78db      	ldrb	r3, [r3, #3]
 80090a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	059b      	lsls	r3, r3, #22
 80090ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090b0:	4313      	orrs	r3, r2
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	0151      	lsls	r1, r2, #5
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	440a      	add	r2, r1
 80090ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	e036      	b.n	8009138 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d0:	69da      	ldr	r2, [r3, #28]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	2101      	movs	r1, #1
 80090dc:	fa01 f303 	lsl.w	r3, r1, r3
 80090e0:	041b      	lsls	r3, r3, #16
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090e8:	4313      	orrs	r3, r2
 80090ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d11a      	bne.n	8009138 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	78db      	ldrb	r3, [r3, #3]
 800911c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800911e:	430b      	orrs	r3, r1
 8009120:	4313      	orrs	r3, r2
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	0151      	lsls	r1, r2, #5
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	440a      	add	r2, r1
 800912a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800912e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009136:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
	...

08009148 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d161      	bne.n	8009228 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800917a:	d11f      	bne.n	80091bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	0151      	lsls	r1, r2, #5
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	440a      	add	r2, r1
 8009192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009196:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800919a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	0151      	lsls	r1, r2, #5
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	440a      	add	r2, r1
 80091b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	f003 030f 	and.w	r3, r3, #15
 80091cc:	2101      	movs	r1, #1
 80091ce:	fa01 f303 	lsl.w	r3, r1, r3
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	43db      	mvns	r3, r3
 80091d6:	68f9      	ldr	r1, [r7, #12]
 80091d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091dc:	4013      	ands	r3, r2
 80091de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e6:	69da      	ldr	r2, [r3, #28]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	f003 030f 	and.w	r3, r3, #15
 80091f0:	2101      	movs	r1, #1
 80091f2:	fa01 f303 	lsl.w	r3, r1, r3
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	43db      	mvns	r3, r3
 80091fa:	68f9      	ldr	r1, [r7, #12]
 80091fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009200:	4013      	ands	r3, r2
 8009202:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	015a      	lsls	r2, r3, #5
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4413      	add	r3, r2
 800920c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	0159      	lsls	r1, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	440b      	add	r3, r1
 800921a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921e:	4619      	mov	r1, r3
 8009220:	4b35      	ldr	r3, [pc, #212]	; (80092f8 <USB_DeactivateEndpoint+0x1b0>)
 8009222:	4013      	ands	r3, r2
 8009224:	600b      	str	r3, [r1, #0]
 8009226:	e060      	b.n	80092ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800923a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800923e:	d11f      	bne.n	8009280 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800925a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800925e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800927e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f003 030f 	and.w	r3, r3, #15
 8009290:	2101      	movs	r1, #1
 8009292:	fa01 f303 	lsl.w	r3, r1, r3
 8009296:	041b      	lsls	r3, r3, #16
 8009298:	43db      	mvns	r3, r3
 800929a:	68f9      	ldr	r1, [r7, #12]
 800929c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092a0:	4013      	ands	r3, r2
 80092a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092aa:	69da      	ldr	r2, [r3, #28]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	f003 030f 	and.w	r3, r3, #15
 80092b4:	2101      	movs	r1, #1
 80092b6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ba:	041b      	lsls	r3, r3, #16
 80092bc:	43db      	mvns	r3, r3
 80092be:	68f9      	ldr	r1, [r7, #12]
 80092c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092c4:	4013      	ands	r3, r2
 80092c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	0159      	lsls	r1, r3, #5
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	440b      	add	r3, r1
 80092de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e2:	4619      	mov	r1, r3
 80092e4:	4b05      	ldr	r3, [pc, #20]	; (80092fc <USB_DeactivateEndpoint+0x1b4>)
 80092e6:	4013      	ands	r3, r2
 80092e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	ec337800 	.word	0xec337800
 80092fc:	eff37800 	.word	0xeff37800

08009300 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08a      	sub	sp, #40	; 0x28
 8009304:	af02      	add	r7, sp, #8
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	4613      	mov	r3, r2
 800930c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	785b      	ldrb	r3, [r3, #1]
 800931c:	2b01      	cmp	r3, #1
 800931e:	f040 815c 	bne.w	80095da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d132      	bne.n	8009390 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	015a      	lsls	r2, r3, #5
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	4413      	add	r3, r2
 8009332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	0151      	lsls	r1, r2, #5
 800933c:	69fa      	ldr	r2, [r7, #28]
 800933e:	440a      	add	r2, r1
 8009340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009344:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009348:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800934c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	440a      	add	r2, r1
 8009364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009368:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800936c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	4413      	add	r3, r2
 8009376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	69ba      	ldr	r2, [r7, #24]
 800937e:	0151      	lsls	r1, r2, #5
 8009380:	69fa      	ldr	r2, [r7, #28]
 8009382:	440a      	add	r2, r1
 8009384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009388:	0cdb      	lsrs	r3, r3, #19
 800938a:	04db      	lsls	r3, r3, #19
 800938c:	6113      	str	r3, [r2, #16]
 800938e:	e074      	b.n	800947a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	0151      	lsls	r1, r2, #5
 80093a2:	69fa      	ldr	r2, [r7, #28]
 80093a4:	440a      	add	r2, r1
 80093a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093aa:	0cdb      	lsrs	r3, r3, #19
 80093ac:	04db      	lsls	r3, r3, #19
 80093ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	0151      	lsls	r1, r2, #5
 80093c2:	69fa      	ldr	r2, [r7, #28]
 80093c4:	440a      	add	r2, r1
 80093c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	6959      	ldr	r1, [r3, #20]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	440b      	add	r3, r1
 80093ec:	1e59      	subs	r1, r3, #1
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80093f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093f8:	4b9d      	ldr	r3, [pc, #628]	; (8009670 <USB_EPStartXfer+0x370>)
 80093fa:	400b      	ands	r3, r1
 80093fc:	69b9      	ldr	r1, [r7, #24]
 80093fe:	0148      	lsls	r0, r1, #5
 8009400:	69f9      	ldr	r1, [r7, #28]
 8009402:	4401      	add	r1, r0
 8009404:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009408:	4313      	orrs	r3, r2
 800940a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009418:	691a      	ldr	r2, [r3, #16]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009422:	69b9      	ldr	r1, [r7, #24]
 8009424:	0148      	lsls	r0, r1, #5
 8009426:	69f9      	ldr	r1, [r7, #28]
 8009428:	4401      	add	r1, r0
 800942a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800942e:	4313      	orrs	r3, r2
 8009430:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	78db      	ldrb	r3, [r3, #3]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d11f      	bne.n	800947a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	0151      	lsls	r1, r2, #5
 800944c:	69fa      	ldr	r2, [r7, #28]
 800944e:	440a      	add	r2, r1
 8009450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009454:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009458:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	69fa      	ldr	r2, [r7, #28]
 800946e:	440a      	add	r2, r1
 8009470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009474:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009478:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d14b      	bne.n	8009518 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d009      	beq.n	800949c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009494:	461a      	mov	r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	78db      	ldrb	r3, [r3, #3]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d128      	bne.n	80094f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d110      	bne.n	80094d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	0151      	lsls	r1, r2, #5
 80094c6:	69fa      	ldr	r2, [r7, #28]
 80094c8:	440a      	add	r2, r1
 80094ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094d2:	6013      	str	r3, [r2, #0]
 80094d4:	e00f      	b.n	80094f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	0151      	lsls	r1, r2, #5
 80094e8:	69fa      	ldr	r2, [r7, #28]
 80094ea:	440a      	add	r2, r1
 80094ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	0151      	lsls	r1, r2, #5
 8009508:	69fa      	ldr	r2, [r7, #28]
 800950a:	440a      	add	r2, r1
 800950c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009510:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009514:	6013      	str	r3, [r2, #0]
 8009516:	e12f      	b.n	8009778 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	69ba      	ldr	r2, [r7, #24]
 8009528:	0151      	lsls	r1, r2, #5
 800952a:	69fa      	ldr	r2, [r7, #28]
 800952c:	440a      	add	r2, r1
 800952e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009532:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009536:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	78db      	ldrb	r3, [r3, #3]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d015      	beq.n	800956c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 8117 	beq.w	8009778 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	f003 030f 	and.w	r3, r3, #15
 800955a:	2101      	movs	r1, #1
 800955c:	fa01 f303 	lsl.w	r3, r1, r3
 8009560:	69f9      	ldr	r1, [r7, #28]
 8009562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009566:	4313      	orrs	r3, r2
 8009568:	634b      	str	r3, [r1, #52]	; 0x34
 800956a:	e105      	b.n	8009778 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009578:	2b00      	cmp	r3, #0
 800957a:	d110      	bne.n	800959e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	0151      	lsls	r1, r2, #5
 800958e:	69fa      	ldr	r2, [r7, #28]
 8009590:	440a      	add	r2, r1
 8009592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009596:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	e00f      	b.n	80095be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	0151      	lsls	r1, r2, #5
 80095b0:	69fa      	ldr	r2, [r7, #28]
 80095b2:	440a      	add	r2, r1
 80095b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	68d9      	ldr	r1, [r3, #12]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	781a      	ldrb	r2, [r3, #0]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	b298      	uxth	r0, r3
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	4603      	mov	r3, r0
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fa2b 	bl	8009a2e <USB_WritePacket>
 80095d8:	e0ce      	b.n	8009778 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	69ba      	ldr	r2, [r7, #24]
 80095ea:	0151      	lsls	r1, r2, #5
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	440a      	add	r2, r1
 80095f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095f4:	0cdb      	lsrs	r3, r3, #19
 80095f6:	04db      	lsls	r3, r3, #19
 80095f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	4413      	add	r3, r2
 8009602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	69ba      	ldr	r2, [r7, #24]
 800960a:	0151      	lsls	r1, r2, #5
 800960c:	69fa      	ldr	r2, [r7, #28]
 800960e:	440a      	add	r2, r1
 8009610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009614:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009618:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800961c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d126      	bne.n	8009674 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	4413      	add	r3, r2
 800962e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009632:	691a      	ldr	r2, [r3, #16]
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800963c:	69b9      	ldr	r1, [r7, #24]
 800963e:	0148      	lsls	r0, r1, #5
 8009640:	69f9      	ldr	r1, [r7, #28]
 8009642:	4401      	add	r1, r0
 8009644:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009648:	4313      	orrs	r3, r2
 800964a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	4413      	add	r3, r2
 8009654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	69ba      	ldr	r2, [r7, #24]
 800965c:	0151      	lsls	r1, r2, #5
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	440a      	add	r2, r1
 8009662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800966a:	6113      	str	r3, [r2, #16]
 800966c:	e036      	b.n	80096dc <USB_EPStartXfer+0x3dc>
 800966e:	bf00      	nop
 8009670:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	695a      	ldr	r2, [r3, #20]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	4413      	add	r3, r2
 800967e:	1e5a      	subs	r2, r3, #1
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	fbb2 f3f3 	udiv	r3, r2, r3
 8009688:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	4413      	add	r3, r2
 8009692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009696:	691a      	ldr	r2, [r3, #16]
 8009698:	8afb      	ldrh	r3, [r7, #22]
 800969a:	04d9      	lsls	r1, r3, #19
 800969c:	4b39      	ldr	r3, [pc, #228]	; (8009784 <USB_EPStartXfer+0x484>)
 800969e:	400b      	ands	r3, r1
 80096a0:	69b9      	ldr	r1, [r7, #24]
 80096a2:	0148      	lsls	r0, r1, #5
 80096a4:	69f9      	ldr	r1, [r7, #28]
 80096a6:	4401      	add	r1, r0
 80096a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096ac:	4313      	orrs	r3, r2
 80096ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096bc:	691a      	ldr	r2, [r3, #16]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	8af9      	ldrh	r1, [r7, #22]
 80096c4:	fb01 f303 	mul.w	r3, r1, r3
 80096c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096cc:	69b9      	ldr	r1, [r7, #24]
 80096ce:	0148      	lsls	r0, r1, #5
 80096d0:	69f9      	ldr	r1, [r7, #28]
 80096d2:	4401      	add	r1, r0
 80096d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096d8:	4313      	orrs	r3, r2
 80096da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d10d      	bne.n	80096fe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d009      	beq.n	80096fe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	68d9      	ldr	r1, [r3, #12]
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	015a      	lsls	r2, r3, #5
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	4413      	add	r3, r2
 80096f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fa:	460a      	mov	r2, r1
 80096fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	78db      	ldrb	r3, [r3, #3]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d128      	bne.n	8009758 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009712:	2b00      	cmp	r3, #0
 8009714:	d110      	bne.n	8009738 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	0151      	lsls	r1, r2, #5
 8009728:	69fa      	ldr	r2, [r7, #28]
 800972a:	440a      	add	r2, r1
 800972c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009730:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	e00f      	b.n	8009758 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	69ba      	ldr	r2, [r7, #24]
 8009748:	0151      	lsls	r1, r2, #5
 800974a:	69fa      	ldr	r2, [r7, #28]
 800974c:	440a      	add	r2, r1
 800974e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009756:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	4413      	add	r3, r2
 8009760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	0151      	lsls	r1, r2, #5
 800976a:	69fa      	ldr	r2, [r7, #28]
 800976c:	440a      	add	r2, r1
 800976e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009772:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009776:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3720      	adds	r7, #32
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	1ff80000 	.word	0x1ff80000

08009788 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	4613      	mov	r3, r2
 8009794:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	785b      	ldrb	r3, [r3, #1]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	f040 80cd 	bne.w	8009944 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d132      	bne.n	8009818 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	0151      	lsls	r1, r2, #5
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	440a      	add	r2, r1
 80097c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	0151      	lsls	r1, r2, #5
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	440a      	add	r2, r1
 80097ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	0151      	lsls	r1, r2, #5
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	440a      	add	r2, r1
 800980c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009810:	0cdb      	lsrs	r3, r3, #19
 8009812:	04db      	lsls	r3, r3, #19
 8009814:	6113      	str	r3, [r2, #16]
 8009816:	e04e      	b.n	80098b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	4413      	add	r3, r2
 8009820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	0151      	lsls	r1, r2, #5
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	440a      	add	r2, r1
 800982e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009832:	0cdb      	lsrs	r3, r3, #19
 8009834:	04db      	lsls	r3, r3, #19
 8009836:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	0151      	lsls	r1, r2, #5
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	440a      	add	r2, r1
 800984e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009852:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009856:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800985a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	695a      	ldr	r2, [r3, #20]
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	429a      	cmp	r2, r3
 8009866:	d903      	bls.n	8009870 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	689a      	ldr	r2, [r3, #8]
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	0151      	lsls	r1, r2, #5
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	440a      	add	r2, r1
 8009886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800988a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800988e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989c:	691a      	ldr	r2, [r3, #16]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098a6:	6939      	ldr	r1, [r7, #16]
 80098a8:	0148      	lsls	r0, r1, #5
 80098aa:	6979      	ldr	r1, [r7, #20]
 80098ac:	4401      	add	r1, r0
 80098ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098b2:	4313      	orrs	r3, r2
 80098b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d11e      	bne.n	80098fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d009      	beq.n	80098d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d0:	461a      	mov	r2, r3
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	4413      	add	r3, r2
 80098e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	0151      	lsls	r1, r2, #5
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	440a      	add	r2, r1
 80098ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	e092      	b.n	8009a20 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	0151      	lsls	r1, r2, #5
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	440a      	add	r2, r1
 8009910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009914:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009918:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d07e      	beq.n	8009a20 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	f003 030f 	and.w	r3, r3, #15
 8009932:	2101      	movs	r1, #1
 8009934:	fa01 f303 	lsl.w	r3, r1, r3
 8009938:	6979      	ldr	r1, [r7, #20]
 800993a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800993e:	4313      	orrs	r3, r2
 8009940:	634b      	str	r3, [r1, #52]	; 0x34
 8009942:	e06d      	b.n	8009a20 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	0151      	lsls	r1, r2, #5
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	440a      	add	r2, r1
 800995a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800995e:	0cdb      	lsrs	r3, r3, #19
 8009960:	04db      	lsls	r3, r3, #19
 8009962:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	0151      	lsls	r1, r2, #5
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	440a      	add	r2, r1
 800997a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800997e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009982:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009986:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	0151      	lsls	r1, r2, #5
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	440a      	add	r2, r1
 80099ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c4:	691a      	ldr	r2, [r3, #16]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099ce:	6939      	ldr	r1, [r7, #16]
 80099d0:	0148      	lsls	r0, r1, #5
 80099d2:	6979      	ldr	r1, [r7, #20]
 80099d4:	4401      	add	r1, r0
 80099d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099da:	4313      	orrs	r3, r2
 80099dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d10d      	bne.n	8009a00 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d009      	beq.n	8009a00 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	68d9      	ldr	r1, [r3, #12]
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fc:	460a      	mov	r2, r1
 80099fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	0151      	lsls	r1, r2, #5
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	440a      	add	r2, r1
 8009a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b089      	sub	sp, #36	; 0x24
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	4611      	mov	r1, r2
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	71fb      	strb	r3, [r7, #7]
 8009a40:	4613      	mov	r3, r2
 8009a42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009a4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d123      	bne.n	8009a9c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a54:	88bb      	ldrh	r3, [r7, #4]
 8009a56:	3303      	adds	r3, #3
 8009a58:	089b      	lsrs	r3, r3, #2
 8009a5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	61bb      	str	r3, [r7, #24]
 8009a60:	e018      	b.n	8009a94 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	031a      	lsls	r2, r3, #12
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6e:	461a      	mov	r2, r3
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	3301      	adds	r3, #1
 8009a86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	3301      	adds	r3, #1
 8009a92:	61bb      	str	r3, [r7, #24]
 8009a94:	69ba      	ldr	r2, [r7, #24]
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d3e2      	bcc.n	8009a62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3724      	adds	r7, #36	; 0x24
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b08b      	sub	sp, #44	; 0x2c
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	60b9      	str	r1, [r7, #8]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ac0:	88fb      	ldrh	r3, [r7, #6]
 8009ac2:	089b      	lsrs	r3, r3, #2
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009ac8:	88fb      	ldrh	r3, [r7, #6]
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	623b      	str	r3, [r7, #32]
 8009ad4:	e014      	b.n	8009b00 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	3301      	adds	r3, #1
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	3301      	adds	r3, #1
 8009af2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	3301      	adds	r3, #1
 8009af8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009afa:	6a3b      	ldr	r3, [r7, #32]
 8009afc:	3301      	adds	r3, #1
 8009afe:	623b      	str	r3, [r7, #32]
 8009b00:	6a3a      	ldr	r2, [r7, #32]
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d3e6      	bcc.n	8009ad6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b08:	8bfb      	ldrh	r3, [r7, #30]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d01e      	beq.n	8009b4c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f107 0310 	add.w	r3, r7, #16
 8009b1e:	6812      	ldr	r2, [r2, #0]
 8009b20:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	00db      	lsls	r3, r3, #3
 8009b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	701a      	strb	r2, [r3, #0]
      i++;
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	3301      	adds	r3, #1
 8009b38:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009b40:	8bfb      	ldrh	r3, [r7, #30]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b46:	8bfb      	ldrh	r3, [r7, #30]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1ea      	bne.n	8009b22 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	372c      	adds	r7, #44	; 0x2c
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	785b      	ldrb	r3, [r3, #1]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d12c      	bne.n	8009bd0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	015a      	lsls	r2, r3, #5
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	db12      	blt.n	8009bae <USB_EPSetStall+0x54>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00f      	beq.n	8009bae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	0151      	lsls	r1, r2, #5
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	440a      	add	r2, r1
 8009ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	0151      	lsls	r1, r2, #5
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	440a      	add	r2, r1
 8009bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bcc:	6013      	str	r3, [r2, #0]
 8009bce:	e02b      	b.n	8009c28 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	db12      	blt.n	8009c08 <USB_EPSetStall+0xae>
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00f      	beq.n	8009c08 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	0151      	lsls	r1, r2, #5
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	440a      	add	r2, r1
 8009bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c06:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	015a      	lsls	r2, r3, #5
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	0151      	lsls	r1, r2, #5
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	440a      	add	r2, r1
 8009c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b085      	sub	sp, #20
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	785b      	ldrb	r3, [r3, #1]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d128      	bne.n	8009ca4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	0151      	lsls	r1, r2, #5
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	440a      	add	r2, r1
 8009c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	78db      	ldrb	r3, [r3, #3]
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d003      	beq.n	8009c82 <USB_EPClearStall+0x4c>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	78db      	ldrb	r3, [r3, #3]
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d138      	bne.n	8009cf4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	0151      	lsls	r1, r2, #5
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	440a      	add	r2, r1
 8009c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	e027      	b.n	8009cf4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	0151      	lsls	r1, r2, #5
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	440a      	add	r2, r1
 8009cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	78db      	ldrb	r3, [r3, #3]
 8009cc8:	2b03      	cmp	r3, #3
 8009cca:	d003      	beq.n	8009cd4 <USB_EPClearStall+0x9e>
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	78db      	ldrb	r3, [r3, #3]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d10f      	bne.n	8009cf4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	015a      	lsls	r2, r3, #5
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	0151      	lsls	r1, r2, #5
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	440a      	add	r2, r1
 8009cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cf2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b085      	sub	sp, #20
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d24:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	78fb      	ldrb	r3, [r7, #3]
 8009d30:	011b      	lsls	r3, r3, #4
 8009d32:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d36:	68f9      	ldr	r1, [r7, #12]
 8009d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d68:	f023 0303 	bic.w	r3, r3, #3
 8009d6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d7c:	f023 0302 	bic.w	r3, r3, #2
 8009d80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009daa:	f023 0303 	bic.w	r3, r3, #3
 8009dae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dbe:	f043 0302 	orr.w	r3, r3, #2
 8009dc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4013      	ands	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009dea:	68fb      	ldr	r3, [r7, #12]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	4013      	ands	r3, r2
 8009e1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	0c1b      	lsrs	r3, r3, #16
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	b29b      	uxth	r3, r3
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e70:	78fb      	ldrb	r3, [r7, #3]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ebe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ec0:	78fb      	ldrb	r3, [r7, #3]
 8009ec2:	f003 030f 	and.w	r3, r3, #15
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ecc:	01db      	lsls	r3, r3, #7
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009ed6:	78fb      	ldrb	r3, [r7, #3]
 8009ed8:	015a      	lsls	r2, r3, #5
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	4413      	add	r3, r2
 8009ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009eea:	68bb      	ldr	r3, [r7, #8]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	371c      	adds	r7, #28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	f003 0301 	and.w	r3, r3, #1
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f2e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f32:	f023 0307 	bic.w	r3, r3, #7
 8009f36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
	...

08009f5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b087      	sub	sp, #28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	460b      	mov	r3, r1
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	333c      	adds	r3, #60	; 0x3c
 8009f72:	3304      	adds	r3, #4
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	4a26      	ldr	r2, [pc, #152]	; (800a014 <USB_EP0_OutStart+0xb8>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d90a      	bls.n	8009f96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f90:	d101      	bne.n	8009f96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	e037      	b.n	800a006 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fc4:	f043 0318 	orr.w	r3, r3, #24
 8009fc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009fdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009fde:	7afb      	ldrb	r3, [r7, #11]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d10f      	bne.n	800a004 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fea:	461a      	mov	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a002:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	371c      	adds	r7, #28
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	4f54300a 	.word	0x4f54300a

0800a018 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a020:	2300      	movs	r3, #0
 800a022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	3301      	adds	r3, #1
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	4a13      	ldr	r2, [pc, #76]	; (800a078 <USB_CoreReset+0x60>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d901      	bls.n	800a034 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e01a      	b.n	800a06a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	daf3      	bge.n	800a024 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	f043 0201 	orr.w	r2, r3, #1
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3301      	adds	r3, #1
 800a050:	60fb      	str	r3, [r7, #12]
 800a052:	4a09      	ldr	r2, [pc, #36]	; (800a078 <USB_CoreReset+0x60>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d901      	bls.n	800a05c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e006      	b.n	800a06a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	f003 0301 	and.w	r3, r3, #1
 800a064:	2b01      	cmp	r3, #1
 800a066:	d0f1      	beq.n	800a04c <USB_CoreReset+0x34>

  return HAL_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	00030d40 	.word	0x00030d40

0800a07c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a088:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a08c:	f002 f914 	bl	800c2b8 <USBD_static_malloc>
 800a090:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d105      	bne.n	800a0a4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	e066      	b.n	800a172 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	7c1b      	ldrb	r3, [r3, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d119      	bne.n	800a0e8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	2181      	movs	r1, #129	; 0x81
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f001 ffd8 	bl	800c072 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a0c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f001 ffce 	bl	800c072 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2210      	movs	r2, #16
 800a0e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a0e6:	e016      	b.n	800a116 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0e8:	2340      	movs	r3, #64	; 0x40
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	2181      	movs	r1, #129	; 0x81
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f001 ffbf 	bl	800c072 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a0fa:	2340      	movs	r3, #64	; 0x40
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	2101      	movs	r1, #1
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f001 ffb6 	bl	800c072 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2210      	movs	r2, #16
 800a112:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a116:	2308      	movs	r3, #8
 800a118:	2203      	movs	r2, #3
 800a11a:	2182      	movs	r1, #130	; 0x82
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 ffa8 	bl	800c072 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	7c1b      	ldrb	r3, [r3, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d109      	bne.n	800a160 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a152:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a156:	2101      	movs	r1, #1
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f002 f879 	bl	800c250 <USBD_LL_PrepareReceive>
 800a15e:	e007      	b.n	800a170 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a166:	2340      	movs	r3, #64	; 0x40
 800a168:	2101      	movs	r1, #1
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f002 f870 	bl	800c250 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	460b      	mov	r3, r1
 800a184:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a186:	2181      	movs	r1, #129	; 0x81
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f001 ff98 	bl	800c0be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a194:	2101      	movs	r1, #1
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f001 ff91 	bl	800c0be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a1a4:	2182      	movs	r1, #130	; 0x82
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f001 ff89 	bl	800c0be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00e      	beq.n	800a1e4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f002 f87c 	bl	800c2d4 <USBD_static_free>
    pdev->pClassData = NULL;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
	...

0800a1f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a200:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a206:	2300      	movs	r3, #0
 800a208:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a214:	2303      	movs	r3, #3
 800a216:	e0af      	b.n	800a378 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a220:	2b00      	cmp	r3, #0
 800a222:	d03f      	beq.n	800a2a4 <USBD_CDC_Setup+0xb4>
 800a224:	2b20      	cmp	r3, #32
 800a226:	f040 809f 	bne.w	800a368 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	88db      	ldrh	r3, [r3, #6]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d02e      	beq.n	800a290 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b25b      	sxtb	r3, r3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da16      	bge.n	800a26a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a248:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	88d2      	ldrh	r2, [r2, #6]
 800a24e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	88db      	ldrh	r3, [r3, #6]
 800a254:	2b07      	cmp	r3, #7
 800a256:	bf28      	it	cs
 800a258:	2307      	movcs	r3, #7
 800a25a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	89fa      	ldrh	r2, [r7, #14]
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 fae9 	bl	800b83a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a268:	e085      	b.n	800a376 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	785a      	ldrb	r2, [r3, #1]
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	88db      	ldrh	r3, [r3, #6]
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a280:	6939      	ldr	r1, [r7, #16]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	88db      	ldrh	r3, [r3, #6]
 800a286:	461a      	mov	r2, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 fb02 	bl	800b892 <USBD_CtlPrepareRx>
      break;
 800a28e:	e072      	b.n	800a376 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	683a      	ldr	r2, [r7, #0]
 800a29a:	7850      	ldrb	r0, [r2, #1]
 800a29c:	2200      	movs	r2, #0
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	4798      	blx	r3
      break;
 800a2a2:	e068      	b.n	800a376 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	785b      	ldrb	r3, [r3, #1]
 800a2a8:	2b0b      	cmp	r3, #11
 800a2aa:	d852      	bhi.n	800a352 <USBD_CDC_Setup+0x162>
 800a2ac:	a201      	add	r2, pc, #4	; (adr r2, 800a2b4 <USBD_CDC_Setup+0xc4>)
 800a2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b2:	bf00      	nop
 800a2b4:	0800a2e5 	.word	0x0800a2e5
 800a2b8:	0800a361 	.word	0x0800a361
 800a2bc:	0800a353 	.word	0x0800a353
 800a2c0:	0800a353 	.word	0x0800a353
 800a2c4:	0800a353 	.word	0x0800a353
 800a2c8:	0800a353 	.word	0x0800a353
 800a2cc:	0800a353 	.word	0x0800a353
 800a2d0:	0800a353 	.word	0x0800a353
 800a2d4:	0800a353 	.word	0x0800a353
 800a2d8:	0800a353 	.word	0x0800a353
 800a2dc:	0800a30f 	.word	0x0800a30f
 800a2e0:	0800a339 	.word	0x0800a339
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d107      	bne.n	800a300 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a2f0:	f107 030a 	add.w	r3, r7, #10
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f001 fa9e 	bl	800b83a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2fe:	e032      	b.n	800a366 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f001 fa28 	bl	800b758 <USBD_CtlError>
            ret = USBD_FAIL;
 800a308:	2303      	movs	r3, #3
 800a30a:	75fb      	strb	r3, [r7, #23]
          break;
 800a30c:	e02b      	b.n	800a366 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b03      	cmp	r3, #3
 800a318:	d107      	bne.n	800a32a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a31a:	f107 030d 	add.w	r3, r7, #13
 800a31e:	2201      	movs	r2, #1
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f001 fa89 	bl	800b83a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a328:	e01d      	b.n	800a366 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 fa13 	bl	800b758 <USBD_CtlError>
            ret = USBD_FAIL;
 800a332:	2303      	movs	r3, #3
 800a334:	75fb      	strb	r3, [r7, #23]
          break;
 800a336:	e016      	b.n	800a366 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b03      	cmp	r3, #3
 800a342:	d00f      	beq.n	800a364 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f001 fa06 	bl	800b758 <USBD_CtlError>
            ret = USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a350:	e008      	b.n	800a364 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f001 f9ff 	bl	800b758 <USBD_CtlError>
          ret = USBD_FAIL;
 800a35a:	2303      	movs	r3, #3
 800a35c:	75fb      	strb	r3, [r7, #23]
          break;
 800a35e:	e002      	b.n	800a366 <USBD_CDC_Setup+0x176>
          break;
 800a360:	bf00      	nop
 800a362:	e008      	b.n	800a376 <USBD_CDC_Setup+0x186>
          break;
 800a364:	bf00      	nop
      }
      break;
 800a366:	e006      	b.n	800a376 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 f9f4 	bl	800b758 <USBD_CtlError>
      ret = USBD_FAIL;
 800a370:	2303      	movs	r3, #3
 800a372:	75fb      	strb	r3, [r7, #23]
      break;
 800a374:	bf00      	nop
  }

  return (uint8_t)ret;
 800a376:	7dfb      	ldrb	r3, [r7, #23]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a392:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e04f      	b.n	800a442 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a3aa:	78fa      	ldrb	r2, [r7, #3]
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4413      	add	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	440b      	add	r3, r1
 800a3b8:	3318      	adds	r3, #24
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d029      	beq.n	800a414 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a3c0:	78fa      	ldrb	r2, [r7, #3]
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	440b      	add	r3, r1
 800a3ce:	3318      	adds	r3, #24
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	78f9      	ldrb	r1, [r7, #3]
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	00db      	lsls	r3, r3, #3
 800a3da:	1a5b      	subs	r3, r3, r1
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4403      	add	r3, r0
 800a3e0:	3344      	adds	r3, #68	; 0x44
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a3e8:	fb03 f301 	mul.w	r3, r3, r1
 800a3ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d110      	bne.n	800a414 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a3f2:	78fa      	ldrb	r2, [r7, #3]
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	440b      	add	r3, r1
 800a400:	3318      	adds	r3, #24
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a406:	78f9      	ldrb	r1, [r7, #3]
 800a408:	2300      	movs	r3, #0
 800a40a:	2200      	movs	r2, #0
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 fefe 	bl	800c20e <USBD_LL_Transmit>
 800a412:	e015      	b.n	800a440 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00b      	beq.n	800a440 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a43c:	78fa      	ldrb	r2, [r7, #3]
 800a43e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a45c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a468:	2303      	movs	r3, #3
 800a46a:	e015      	b.n	800a498 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 ff0e 	bl	800c292 <USBD_LL_GetRxDataSize>
 800a476:	4602      	mov	r2, r0
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a492:	4611      	mov	r1, r2
 800a494:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e01b      	b.n	800a4f2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d015      	beq.n	800a4f0 <USBD_CDC_EP0_RxReady+0x50>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a4ca:	2bff      	cmp	r3, #255	; 0xff
 800a4cc:	d010      	beq.n	800a4f0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a4dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4e4:	b292      	uxth	r2, r2
 800a4e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	22ff      	movs	r2, #255	; 0xff
 800a4ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
	...

0800a4fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2243      	movs	r2, #67	; 0x43
 800a508:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a50a:	4b03      	ldr	r3, [pc, #12]	; (800a518 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	200000a0 	.word	0x200000a0

0800a51c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2243      	movs	r2, #67	; 0x43
 800a528:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a52a:	4b03      	ldr	r3, [pc, #12]	; (800a538 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	2000005c 	.word	0x2000005c

0800a53c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2243      	movs	r2, #67	; 0x43
 800a548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a54a:	4b03      	ldr	r3, [pc, #12]	; (800a558 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	200000e4 	.word	0x200000e4

0800a55c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	220a      	movs	r2, #10
 800a568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a56a:	4b03      	ldr	r3, [pc, #12]	; (800a578 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	20000018 	.word	0x20000018

0800a57c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e004      	b.n	800a59a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b087      	sub	sp, #28
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	60f8      	str	r0, [r7, #12]
 800a5ae:	60b9      	str	r1, [r7, #8]
 800a5b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e008      	b.n	800a5d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	371c      	adds	r7, #28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b085      	sub	sp, #20
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d101      	bne.n	800a5fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e004      	b.n	800a608 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a622:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a62e:	2303      	movs	r3, #3
 800a630:	e016      	b.n	800a660 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	7c1b      	ldrb	r3, [r3, #16]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d109      	bne.n	800a64e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a640:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a644:	2101      	movs	r1, #1
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f001 fe02 	bl	800c250 <USBD_LL_PrepareReceive>
 800a64c:	e007      	b.n	800a65e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a654:	2340      	movs	r3, #64	; 0x40
 800a656:	2101      	movs	r1, #1
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f001 fdf9 	bl	800c250 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	4613      	mov	r3, r2
 800a674:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e01f      	b.n	800a6c0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d003      	beq.n	800a6a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	79fa      	ldrb	r2, [r7, #7]
 800a6b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f001 fc75 	bl	800bfa4 <USBD_LL_Init>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d101      	bne.n	800a6e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e016      	b.n	800a70e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	683a      	ldr	r2, [r7, #0]
 800a6e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00b      	beq.n	800a70c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fc:	f107 020e 	add.w	r2, r7, #14
 800a700:	4610      	mov	r0, r2
 800a702:	4798      	blx	r3
 800a704:	4602      	mov	r2, r0
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b082      	sub	sp, #8
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f001 fc8c 	bl	800c03c <USBD_LL_Start>
 800a724:	4603      	mov	r3, r0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a72e:	b480      	push	{r7}
 800a730:	b083      	sub	sp, #12
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	460b      	mov	r3, r1
 800a74e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a750:	2303      	movs	r3, #3
 800a752:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d009      	beq.n	800a772 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	78fa      	ldrb	r2, [r7, #3]
 800a768:	4611      	mov	r1, r2
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	4798      	blx	r3
 800a76e:	4603      	mov	r3, r0
 800a770:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a772:	7bfb      	ldrb	r3, [r7, #15]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d007      	beq.n	800a7a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	78fa      	ldrb	r2, [r7, #3]
 800a79c:	4611      	mov	r1, r2
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	4798      	blx	r3
  }

  return USBD_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 ff90 	bl	800b6e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a7e0:	f003 031f 	and.w	r3, r3, #31
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d01a      	beq.n	800a81e <USBD_LL_SetupStage+0x72>
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d822      	bhi.n	800a832 <USBD_LL_SetupStage+0x86>
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <USBD_LL_SetupStage+0x4a>
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d00a      	beq.n	800a80a <USBD_LL_SetupStage+0x5e>
 800a7f4:	e01d      	b.n	800a832 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fa62 	bl	800acc8 <USBD_StdDevReq>
 800a804:	4603      	mov	r3, r0
 800a806:	73fb      	strb	r3, [r7, #15]
      break;
 800a808:	e020      	b.n	800a84c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fac6 	bl	800ada4 <USBD_StdItfReq>
 800a818:	4603      	mov	r3, r0
 800a81a:	73fb      	strb	r3, [r7, #15]
      break;
 800a81c:	e016      	b.n	800a84c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fb05 	bl	800ae36 <USBD_StdEPReq>
 800a82c:	4603      	mov	r3, r0
 800a82e:	73fb      	strb	r3, [r7, #15]
      break;
 800a830:	e00c      	b.n	800a84c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a838:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	4619      	mov	r1, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f001 fc5b 	bl	800c0fc <USBD_LL_StallEP>
 800a846:	4603      	mov	r3, r0
 800a848:	73fb      	strb	r3, [r7, #15]
      break;
 800a84a:	bf00      	nop
  }

  return ret;
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b086      	sub	sp, #24
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	60f8      	str	r0, [r7, #12]
 800a85e:	460b      	mov	r3, r1
 800a860:	607a      	str	r2, [r7, #4]
 800a862:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a864:	7afb      	ldrb	r3, [r7, #11]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d138      	bne.n	800a8dc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a870:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d14a      	bne.n	800a912 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	689a      	ldr	r2, [r3, #8]
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	429a      	cmp	r2, r3
 800a886:	d913      	bls.n	800a8b0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	689a      	ldr	r2, [r3, #8]
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	1ad2      	subs	r2, r2, r3
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	68da      	ldr	r2, [r3, #12]
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	bf28      	it	cs
 800a8a2:	4613      	movcs	r3, r2
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f001 f80f 	bl	800b8cc <USBD_CtlContinueRx>
 800a8ae:	e030      	b.n	800a912 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	d10b      	bne.n	800a8d4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f001 f80a 	bl	800b8ee <USBD_CtlSendStatus>
 800a8da:	e01a      	b.n	800a912 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d114      	bne.n	800a912 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00e      	beq.n	800a912 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	7afa      	ldrb	r2, [r7, #11]
 800a8fe:	4611      	mov	r1, r2
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	4798      	blx	r3
 800a904:	4603      	mov	r3, r0
 800a906:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a908:	7dfb      	ldrb	r3, [r7, #23]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
 800a910:	e000      	b.n	800a914 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	460b      	mov	r3, r1
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a92a:	7afb      	ldrb	r3, [r7, #11]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d16b      	bne.n	800aa08 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3314      	adds	r3, #20
 800a934:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d156      	bne.n	800a9ee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	689a      	ldr	r2, [r3, #8]
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d914      	bls.n	800a976 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	689a      	ldr	r2, [r3, #8]
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	1ad2      	subs	r2, r2, r3
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	461a      	mov	r2, r3
 800a960:	6879      	ldr	r1, [r7, #4]
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f000 ff84 	bl	800b870 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a968:	2300      	movs	r3, #0
 800a96a:	2200      	movs	r2, #0
 800a96c:	2100      	movs	r1, #0
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f001 fc6e 	bl	800c250 <USBD_LL_PrepareReceive>
 800a974:	e03b      	b.n	800a9ee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	68da      	ldr	r2, [r3, #12]
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d11c      	bne.n	800a9bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d316      	bcc.n	800a9bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a998:	429a      	cmp	r2, r3
 800a99a:	d20f      	bcs.n	800a9bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a99c:	2200      	movs	r2, #0
 800a99e:	2100      	movs	r1, #0
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 ff65 	bl	800b870 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f001 fc4b 	bl	800c250 <USBD_LL_PrepareReceive>
 800a9ba:	e018      	b.n	800a9ee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d10b      	bne.n	800a9e0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d005      	beq.n	800a9e0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9e0:	2180      	movs	r1, #128	; 0x80
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f001 fb8a 	bl	800c0fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f000 ff93 	bl	800b914 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d122      	bne.n	800aa3e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7ff fe98 	bl	800a72e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa06:	e01a      	b.n	800aa3e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d114      	bne.n	800aa3e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00e      	beq.n	800aa3e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa26:	695b      	ldr	r3, [r3, #20]
 800aa28:	7afa      	ldrb	r2, [r7, #11]
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	4798      	blx	r3
 800aa30:	4603      	mov	r3, r0
 800aa32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
 800aa3c:	e000      	b.n	800aa40 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3718      	adds	r7, #24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d101      	bne.n	800aa7c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	e02f      	b.n	800aadc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00f      	beq.n	800aaa6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d009      	beq.n	800aaa6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	6852      	ldr	r2, [r2, #4]
 800aa9e:	b2d2      	uxtb	r2, r2
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaa6:	2340      	movs	r3, #64	; 0x40
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	2100      	movs	r1, #0
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 fae0 	bl	800c072 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2240      	movs	r2, #64	; 0x40
 800aabe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aac2:	2340      	movs	r3, #64	; 0x40
 800aac4:	2200      	movs	r2, #0
 800aac6:	2180      	movs	r1, #128	; 0x80
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f001 fad2 	bl	800c072 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2201      	movs	r2, #1
 800aad2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2240      	movs	r2, #64	; 0x40
 800aad8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3708      	adds	r7, #8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	78fa      	ldrb	r2, [r7, #3]
 800aaf4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab12:	b2da      	uxtb	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	d106      	bne.n	800ab52 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e012      	b.n	800ab9c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d10b      	bne.n	800ab9a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab94:	69db      	ldr	r3, [r3, #28]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	460b      	mov	r3, r1
 800abae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d101      	bne.n	800abbe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800abba:	2303      	movs	r3, #3
 800abbc:	e014      	b.n	800abe8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	d10d      	bne.n	800abe6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d007      	beq.n	800abe6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	78fa      	ldrb	r2, [r7, #3]
 800abe0:	4611      	mov	r1, r2
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	460b      	mov	r3, r1
 800abfa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d101      	bne.n	800ac0a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ac06:	2303      	movs	r3, #3
 800ac08:	e014      	b.n	800ac34 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d10d      	bne.n	800ac32 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d007      	beq.n	800ac32 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	78fa      	ldrb	r2, [r7, #3]
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d009      	beq.n	800ac80 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	6852      	ldr	r2, [r2, #4]
 800ac78:	b2d2      	uxtb	r2, r2
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	4798      	blx	r3
  }

  return USBD_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b087      	sub	sp, #28
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aca8:	8a3b      	ldrh	r3, [r7, #16]
 800acaa:	021b      	lsls	r3, r3, #8
 800acac:	b21a      	sxth	r2, r3
 800acae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	b21b      	sxth	r3, r3
 800acb6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800acb8:	89fb      	ldrh	r3, [r7, #14]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	371c      	adds	r7, #28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
	...

0800acc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acde:	2b40      	cmp	r3, #64	; 0x40
 800ace0:	d005      	beq.n	800acee <USBD_StdDevReq+0x26>
 800ace2:	2b40      	cmp	r3, #64	; 0x40
 800ace4:	d853      	bhi.n	800ad8e <USBD_StdDevReq+0xc6>
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00b      	beq.n	800ad02 <USBD_StdDevReq+0x3a>
 800acea:	2b20      	cmp	r3, #32
 800acec:	d14f      	bne.n	800ad8e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	4798      	blx	r3
 800acfc:	4603      	mov	r3, r0
 800acfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ad00:	e04a      	b.n	800ad98 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	785b      	ldrb	r3, [r3, #1]
 800ad06:	2b09      	cmp	r3, #9
 800ad08:	d83b      	bhi.n	800ad82 <USBD_StdDevReq+0xba>
 800ad0a:	a201      	add	r2, pc, #4	; (adr r2, 800ad10 <USBD_StdDevReq+0x48>)
 800ad0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad10:	0800ad65 	.word	0x0800ad65
 800ad14:	0800ad79 	.word	0x0800ad79
 800ad18:	0800ad83 	.word	0x0800ad83
 800ad1c:	0800ad6f 	.word	0x0800ad6f
 800ad20:	0800ad83 	.word	0x0800ad83
 800ad24:	0800ad43 	.word	0x0800ad43
 800ad28:	0800ad39 	.word	0x0800ad39
 800ad2c:	0800ad83 	.word	0x0800ad83
 800ad30:	0800ad5b 	.word	0x0800ad5b
 800ad34:	0800ad4d 	.word	0x0800ad4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 f9de 	bl	800b0fc <USBD_GetDescriptor>
          break;
 800ad40:	e024      	b.n	800ad8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fb43 	bl	800b3d0 <USBD_SetAddress>
          break;
 800ad4a:	e01f      	b.n	800ad8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fb82 	bl	800b458 <USBD_SetConfig>
 800ad54:	4603      	mov	r3, r0
 800ad56:	73fb      	strb	r3, [r7, #15]
          break;
 800ad58:	e018      	b.n	800ad8c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fc21 	bl	800b5a4 <USBD_GetConfig>
          break;
 800ad62:	e013      	b.n	800ad8c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fc52 	bl	800b610 <USBD_GetStatus>
          break;
 800ad6c:	e00e      	b.n	800ad8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fc81 	bl	800b678 <USBD_SetFeature>
          break;
 800ad76:	e009      	b.n	800ad8c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fc90 	bl	800b6a0 <USBD_ClrFeature>
          break;
 800ad80:	e004      	b.n	800ad8c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fce7 	bl	800b758 <USBD_CtlError>
          break;
 800ad8a:	bf00      	nop
      }
      break;
 800ad8c:	e004      	b.n	800ad98 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fce1 	bl	800b758 <USBD_CtlError>
      break;
 800ad96:	bf00      	nop
  }

  return ret;
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop

0800ada4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adba:	2b40      	cmp	r3, #64	; 0x40
 800adbc:	d005      	beq.n	800adca <USBD_StdItfReq+0x26>
 800adbe:	2b40      	cmp	r3, #64	; 0x40
 800adc0:	d82f      	bhi.n	800ae22 <USBD_StdItfReq+0x7e>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <USBD_StdItfReq+0x26>
 800adc6:	2b20      	cmp	r3, #32
 800adc8:	d12b      	bne.n	800ae22 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800add0:	b2db      	uxtb	r3, r3
 800add2:	3b01      	subs	r3, #1
 800add4:	2b02      	cmp	r3, #2
 800add6:	d81d      	bhi.n	800ae14 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	889b      	ldrh	r3, [r3, #4]
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d813      	bhi.n	800ae0a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	4798      	blx	r3
 800adf0:	4603      	mov	r3, r0
 800adf2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	88db      	ldrh	r3, [r3, #6]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d110      	bne.n	800ae1e <USBD_StdItfReq+0x7a>
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10d      	bne.n	800ae1e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fd73 	bl	800b8ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae08:	e009      	b.n	800ae1e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fca3 	bl	800b758 <USBD_CtlError>
          break;
 800ae12:	e004      	b.n	800ae1e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fc9e 	bl	800b758 <USBD_CtlError>
          break;
 800ae1c:	e000      	b.n	800ae20 <USBD_StdItfReq+0x7c>
          break;
 800ae1e:	bf00      	nop
      }
      break;
 800ae20:	e004      	b.n	800ae2c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fc97 	bl	800b758 <USBD_CtlError>
      break;
 800ae2a:	bf00      	nop
  }

  return ret;
 800ae2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	889b      	ldrh	r3, [r3, #4]
 800ae48:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae52:	2b40      	cmp	r3, #64	; 0x40
 800ae54:	d007      	beq.n	800ae66 <USBD_StdEPReq+0x30>
 800ae56:	2b40      	cmp	r3, #64	; 0x40
 800ae58:	f200 8145 	bhi.w	800b0e6 <USBD_StdEPReq+0x2b0>
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00c      	beq.n	800ae7a <USBD_StdEPReq+0x44>
 800ae60:	2b20      	cmp	r3, #32
 800ae62:	f040 8140 	bne.w	800b0e6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	4798      	blx	r3
 800ae74:	4603      	mov	r3, r0
 800ae76:	73fb      	strb	r3, [r7, #15]
      break;
 800ae78:	e13a      	b.n	800b0f0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	785b      	ldrb	r3, [r3, #1]
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	d007      	beq.n	800ae92 <USBD_StdEPReq+0x5c>
 800ae82:	2b03      	cmp	r3, #3
 800ae84:	f300 8129 	bgt.w	800b0da <USBD_StdEPReq+0x2a4>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d07f      	beq.n	800af8c <USBD_StdEPReq+0x156>
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d03c      	beq.n	800af0a <USBD_StdEPReq+0xd4>
 800ae90:	e123      	b.n	800b0da <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d002      	beq.n	800aea4 <USBD_StdEPReq+0x6e>
 800ae9e:	2b03      	cmp	r3, #3
 800aea0:	d016      	beq.n	800aed0 <USBD_StdEPReq+0x9a>
 800aea2:	e02c      	b.n	800aefe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aea4:	7bbb      	ldrb	r3, [r7, #14]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00d      	beq.n	800aec6 <USBD_StdEPReq+0x90>
 800aeaa:	7bbb      	ldrb	r3, [r7, #14]
 800aeac:	2b80      	cmp	r3, #128	; 0x80
 800aeae:	d00a      	beq.n	800aec6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 f921 	bl	800c0fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeba:	2180      	movs	r1, #128	; 0x80
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f001 f91d 	bl	800c0fc <USBD_LL_StallEP>
 800aec2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aec4:	e020      	b.n	800af08 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fc45 	bl	800b758 <USBD_CtlError>
              break;
 800aece:	e01b      	b.n	800af08 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	885b      	ldrh	r3, [r3, #2]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10e      	bne.n	800aef6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aed8:	7bbb      	ldrb	r3, [r7, #14]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00b      	beq.n	800aef6 <USBD_StdEPReq+0xc0>
 800aede:	7bbb      	ldrb	r3, [r7, #14]
 800aee0:	2b80      	cmp	r3, #128	; 0x80
 800aee2:	d008      	beq.n	800aef6 <USBD_StdEPReq+0xc0>
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	88db      	ldrh	r3, [r3, #6]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d104      	bne.n	800aef6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f001 f903 	bl	800c0fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fcf9 	bl	800b8ee <USBD_CtlSendStatus>

              break;
 800aefc:	e004      	b.n	800af08 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fc29 	bl	800b758 <USBD_CtlError>
              break;
 800af06:	bf00      	nop
          }
          break;
 800af08:	e0ec      	b.n	800b0e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b02      	cmp	r3, #2
 800af14:	d002      	beq.n	800af1c <USBD_StdEPReq+0xe6>
 800af16:	2b03      	cmp	r3, #3
 800af18:	d016      	beq.n	800af48 <USBD_StdEPReq+0x112>
 800af1a:	e030      	b.n	800af7e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00d      	beq.n	800af3e <USBD_StdEPReq+0x108>
 800af22:	7bbb      	ldrb	r3, [r7, #14]
 800af24:	2b80      	cmp	r3, #128	; 0x80
 800af26:	d00a      	beq.n	800af3e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af28:	7bbb      	ldrb	r3, [r7, #14]
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f001 f8e5 	bl	800c0fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af32:	2180      	movs	r1, #128	; 0x80
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f001 f8e1 	bl	800c0fc <USBD_LL_StallEP>
 800af3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af3c:	e025      	b.n	800af8a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800af3e:	6839      	ldr	r1, [r7, #0]
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fc09 	bl	800b758 <USBD_CtlError>
              break;
 800af46:	e020      	b.n	800af8a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	885b      	ldrh	r3, [r3, #2]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d11b      	bne.n	800af88 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af50:	7bbb      	ldrb	r3, [r7, #14]
 800af52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af56:	2b00      	cmp	r3, #0
 800af58:	d004      	beq.n	800af64 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	4619      	mov	r1, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 f8eb 	bl	800c13a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fcc2 	bl	800b8ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	4798      	blx	r3
 800af78:	4603      	mov	r3, r0
 800af7a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800af7c:	e004      	b.n	800af88 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fbe9 	bl	800b758 <USBD_CtlError>
              break;
 800af86:	e000      	b.n	800af8a <USBD_StdEPReq+0x154>
              break;
 800af88:	bf00      	nop
          }
          break;
 800af8a:	e0ab      	b.n	800b0e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b02      	cmp	r3, #2
 800af96:	d002      	beq.n	800af9e <USBD_StdEPReq+0x168>
 800af98:	2b03      	cmp	r3, #3
 800af9a:	d032      	beq.n	800b002 <USBD_StdEPReq+0x1cc>
 800af9c:	e097      	b.n	800b0ce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af9e:	7bbb      	ldrb	r3, [r7, #14]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d007      	beq.n	800afb4 <USBD_StdEPReq+0x17e>
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
 800afa6:	2b80      	cmp	r3, #128	; 0x80
 800afa8:	d004      	beq.n	800afb4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fbd3 	bl	800b758 <USBD_CtlError>
                break;
 800afb2:	e091      	b.n	800b0d8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	da0b      	bge.n	800afd4 <USBD_StdEPReq+0x19e>
 800afbc:	7bbb      	ldrb	r3, [r7, #14]
 800afbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afc2:	4613      	mov	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	3310      	adds	r3, #16
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	4413      	add	r3, r2
 800afd0:	3304      	adds	r3, #4
 800afd2:	e00b      	b.n	800afec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
 800afd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afda:	4613      	mov	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	4413      	add	r3, r2
 800afea:	3304      	adds	r3, #4
 800afec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2200      	movs	r2, #0
 800aff2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2202      	movs	r2, #2
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 fc1d 	bl	800b83a <USBD_CtlSendData>
              break;
 800b000:	e06a      	b.n	800b0d8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b006:	2b00      	cmp	r3, #0
 800b008:	da11      	bge.n	800b02e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	f003 020f 	and.w	r2, r3, #15
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	4613      	mov	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	440b      	add	r3, r1
 800b01c:	3324      	adds	r3, #36	; 0x24
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d117      	bne.n	800b054 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fb96 	bl	800b758 <USBD_CtlError>
                  break;
 800b02c:	e054      	b.n	800b0d8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
 800b030:	f003 020f 	and.w	r2, r3, #15
 800b034:	6879      	ldr	r1, [r7, #4]
 800b036:	4613      	mov	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	440b      	add	r3, r1
 800b040:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d104      	bne.n	800b054 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fb83 	bl	800b758 <USBD_CtlError>
                  break;
 800b052:	e041      	b.n	800b0d8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	da0b      	bge.n	800b074 <USBD_StdEPReq+0x23e>
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
 800b05e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b062:	4613      	mov	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	3310      	adds	r3, #16
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	4413      	add	r3, r2
 800b070:	3304      	adds	r3, #4
 800b072:	e00b      	b.n	800b08c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b074:	7bbb      	ldrb	r3, [r7, #14]
 800b076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b07a:	4613      	mov	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	4413      	add	r3, r2
 800b08a:	3304      	adds	r3, #4
 800b08c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b08e:	7bbb      	ldrb	r3, [r7, #14]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <USBD_StdEPReq+0x264>
 800b094:	7bbb      	ldrb	r3, [r7, #14]
 800b096:	2b80      	cmp	r3, #128	; 0x80
 800b098:	d103      	bne.n	800b0a2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	2200      	movs	r2, #0
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	e00e      	b.n	800b0c0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f001 f866 	bl	800c178 <USBD_LL_IsStallEP>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	601a      	str	r2, [r3, #0]
 800b0b8:	e002      	b.n	800b0c0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fbb7 	bl	800b83a <USBD_CtlSendData>
              break;
 800b0cc:	e004      	b.n	800b0d8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fb41 	bl	800b758 <USBD_CtlError>
              break;
 800b0d6:	bf00      	nop
          }
          break;
 800b0d8:	e004      	b.n	800b0e4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fb3b 	bl	800b758 <USBD_CtlError>
          break;
 800b0e2:	bf00      	nop
      }
      break;
 800b0e4:	e004      	b.n	800b0f0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fb35 	bl	800b758 <USBD_CtlError>
      break;
 800b0ee:	bf00      	nop
  }

  return ret;
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
	...

0800b0fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b10a:	2300      	movs	r3, #0
 800b10c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b10e:	2300      	movs	r3, #0
 800b110:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	885b      	ldrh	r3, [r3, #2]
 800b116:	0a1b      	lsrs	r3, r3, #8
 800b118:	b29b      	uxth	r3, r3
 800b11a:	3b01      	subs	r3, #1
 800b11c:	2b06      	cmp	r3, #6
 800b11e:	f200 8128 	bhi.w	800b372 <USBD_GetDescriptor+0x276>
 800b122:	a201      	add	r2, pc, #4	; (adr r2, 800b128 <USBD_GetDescriptor+0x2c>)
 800b124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b128:	0800b145 	.word	0x0800b145
 800b12c:	0800b15d 	.word	0x0800b15d
 800b130:	0800b19d 	.word	0x0800b19d
 800b134:	0800b373 	.word	0x0800b373
 800b138:	0800b373 	.word	0x0800b373
 800b13c:	0800b313 	.word	0x0800b313
 800b140:	0800b33f 	.word	0x0800b33f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	7c12      	ldrb	r2, [r2, #16]
 800b150:	f107 0108 	add.w	r1, r7, #8
 800b154:	4610      	mov	r0, r2
 800b156:	4798      	blx	r3
 800b158:	60f8      	str	r0, [r7, #12]
      break;
 800b15a:	e112      	b.n	800b382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	7c1b      	ldrb	r3, [r3, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10d      	bne.n	800b180 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16c:	f107 0208 	add.w	r2, r7, #8
 800b170:	4610      	mov	r0, r2
 800b172:	4798      	blx	r3
 800b174:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3301      	adds	r3, #1
 800b17a:	2202      	movs	r2, #2
 800b17c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b17e:	e100      	b.n	800b382 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b188:	f107 0208 	add.w	r2, r7, #8
 800b18c:	4610      	mov	r0, r2
 800b18e:	4798      	blx	r3
 800b190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	2202      	movs	r2, #2
 800b198:	701a      	strb	r2, [r3, #0]
      break;
 800b19a:	e0f2      	b.n	800b382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	885b      	ldrh	r3, [r3, #2]
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b05      	cmp	r3, #5
 800b1a4:	f200 80ac 	bhi.w	800b300 <USBD_GetDescriptor+0x204>
 800b1a8:	a201      	add	r2, pc, #4	; (adr r2, 800b1b0 <USBD_GetDescriptor+0xb4>)
 800b1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ae:	bf00      	nop
 800b1b0:	0800b1c9 	.word	0x0800b1c9
 800b1b4:	0800b1fd 	.word	0x0800b1fd
 800b1b8:	0800b231 	.word	0x0800b231
 800b1bc:	0800b265 	.word	0x0800b265
 800b1c0:	0800b299 	.word	0x0800b299
 800b1c4:	0800b2cd 	.word	0x0800b2cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00b      	beq.n	800b1ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	7c12      	ldrb	r2, [r2, #16]
 800b1e0:	f107 0108 	add.w	r1, r7, #8
 800b1e4:	4610      	mov	r0, r2
 800b1e6:	4798      	blx	r3
 800b1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ea:	e091      	b.n	800b310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fab2 	bl	800b758 <USBD_CtlError>
            err++;
 800b1f4:	7afb      	ldrb	r3, [r7, #11]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1fa:	e089      	b.n	800b310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00b      	beq.n	800b220 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	7c12      	ldrb	r2, [r2, #16]
 800b214:	f107 0108 	add.w	r1, r7, #8
 800b218:	4610      	mov	r0, r2
 800b21a:	4798      	blx	r3
 800b21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b21e:	e077      	b.n	800b310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fa98 	bl	800b758 <USBD_CtlError>
            err++;
 800b228:	7afb      	ldrb	r3, [r7, #11]
 800b22a:	3301      	adds	r3, #1
 800b22c:	72fb      	strb	r3, [r7, #11]
          break;
 800b22e:	e06f      	b.n	800b310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00b      	beq.n	800b254 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	7c12      	ldrb	r2, [r2, #16]
 800b248:	f107 0108 	add.w	r1, r7, #8
 800b24c:	4610      	mov	r0, r2
 800b24e:	4798      	blx	r3
 800b250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b252:	e05d      	b.n	800b310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fa7e 	bl	800b758 <USBD_CtlError>
            err++;
 800b25c:	7afb      	ldrb	r3, [r7, #11]
 800b25e:	3301      	adds	r3, #1
 800b260:	72fb      	strb	r3, [r7, #11]
          break;
 800b262:	e055      	b.n	800b310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00b      	beq.n	800b288 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b276:	691b      	ldr	r3, [r3, #16]
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	7c12      	ldrb	r2, [r2, #16]
 800b27c:	f107 0108 	add.w	r1, r7, #8
 800b280:	4610      	mov	r0, r2
 800b282:	4798      	blx	r3
 800b284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b286:	e043      	b.n	800b310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fa64 	bl	800b758 <USBD_CtlError>
            err++;
 800b290:	7afb      	ldrb	r3, [r7, #11]
 800b292:	3301      	adds	r3, #1
 800b294:	72fb      	strb	r3, [r7, #11]
          break;
 800b296:	e03b      	b.n	800b310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d00b      	beq.n	800b2bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	7c12      	ldrb	r2, [r2, #16]
 800b2b0:	f107 0108 	add.w	r1, r7, #8
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	4798      	blx	r3
 800b2b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ba:	e029      	b.n	800b310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fa4a 	bl	800b758 <USBD_CtlError>
            err++;
 800b2c4:	7afb      	ldrb	r3, [r7, #11]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ca:	e021      	b.n	800b310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00b      	beq.n	800b2f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	7c12      	ldrb	r2, [r2, #16]
 800b2e4:	f107 0108 	add.w	r1, r7, #8
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	4798      	blx	r3
 800b2ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ee:	e00f      	b.n	800b310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 fa30 	bl	800b758 <USBD_CtlError>
            err++;
 800b2f8:	7afb      	ldrb	r3, [r7, #11]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b2fe:	e007      	b.n	800b310 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fa28 	bl	800b758 <USBD_CtlError>
          err++;
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	3301      	adds	r3, #1
 800b30c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b30e:	bf00      	nop
      }
      break;
 800b310:	e037      	b.n	800b382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	7c1b      	ldrb	r3, [r3, #16]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d109      	bne.n	800b32e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b322:	f107 0208 	add.w	r2, r7, #8
 800b326:	4610      	mov	r0, r2
 800b328:	4798      	blx	r3
 800b32a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b32c:	e029      	b.n	800b382 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fa11 	bl	800b758 <USBD_CtlError>
        err++;
 800b336:	7afb      	ldrb	r3, [r7, #11]
 800b338:	3301      	adds	r3, #1
 800b33a:	72fb      	strb	r3, [r7, #11]
      break;
 800b33c:	e021      	b.n	800b382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	7c1b      	ldrb	r3, [r3, #16]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10d      	bne.n	800b362 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34e:	f107 0208 	add.w	r2, r7, #8
 800b352:	4610      	mov	r0, r2
 800b354:	4798      	blx	r3
 800b356:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	3301      	adds	r3, #1
 800b35c:	2207      	movs	r2, #7
 800b35e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b360:	e00f      	b.n	800b382 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b362:	6839      	ldr	r1, [r7, #0]
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f9f7 	bl	800b758 <USBD_CtlError>
        err++;
 800b36a:	7afb      	ldrb	r3, [r7, #11]
 800b36c:	3301      	adds	r3, #1
 800b36e:	72fb      	strb	r3, [r7, #11]
      break;
 800b370:	e007      	b.n	800b382 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f9ef 	bl	800b758 <USBD_CtlError>
      err++;
 800b37a:	7afb      	ldrb	r3, [r7, #11]
 800b37c:	3301      	adds	r3, #1
 800b37e:	72fb      	strb	r3, [r7, #11]
      break;
 800b380:	bf00      	nop
  }

  if (err != 0U)
 800b382:	7afb      	ldrb	r3, [r7, #11]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d11e      	bne.n	800b3c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	88db      	ldrh	r3, [r3, #6]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d016      	beq.n	800b3be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b390:	893b      	ldrh	r3, [r7, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00e      	beq.n	800b3b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	88da      	ldrh	r2, [r3, #6]
 800b39a:	893b      	ldrh	r3, [r7, #8]
 800b39c:	4293      	cmp	r3, r2
 800b39e:	bf28      	it	cs
 800b3a0:	4613      	movcs	r3, r2
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b3a6:	893b      	ldrh	r3, [r7, #8]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	68f9      	ldr	r1, [r7, #12]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fa44 	bl	800b83a <USBD_CtlSendData>
 800b3b2:	e009      	b.n	800b3c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f9ce 	bl	800b758 <USBD_CtlError>
 800b3bc:	e004      	b.n	800b3c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fa95 	bl	800b8ee <USBD_CtlSendStatus>
 800b3c4:	e000      	b.n	800b3c8 <USBD_GetDescriptor+0x2cc>
    return;
 800b3c6:	bf00      	nop
  }
}
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop

0800b3d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	889b      	ldrh	r3, [r3, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d131      	bne.n	800b446 <USBD_SetAddress+0x76>
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	88db      	ldrh	r3, [r3, #6]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d12d      	bne.n	800b446 <USBD_SetAddress+0x76>
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	885b      	ldrh	r3, [r3, #2]
 800b3ee:	2b7f      	cmp	r3, #127	; 0x7f
 800b3f0:	d829      	bhi.n	800b446 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	885b      	ldrh	r3, [r3, #2]
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b03      	cmp	r3, #3
 800b408:	d104      	bne.n	800b414 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b40a:	6839      	ldr	r1, [r7, #0]
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 f9a3 	bl	800b758 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b412:	e01d      	b.n	800b450 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	7bfa      	ldrb	r2, [r7, #15]
 800b418:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b41c:	7bfb      	ldrb	r3, [r7, #15]
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fed5 	bl	800c1d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fa61 	bl	800b8ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d004      	beq.n	800b43c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2202      	movs	r2, #2
 800b436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b43a:	e009      	b.n	800b450 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b444:	e004      	b.n	800b450 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 f985 	bl	800b758 <USBD_CtlError>
  }
}
 800b44e:	bf00      	nop
 800b450:	bf00      	nop
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	885b      	ldrh	r3, [r3, #2]
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	4b4c      	ldr	r3, [pc, #304]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b46e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b470:	4b4b      	ldr	r3, [pc, #300]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d905      	bls.n	800b484 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f96c 	bl	800b758 <USBD_CtlError>
    return USBD_FAIL;
 800b480:	2303      	movs	r3, #3
 800b482:	e088      	b.n	800b596 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b02      	cmp	r3, #2
 800b48e:	d002      	beq.n	800b496 <USBD_SetConfig+0x3e>
 800b490:	2b03      	cmp	r3, #3
 800b492:	d025      	beq.n	800b4e0 <USBD_SetConfig+0x88>
 800b494:	e071      	b.n	800b57a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b496:	4b42      	ldr	r3, [pc, #264]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d01c      	beq.n	800b4d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b49e:	4b40      	ldr	r3, [pc, #256]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4a8:	4b3d      	ldr	r3, [pc, #244]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7ff f948 	bl	800a744 <USBD_SetClassConfig>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d004      	beq.n	800b4c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b4be:	6839      	ldr	r1, [r7, #0]
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 f949 	bl	800b758 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4c6:	e065      	b.n	800b594 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fa10 	bl	800b8ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2203      	movs	r2, #3
 800b4d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b4d6:	e05d      	b.n	800b594 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fa08 	bl	800b8ee <USBD_CtlSendStatus>
      break;
 800b4de:	e059      	b.n	800b594 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b4e0:	4b2f      	ldr	r3, [pc, #188]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d112      	bne.n	800b50e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b4f0:	4b2b      	ldr	r3, [pc, #172]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4fa:	4b29      	ldr	r3, [pc, #164]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7ff f93b 	bl	800a77c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f9f1 	bl	800b8ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b50c:	e042      	b.n	800b594 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b50e:	4b24      	ldr	r3, [pc, #144]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	461a      	mov	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d02a      	beq.n	800b572 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	b2db      	uxtb	r3, r3
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7ff f929 	bl	800a77c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b52a:	4b1d      	ldr	r3, [pc, #116]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	461a      	mov	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b534:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7ff f902 	bl	800a744 <USBD_SetClassConfig>
 800b540:	4603      	mov	r3, r0
 800b542:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b544:	7bfb      	ldrb	r3, [r7, #15]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00f      	beq.n	800b56a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f903 	bl	800b758 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	b2db      	uxtb	r3, r3
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7ff f90e 	bl	800a77c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2202      	movs	r2, #2
 800b564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b568:	e014      	b.n	800b594 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f9bf 	bl	800b8ee <USBD_CtlSendStatus>
      break;
 800b570:	e010      	b.n	800b594 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f9bb 	bl	800b8ee <USBD_CtlSendStatus>
      break;
 800b578:	e00c      	b.n	800b594 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f8eb 	bl	800b758 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b582:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <USBD_SetConfig+0x148>)
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7ff f8f7 	bl	800a77c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b58e:	2303      	movs	r3, #3
 800b590:	73fb      	strb	r3, [r7, #15]
      break;
 800b592:	bf00      	nop
  }

  return ret;
 800b594:	7bfb      	ldrb	r3, [r7, #15]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	200002dc 	.word	0x200002dc

0800b5a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	88db      	ldrh	r3, [r3, #6]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d004      	beq.n	800b5c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b5b6:	6839      	ldr	r1, [r7, #0]
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f8cd 	bl	800b758 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b5be:	e023      	b.n	800b608 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	dc02      	bgt.n	800b5d2 <USBD_GetConfig+0x2e>
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	dc03      	bgt.n	800b5d8 <USBD_GetConfig+0x34>
 800b5d0:	e015      	b.n	800b5fe <USBD_GetConfig+0x5a>
 800b5d2:	2b03      	cmp	r3, #3
 800b5d4:	d00b      	beq.n	800b5ee <USBD_GetConfig+0x4a>
 800b5d6:	e012      	b.n	800b5fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	3308      	adds	r3, #8
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f927 	bl	800b83a <USBD_CtlSendData>
        break;
 800b5ec:	e00c      	b.n	800b608 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f91f 	bl	800b83a <USBD_CtlSendData>
        break;
 800b5fc:	e004      	b.n	800b608 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f8a9 	bl	800b758 <USBD_CtlError>
        break;
 800b606:	bf00      	nop
}
 800b608:	bf00      	nop
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b620:	b2db      	uxtb	r3, r3
 800b622:	3b01      	subs	r3, #1
 800b624:	2b02      	cmp	r3, #2
 800b626:	d81e      	bhi.n	800b666 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	88db      	ldrh	r3, [r3, #6]
 800b62c:	2b02      	cmp	r3, #2
 800b62e:	d004      	beq.n	800b63a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 f890 	bl	800b758 <USBD_CtlError>
        break;
 800b638:	e01a      	b.n	800b670 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b646:	2b00      	cmp	r3, #0
 800b648:	d005      	beq.n	800b656 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	f043 0202 	orr.w	r2, r3, #2
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	330c      	adds	r3, #12
 800b65a:	2202      	movs	r2, #2
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f8eb 	bl	800b83a <USBD_CtlSendData>
      break;
 800b664:	e004      	b.n	800b670 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b666:	6839      	ldr	r1, [r7, #0]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f875 	bl	800b758 <USBD_CtlError>
      break;
 800b66e:	bf00      	nop
  }
}
 800b670:	bf00      	nop
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	885b      	ldrh	r3, [r3, #2]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d106      	bne.n	800b698 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f92b 	bl	800b8ee <USBD_CtlSendStatus>
  }
}
 800b698:	bf00      	nop
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d80b      	bhi.n	800b6d0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	885b      	ldrh	r3, [r3, #2]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d10c      	bne.n	800b6da <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f910 	bl	800b8ee <USBD_CtlSendStatus>
      }
      break;
 800b6ce:	e004      	b.n	800b6da <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f840 	bl	800b758 <USBD_CtlError>
      break;
 800b6d8:	e000      	b.n	800b6dc <USBD_ClrFeature+0x3c>
      break;
 800b6da:	bf00      	nop
  }
}
 800b6dc:	bf00      	nop
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	781a      	ldrb	r2, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	781a      	ldrb	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3301      	adds	r3, #1
 800b70c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7ff fabb 	bl	800ac8a <SWAPBYTE>
 800b714:	4603      	mov	r3, r0
 800b716:	461a      	mov	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	3301      	adds	r3, #1
 800b720:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	3301      	adds	r3, #1
 800b726:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f7ff faae 	bl	800ac8a <SWAPBYTE>
 800b72e:	4603      	mov	r3, r0
 800b730:	461a      	mov	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	3301      	adds	r3, #1
 800b73a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	3301      	adds	r3, #1
 800b740:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7ff faa1 	bl	800ac8a <SWAPBYTE>
 800b748:	4603      	mov	r3, r0
 800b74a:	461a      	mov	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	80da      	strh	r2, [r3, #6]
}
 800b750:	bf00      	nop
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b762:	2180      	movs	r1, #128	; 0x80
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fcc9 	bl	800c0fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b76a:	2100      	movs	r1, #0
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fcc5 	bl	800c0fc <USBD_LL_StallEP>
}
 800b772:	bf00      	nop
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b086      	sub	sp, #24
 800b77e:	af00      	add	r7, sp, #0
 800b780:	60f8      	str	r0, [r7, #12]
 800b782:	60b9      	str	r1, [r7, #8]
 800b784:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b786:	2300      	movs	r3, #0
 800b788:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d036      	beq.n	800b7fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b794:	6938      	ldr	r0, [r7, #16]
 800b796:	f000 f836 	bl	800b806 <USBD_GetLen>
 800b79a:	4603      	mov	r3, r0
 800b79c:	3301      	adds	r3, #1
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	005b      	lsls	r3, r3, #1
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b7a8:	7dfb      	ldrb	r3, [r7, #23]
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	7812      	ldrb	r2, [r2, #0]
 800b7b2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7b4:	7dfb      	ldrb	r3, [r7, #23]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	4413      	add	r3, r2
 800b7c0:	2203      	movs	r2, #3
 800b7c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7c4:	7dfb      	ldrb	r3, [r7, #23]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b7ca:	e013      	b.n	800b7f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	693a      	ldr	r2, [r7, #16]
 800b7d4:	7812      	ldrb	r2, [r2, #0]
 800b7d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	613b      	str	r3, [r7, #16]
    idx++;
 800b7de:	7dfb      	ldrb	r3, [r7, #23]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b7e4:	7dfb      	ldrb	r3, [r7, #23]
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	701a      	strb	r2, [r3, #0]
    idx++;
 800b7ee:	7dfb      	ldrb	r3, [r7, #23]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1e7      	bne.n	800b7cc <USBD_GetString+0x52>
 800b7fc:	e000      	b.n	800b800 <USBD_GetString+0x86>
    return;
 800b7fe:	bf00      	nop
  }
}
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b806:	b480      	push	{r7}
 800b808:	b085      	sub	sp, #20
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b80e:	2300      	movs	r3, #0
 800b810:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b816:	e005      	b.n	800b824 <USBD_GetLen+0x1e>
  {
    len++;
 800b818:	7bfb      	ldrb	r3, [r7, #15]
 800b81a:	3301      	adds	r3, #1
 800b81c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	3301      	adds	r3, #1
 800b822:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1f5      	bne.n	800b818 <USBD_GetLen+0x12>
  }

  return len;
 800b82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b084      	sub	sp, #16
 800b83e:	af00      	add	r7, sp, #0
 800b840:	60f8      	str	r0, [r7, #12]
 800b842:	60b9      	str	r1, [r7, #8]
 800b844:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2202      	movs	r2, #2
 800b84a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	2100      	movs	r1, #0
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 fcd4 	bl	800c20e <USBD_LL_Transmit>

  return USBD_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3710      	adds	r7, #16
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	68ba      	ldr	r2, [r7, #8]
 800b880:	2100      	movs	r1, #0
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f000 fcc3 	bl	800c20e <USBD_LL_Transmit>

  return USBD_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b084      	sub	sp, #16
 800b896:	af00      	add	r7, sp, #0
 800b898:	60f8      	str	r0, [r7, #12]
 800b89a:	60b9      	str	r1, [r7, #8]
 800b89c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2203      	movs	r2, #3
 800b8a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f000 fcc7 	bl	800c250 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	2100      	movs	r1, #0
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f000 fcb6 	bl	800c250 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8e4:	2300      	movs	r3, #0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b082      	sub	sp, #8
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2204      	movs	r2, #4
 800b8fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b8fe:	2300      	movs	r3, #0
 800b900:	2200      	movs	r2, #0
 800b902:	2100      	movs	r1, #0
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fc82 	bl	800c20e <USBD_LL_Transmit>

  return USBD_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2205      	movs	r2, #5
 800b920:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b924:	2300      	movs	r3, #0
 800b926:	2200      	movs	r2, #0
 800b928:	2100      	movs	r1, #0
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fc90 	bl	800c250 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
	...

0800b93c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b940:	2200      	movs	r2, #0
 800b942:	4912      	ldr	r1, [pc, #72]	; (800b98c <MX_USB_DEVICE_Init+0x50>)
 800b944:	4812      	ldr	r0, [pc, #72]	; (800b990 <MX_USB_DEVICE_Init+0x54>)
 800b946:	f7fe fe8f 	bl	800a668 <USBD_Init>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b950:	f7f7 fc3a 	bl	80031c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b954:	490f      	ldr	r1, [pc, #60]	; (800b994 <MX_USB_DEVICE_Init+0x58>)
 800b956:	480e      	ldr	r0, [pc, #56]	; (800b990 <MX_USB_DEVICE_Init+0x54>)
 800b958:	f7fe feb6 	bl	800a6c8 <USBD_RegisterClass>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b962:	f7f7 fc31 	bl	80031c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b966:	490c      	ldr	r1, [pc, #48]	; (800b998 <MX_USB_DEVICE_Init+0x5c>)
 800b968:	4809      	ldr	r0, [pc, #36]	; (800b990 <MX_USB_DEVICE_Init+0x54>)
 800b96a:	f7fe fe07 	bl	800a57c <USBD_CDC_RegisterInterface>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b974:	f7f7 fc28 	bl	80031c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b978:	4805      	ldr	r0, [pc, #20]	; (800b990 <MX_USB_DEVICE_Init+0x54>)
 800b97a:	f7fe fecc 	bl	800a716 <USBD_Start>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b984:	f7f7 fc20 	bl	80031c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b988:	bf00      	nop
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	2000013c 	.word	0x2000013c
 800b990:	20000700 	.word	0x20000700
 800b994:	20000024 	.word	0x20000024
 800b998:	20000128 	.word	0x20000128

0800b99c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	4905      	ldr	r1, [pc, #20]	; (800b9b8 <CDC_Init_FS+0x1c>)
 800b9a4:	4805      	ldr	r0, [pc, #20]	; (800b9bc <CDC_Init_FS+0x20>)
 800b9a6:	f7fe fdfe 	bl	800a5a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b9aa:	4905      	ldr	r1, [pc, #20]	; (800b9c0 <CDC_Init_FS+0x24>)
 800b9ac:	4803      	ldr	r0, [pc, #12]	; (800b9bc <CDC_Init_FS+0x20>)
 800b9ae:	f7fe fe18 	bl	800a5e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b9b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	200011d0 	.word	0x200011d0
 800b9bc:	20000700 	.word	0x20000700
 800b9c0:	200009d0 	.word	0x200009d0

0800b9c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b9c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	6039      	str	r1, [r7, #0]
 800b9de:	71fb      	strb	r3, [r7, #7]
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b9e4:	79fb      	ldrb	r3, [r7, #7]
 800b9e6:	2b23      	cmp	r3, #35	; 0x23
 800b9e8:	d84a      	bhi.n	800ba80 <CDC_Control_FS+0xac>
 800b9ea:	a201      	add	r2, pc, #4	; (adr r2, 800b9f0 <CDC_Control_FS+0x1c>)
 800b9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f0:	0800ba81 	.word	0x0800ba81
 800b9f4:	0800ba81 	.word	0x0800ba81
 800b9f8:	0800ba81 	.word	0x0800ba81
 800b9fc:	0800ba81 	.word	0x0800ba81
 800ba00:	0800ba81 	.word	0x0800ba81
 800ba04:	0800ba81 	.word	0x0800ba81
 800ba08:	0800ba81 	.word	0x0800ba81
 800ba0c:	0800ba81 	.word	0x0800ba81
 800ba10:	0800ba81 	.word	0x0800ba81
 800ba14:	0800ba81 	.word	0x0800ba81
 800ba18:	0800ba81 	.word	0x0800ba81
 800ba1c:	0800ba81 	.word	0x0800ba81
 800ba20:	0800ba81 	.word	0x0800ba81
 800ba24:	0800ba81 	.word	0x0800ba81
 800ba28:	0800ba81 	.word	0x0800ba81
 800ba2c:	0800ba81 	.word	0x0800ba81
 800ba30:	0800ba81 	.word	0x0800ba81
 800ba34:	0800ba81 	.word	0x0800ba81
 800ba38:	0800ba81 	.word	0x0800ba81
 800ba3c:	0800ba81 	.word	0x0800ba81
 800ba40:	0800ba81 	.word	0x0800ba81
 800ba44:	0800ba81 	.word	0x0800ba81
 800ba48:	0800ba81 	.word	0x0800ba81
 800ba4c:	0800ba81 	.word	0x0800ba81
 800ba50:	0800ba81 	.word	0x0800ba81
 800ba54:	0800ba81 	.word	0x0800ba81
 800ba58:	0800ba81 	.word	0x0800ba81
 800ba5c:	0800ba81 	.word	0x0800ba81
 800ba60:	0800ba81 	.word	0x0800ba81
 800ba64:	0800ba81 	.word	0x0800ba81
 800ba68:	0800ba81 	.word	0x0800ba81
 800ba6c:	0800ba81 	.word	0x0800ba81
 800ba70:	0800ba81 	.word	0x0800ba81
 800ba74:	0800ba81 	.word	0x0800ba81
 800ba78:	0800ba81 	.word	0x0800ba81
 800ba7c:	0800ba81 	.word	0x0800ba81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba80:	bf00      	nop
  }

  return (USBD_OK);
 800ba82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ba9a:	6879      	ldr	r1, [r7, #4]
 800ba9c:	4805      	ldr	r0, [pc, #20]	; (800bab4 <CDC_Receive_FS+0x24>)
 800ba9e:	f7fe fda0 	bl	800a5e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800baa2:	4804      	ldr	r0, [pc, #16]	; (800bab4 <CDC_Receive_FS+0x24>)
 800baa4:	f7fe fdb6 	bl	800a614 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800baa8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20000700 	.word	0x20000700

0800bab8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bab8:	b480      	push	{r7}
 800baba:	b087      	sub	sp, #28
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	4613      	mov	r3, r2
 800bac4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800baca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	371c      	adds	r7, #28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
	...

0800badc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	4603      	mov	r3, r0
 800bae4:	6039      	str	r1, [r7, #0]
 800bae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	2212      	movs	r2, #18
 800baec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800baee:	4b03      	ldr	r3, [pc, #12]	; (800bafc <USBD_FS_DeviceDescriptor+0x20>)
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr
 800bafc:	20000158 	.word	0x20000158

0800bb00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	4603      	mov	r3, r0
 800bb08:	6039      	str	r1, [r7, #0]
 800bb0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	2204      	movs	r2, #4
 800bb10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb12:	4b03      	ldr	r3, [pc, #12]	; (800bb20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	2000016c 	.word	0x2000016c

0800bb24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	6039      	str	r1, [r7, #0]
 800bb2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb30:	79fb      	ldrb	r3, [r7, #7]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d105      	bne.n	800bb42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	4907      	ldr	r1, [pc, #28]	; (800bb58 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb3a:	4808      	ldr	r0, [pc, #32]	; (800bb5c <USBD_FS_ProductStrDescriptor+0x38>)
 800bb3c:	f7ff fe1d 	bl	800b77a <USBD_GetString>
 800bb40:	e004      	b.n	800bb4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	4904      	ldr	r1, [pc, #16]	; (800bb58 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb46:	4805      	ldr	r0, [pc, #20]	; (800bb5c <USBD_FS_ProductStrDescriptor+0x38>)
 800bb48:	f7ff fe17 	bl	800b77a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb4c:	4b02      	ldr	r3, [pc, #8]	; (800bb58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	200019d0 	.word	0x200019d0
 800bb5c:	0800d91c 	.word	0x0800d91c

0800bb60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	4603      	mov	r3, r0
 800bb68:	6039      	str	r1, [r7, #0]
 800bb6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	4904      	ldr	r1, [pc, #16]	; (800bb80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb70:	4804      	ldr	r0, [pc, #16]	; (800bb84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb72:	f7ff fe02 	bl	800b77a <USBD_GetString>
  return USBD_StrDesc;
 800bb76:	4b02      	ldr	r3, [pc, #8]	; (800bb80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	200019d0 	.word	0x200019d0
 800bb84:	0800d92c 	.word	0x0800d92c

0800bb88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	6039      	str	r1, [r7, #0]
 800bb92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	221a      	movs	r2, #26
 800bb98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb9a:	f000 f843 	bl	800bc24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bb9e:	4b02      	ldr	r3, [pc, #8]	; (800bba8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	20000170 	.word	0x20000170

0800bbac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	6039      	str	r1, [r7, #0]
 800bbb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbb8:	79fb      	ldrb	r3, [r7, #7]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d105      	bne.n	800bbca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	4907      	ldr	r1, [pc, #28]	; (800bbe0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbc2:	4808      	ldr	r0, [pc, #32]	; (800bbe4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbc4:	f7ff fdd9 	bl	800b77a <USBD_GetString>
 800bbc8:	e004      	b.n	800bbd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	4904      	ldr	r1, [pc, #16]	; (800bbe0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbce:	4805      	ldr	r0, [pc, #20]	; (800bbe4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbd0:	f7ff fdd3 	bl	800b77a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbd4:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	200019d0 	.word	0x200019d0
 800bbe4:	0800d940 	.word	0x0800d940

0800bbe8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	6039      	str	r1, [r7, #0]
 800bbf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbf4:	79fb      	ldrb	r3, [r7, #7]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d105      	bne.n	800bc06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	4907      	ldr	r1, [pc, #28]	; (800bc1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbfe:	4808      	ldr	r0, [pc, #32]	; (800bc20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc00:	f7ff fdbb 	bl	800b77a <USBD_GetString>
 800bc04:	e004      	b.n	800bc10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	4904      	ldr	r1, [pc, #16]	; (800bc1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc0a:	4805      	ldr	r0, [pc, #20]	; (800bc20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc0c:	f7ff fdb5 	bl	800b77a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc10:	4b02      	ldr	r3, [pc, #8]	; (800bc1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	200019d0 	.word	0x200019d0
 800bc20:	0800d94c 	.word	0x0800d94c

0800bc24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc2a:	4b0f      	ldr	r3, [pc, #60]	; (800bc68 <Get_SerialNum+0x44>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc30:	4b0e      	ldr	r3, [pc, #56]	; (800bc6c <Get_SerialNum+0x48>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc36:	4b0e      	ldr	r3, [pc, #56]	; (800bc70 <Get_SerialNum+0x4c>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4413      	add	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d009      	beq.n	800bc5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc4a:	2208      	movs	r2, #8
 800bc4c:	4909      	ldr	r1, [pc, #36]	; (800bc74 <Get_SerialNum+0x50>)
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f000 f814 	bl	800bc7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc54:	2204      	movs	r2, #4
 800bc56:	4908      	ldr	r1, [pc, #32]	; (800bc78 <Get_SerialNum+0x54>)
 800bc58:	68b8      	ldr	r0, [r7, #8]
 800bc5a:	f000 f80f 	bl	800bc7c <IntToUnicode>
  }
}
 800bc5e:	bf00      	nop
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	1fff7a10 	.word	0x1fff7a10
 800bc6c:	1fff7a14 	.word	0x1fff7a14
 800bc70:	1fff7a18 	.word	0x1fff7a18
 800bc74:	20000172 	.word	0x20000172
 800bc78:	20000182 	.word	0x20000182

0800bc7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	4613      	mov	r3, r2
 800bc88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc8e:	2300      	movs	r3, #0
 800bc90:	75fb      	strb	r3, [r7, #23]
 800bc92:	e027      	b.n	800bce4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	0f1b      	lsrs	r3, r3, #28
 800bc98:	2b09      	cmp	r3, #9
 800bc9a:	d80b      	bhi.n	800bcb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	0f1b      	lsrs	r3, r3, #28
 800bca0:	b2da      	uxtb	r2, r3
 800bca2:	7dfb      	ldrb	r3, [r7, #23]
 800bca4:	005b      	lsls	r3, r3, #1
 800bca6:	4619      	mov	r1, r3
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	440b      	add	r3, r1
 800bcac:	3230      	adds	r2, #48	; 0x30
 800bcae:	b2d2      	uxtb	r2, r2
 800bcb0:	701a      	strb	r2, [r3, #0]
 800bcb2:	e00a      	b.n	800bcca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	0f1b      	lsrs	r3, r3, #28
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	440b      	add	r3, r1
 800bcc4:	3237      	adds	r2, #55	; 0x37
 800bcc6:	b2d2      	uxtb	r2, r2
 800bcc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	011b      	lsls	r3, r3, #4
 800bcce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bcd0:	7dfb      	ldrb	r3, [r7, #23]
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	4413      	add	r3, r2
 800bcda:	2200      	movs	r2, #0
 800bcdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	3301      	adds	r3, #1
 800bce2:	75fb      	strb	r3, [r7, #23]
 800bce4:	7dfa      	ldrb	r2, [r7, #23]
 800bce6:	79fb      	ldrb	r3, [r7, #7]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d3d3      	bcc.n	800bc94 <IntToUnicode+0x18>
  }
}
 800bcec:	bf00      	nop
 800bcee:	bf00      	nop
 800bcf0:	371c      	adds	r7, #28
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
	...

0800bcfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b08a      	sub	sp, #40	; 0x28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd04:	f107 0314 	add.w	r3, r7, #20
 800bd08:	2200      	movs	r2, #0
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	605a      	str	r2, [r3, #4]
 800bd0e:	609a      	str	r2, [r3, #8]
 800bd10:	60da      	str	r2, [r3, #12]
 800bd12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd1c:	d147      	bne.n	800bdae <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd1e:	2300      	movs	r3, #0
 800bd20:	613b      	str	r3, [r7, #16]
 800bd22:	4b25      	ldr	r3, [pc, #148]	; (800bdb8 <HAL_PCD_MspInit+0xbc>)
 800bd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd26:	4a24      	ldr	r2, [pc, #144]	; (800bdb8 <HAL_PCD_MspInit+0xbc>)
 800bd28:	f043 0301 	orr.w	r3, r3, #1
 800bd2c:	6313      	str	r3, [r2, #48]	; 0x30
 800bd2e:	4b22      	ldr	r3, [pc, #136]	; (800bdb8 <HAL_PCD_MspInit+0xbc>)
 800bd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd32:	f003 0301 	and.w	r3, r3, #1
 800bd36:	613b      	str	r3, [r7, #16]
 800bd38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bd3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd40:	2300      	movs	r3, #0
 800bd42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd44:	2300      	movs	r3, #0
 800bd46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd48:	f107 0314 	add.w	r3, r7, #20
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	481b      	ldr	r0, [pc, #108]	; (800bdbc <HAL_PCD_MspInit+0xc0>)
 800bd50:	f7f8 ffe6 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800bd54:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800bd58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd62:	2303      	movs	r3, #3
 800bd64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd66:	230a      	movs	r3, #10
 800bd68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd6a:	f107 0314 	add.w	r3, r7, #20
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4812      	ldr	r0, [pc, #72]	; (800bdbc <HAL_PCD_MspInit+0xc0>)
 800bd72:	f7f8 ffd5 	bl	8004d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bd76:	4b10      	ldr	r3, [pc, #64]	; (800bdb8 <HAL_PCD_MspInit+0xbc>)
 800bd78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7a:	4a0f      	ldr	r2, [pc, #60]	; (800bdb8 <HAL_PCD_MspInit+0xbc>)
 800bd7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd80:	6353      	str	r3, [r2, #52]	; 0x34
 800bd82:	2300      	movs	r3, #0
 800bd84:	60fb      	str	r3, [r7, #12]
 800bd86:	4b0c      	ldr	r3, [pc, #48]	; (800bdb8 <HAL_PCD_MspInit+0xbc>)
 800bd88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd8a:	4a0b      	ldr	r2, [pc, #44]	; (800bdb8 <HAL_PCD_MspInit+0xbc>)
 800bd8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd90:	6453      	str	r3, [r2, #68]	; 0x44
 800bd92:	4b09      	ldr	r3, [pc, #36]	; (800bdb8 <HAL_PCD_MspInit+0xbc>)
 800bd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd9a:	60fb      	str	r3, [r7, #12]
 800bd9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bd9e:	2200      	movs	r2, #0
 800bda0:	2100      	movs	r1, #0
 800bda2:	2043      	movs	r0, #67	; 0x43
 800bda4:	f7f8 ff85 	bl	8004cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bda8:	2043      	movs	r0, #67	; 0x43
 800bdaa:	f7f8 ff9e 	bl	8004cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bdae:	bf00      	nop
 800bdb0:	3728      	adds	r7, #40	; 0x28
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	40023800 	.word	0x40023800
 800bdbc:	40020000 	.word	0x40020000

0800bdc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	4610      	mov	r0, r2
 800bdd8:	f7fe fce8 	bl	800a7ac <USBD_LL_SetupStage>
}
 800bddc:	bf00      	nop
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	460b      	mov	r3, r1
 800bdee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bdf6:	78fa      	ldrb	r2, [r7, #3]
 800bdf8:	6879      	ldr	r1, [r7, #4]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	1a9b      	subs	r3, r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	440b      	add	r3, r1
 800be04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	78fb      	ldrb	r3, [r7, #3]
 800be0c:	4619      	mov	r1, r3
 800be0e:	f7fe fd22 	bl	800a856 <USBD_LL_DataOutStage>
}
 800be12:	bf00      	nop
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b082      	sub	sp, #8
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	460b      	mov	r3, r1
 800be24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800be2c:	78fa      	ldrb	r2, [r7, #3]
 800be2e:	6879      	ldr	r1, [r7, #4]
 800be30:	4613      	mov	r3, r2
 800be32:	00db      	lsls	r3, r3, #3
 800be34:	1a9b      	subs	r3, r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	440b      	add	r3, r1
 800be3a:	3348      	adds	r3, #72	; 0x48
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	78fb      	ldrb	r3, [r7, #3]
 800be40:	4619      	mov	r1, r3
 800be42:	f7fe fd6b 	bl	800a91c <USBD_LL_DataInStage>
}
 800be46:	bf00      	nop
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b082      	sub	sp, #8
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fe fe7f 	bl	800ab60 <USBD_LL_SOF>
}
 800be62:	bf00      	nop
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b084      	sub	sp, #16
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be72:	2301      	movs	r3, #1
 800be74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d102      	bne.n	800be84 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800be7e:	2300      	movs	r3, #0
 800be80:	73fb      	strb	r3, [r7, #15]
 800be82:	e008      	b.n	800be96 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	2b02      	cmp	r3, #2
 800be8a:	d102      	bne.n	800be92 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800be8c:	2301      	movs	r3, #1
 800be8e:	73fb      	strb	r3, [r7, #15]
 800be90:	e001      	b.n	800be96 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800be92:	f7f7 f999 	bl	80031c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be9c:	7bfa      	ldrb	r2, [r7, #15]
 800be9e:	4611      	mov	r1, r2
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7fe fe1f 	bl	800aae4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800beac:	4618      	mov	r0, r3
 800beae:	f7fe fdcb 	bl	800aa48 <USBD_LL_Reset>
}
 800beb2:	bf00      	nop
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
	...

0800bebc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe fe1a 	bl	800ab04 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	6812      	ldr	r2, [r2, #0]
 800bede:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bee2:	f043 0301 	orr.w	r3, r3, #1
 800bee6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a1b      	ldr	r3, [r3, #32]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d005      	beq.n	800befc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bef0:	4b04      	ldr	r3, [pc, #16]	; (800bf04 <HAL_PCD_SuspendCallback+0x48>)
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	4a03      	ldr	r2, [pc, #12]	; (800bf04 <HAL_PCD_SuspendCallback+0x48>)
 800bef6:	f043 0306 	orr.w	r3, r3, #6
 800befa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800befc:	bf00      	nop
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	e000ed00 	.word	0xe000ed00

0800bf08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe fe0a 	bl	800ab30 <USBD_LL_Resume>
}
 800bf1c:	bf00      	nop
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf36:	78fa      	ldrb	r2, [r7, #3]
 800bf38:	4611      	mov	r1, r2
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe fe58 	bl	800abf0 <USBD_LL_IsoOUTIncomplete>
}
 800bf40:	bf00      	nop
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	460b      	mov	r3, r1
 800bf52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf5a:	78fa      	ldrb	r2, [r7, #3]
 800bf5c:	4611      	mov	r1, r2
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fe fe20 	bl	800aba4 <USBD_LL_IsoINIncomplete>
}
 800bf64:	bf00      	nop
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe fe5e 	bl	800ac3c <USBD_LL_DevConnected>
}
 800bf80:	bf00      	nop
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fe fe5b 	bl	800ac52 <USBD_LL_DevDisconnected>
}
 800bf9c:	bf00      	nop
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d13c      	bne.n	800c02e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bfb4:	4a20      	ldr	r2, [pc, #128]	; (800c038 <USBD_LL_Init+0x94>)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4a1e      	ldr	r2, [pc, #120]	; (800c038 <USBD_LL_Init+0x94>)
 800bfc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bfc4:	4b1c      	ldr	r3, [pc, #112]	; (800c038 <USBD_LL_Init+0x94>)
 800bfc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bfca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bfcc:	4b1a      	ldr	r3, [pc, #104]	; (800c038 <USBD_LL_Init+0x94>)
 800bfce:	2204      	movs	r2, #4
 800bfd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bfd2:	4b19      	ldr	r3, [pc, #100]	; (800c038 <USBD_LL_Init+0x94>)
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bfd8:	4b17      	ldr	r3, [pc, #92]	; (800c038 <USBD_LL_Init+0x94>)
 800bfda:	2200      	movs	r2, #0
 800bfdc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bfde:	4b16      	ldr	r3, [pc, #88]	; (800c038 <USBD_LL_Init+0x94>)
 800bfe0:	2202      	movs	r2, #2
 800bfe2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bfe4:	4b14      	ldr	r3, [pc, #80]	; (800c038 <USBD_LL_Init+0x94>)
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bfea:	4b13      	ldr	r3, [pc, #76]	; (800c038 <USBD_LL_Init+0x94>)
 800bfec:	2200      	movs	r2, #0
 800bfee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bff0:	4b11      	ldr	r3, [pc, #68]	; (800c038 <USBD_LL_Init+0x94>)
 800bff2:	2200      	movs	r2, #0
 800bff4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bff6:	4b10      	ldr	r3, [pc, #64]	; (800c038 <USBD_LL_Init+0x94>)
 800bff8:	2201      	movs	r2, #1
 800bffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bffc:	4b0e      	ldr	r3, [pc, #56]	; (800c038 <USBD_LL_Init+0x94>)
 800bffe:	2200      	movs	r2, #0
 800c000:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c002:	480d      	ldr	r0, [pc, #52]	; (800c038 <USBD_LL_Init+0x94>)
 800c004:	f7fa f937 	bl	8006276 <HAL_PCD_Init>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c00e:	f7f7 f8db 	bl	80031c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c012:	2180      	movs	r1, #128	; 0x80
 800c014:	4808      	ldr	r0, [pc, #32]	; (800c038 <USBD_LL_Init+0x94>)
 800c016:	f7fb fa94 	bl	8007542 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c01a:	2240      	movs	r2, #64	; 0x40
 800c01c:	2100      	movs	r1, #0
 800c01e:	4806      	ldr	r0, [pc, #24]	; (800c038 <USBD_LL_Init+0x94>)
 800c020:	f7fb fa48 	bl	80074b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c024:	2280      	movs	r2, #128	; 0x80
 800c026:	2101      	movs	r1, #1
 800c028:	4803      	ldr	r0, [pc, #12]	; (800c038 <USBD_LL_Init+0x94>)
 800c02a:	f7fb fa43 	bl	80074b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	20001bd0 	.word	0x20001bd0

0800c03c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c048:	2300      	movs	r3, #0
 800c04a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c052:	4618      	mov	r0, r3
 800c054:	f7fa fa2c 	bl	80064b0 <HAL_PCD_Start>
 800c058:	4603      	mov	r3, r0
 800c05a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 f942 	bl	800c2e8 <USBD_Get_USB_Status>
 800c064:	4603      	mov	r3, r0
 800c066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c068:	7bbb      	ldrb	r3, [r7, #14]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	4608      	mov	r0, r1
 800c07c:	4611      	mov	r1, r2
 800c07e:	461a      	mov	r2, r3
 800c080:	4603      	mov	r3, r0
 800c082:	70fb      	strb	r3, [r7, #3]
 800c084:	460b      	mov	r3, r1
 800c086:	70bb      	strb	r3, [r7, #2]
 800c088:	4613      	mov	r3, r2
 800c08a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c08c:	2300      	movs	r3, #0
 800c08e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c09a:	78bb      	ldrb	r3, [r7, #2]
 800c09c:	883a      	ldrh	r2, [r7, #0]
 800c09e:	78f9      	ldrb	r1, [r7, #3]
 800c0a0:	f7fa fe10 	bl	8006cc4 <HAL_PCD_EP_Open>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 f91c 	bl	800c2e8 <USBD_Get_USB_Status>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b084      	sub	sp, #16
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0d8:	78fa      	ldrb	r2, [r7, #3]
 800c0da:	4611      	mov	r1, r2
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fa fe59 	bl	8006d94 <HAL_PCD_EP_Close>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 f8fd 	bl	800c2e8 <USBD_Get_USB_Status>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c10c:	2300      	movs	r3, #0
 800c10e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c116:	78fa      	ldrb	r2, [r7, #3]
 800c118:	4611      	mov	r1, r2
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fa ff31 	bl	8006f82 <HAL_PCD_EP_SetStall>
 800c120:	4603      	mov	r3, r0
 800c122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c124:	7bfb      	ldrb	r3, [r7, #15]
 800c126:	4618      	mov	r0, r3
 800c128:	f000 f8de 	bl	800c2e8 <USBD_Get_USB_Status>
 800c12c:	4603      	mov	r3, r0
 800c12e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c130:	7bbb      	ldrb	r3, [r7, #14]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	460b      	mov	r3, r1
 800c144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c14a:	2300      	movs	r3, #0
 800c14c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c154:	78fa      	ldrb	r2, [r7, #3]
 800c156:	4611      	mov	r1, r2
 800c158:	4618      	mov	r0, r3
 800c15a:	f7fa ff76 	bl	800704a <HAL_PCD_EP_ClrStall>
 800c15e:	4603      	mov	r3, r0
 800c160:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c162:	7bfb      	ldrb	r3, [r7, #15]
 800c164:	4618      	mov	r0, r3
 800c166:	f000 f8bf 	bl	800c2e8 <USBD_Get_USB_Status>
 800c16a:	4603      	mov	r3, r0
 800c16c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c16e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c18a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c18c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c190:	2b00      	cmp	r3, #0
 800c192:	da0b      	bge.n	800c1ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c194:	78fb      	ldrb	r3, [r7, #3]
 800c196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c19a:	68f9      	ldr	r1, [r7, #12]
 800c19c:	4613      	mov	r3, r2
 800c19e:	00db      	lsls	r3, r3, #3
 800c1a0:	1a9b      	subs	r3, r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	440b      	add	r3, r1
 800c1a6:	333e      	adds	r3, #62	; 0x3e
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	e00b      	b.n	800c1c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c1ac:	78fb      	ldrb	r3, [r7, #3]
 800c1ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1b2:	68f9      	ldr	r1, [r7, #12]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	1a9b      	subs	r3, r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	440b      	add	r3, r1
 800c1be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1ea:	78fa      	ldrb	r2, [r7, #3]
 800c1ec:	4611      	mov	r1, r2
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fa fd43 	bl	8006c7a <HAL_PCD_SetAddress>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f000 f874 	bl	800c2e8 <USBD_Get_USB_Status>
 800c200:	4603      	mov	r3, r0
 800c202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c204:	7bbb      	ldrb	r3, [r7, #14]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b086      	sub	sp, #24
 800c212:	af00      	add	r7, sp, #0
 800c214:	60f8      	str	r0, [r7, #12]
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
 800c21a:	460b      	mov	r3, r1
 800c21c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c222:	2300      	movs	r3, #0
 800c224:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c22c:	7af9      	ldrb	r1, [r7, #11]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	f7fa fe5c 	bl	8006eee <HAL_PCD_EP_Transmit>
 800c236:	4603      	mov	r3, r0
 800c238:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c23a:	7dfb      	ldrb	r3, [r7, #23]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 f853 	bl	800c2e8 <USBD_Get_USB_Status>
 800c242:	4603      	mov	r3, r0
 800c244:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c246:	7dbb      	ldrb	r3, [r7, #22]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	607a      	str	r2, [r7, #4]
 800c25a:	603b      	str	r3, [r7, #0]
 800c25c:	460b      	mov	r3, r1
 800c25e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c26e:	7af9      	ldrb	r1, [r7, #11]
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	f7fa fdd8 	bl	8006e28 <HAL_PCD_EP_Receive>
 800c278:	4603      	mov	r3, r0
 800c27a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c27c:	7dfb      	ldrb	r3, [r7, #23]
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f832 	bl	800c2e8 <USBD_Get_USB_Status>
 800c284:	4603      	mov	r3, r0
 800c286:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c288:	7dbb      	ldrb	r3, [r7, #22]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3718      	adds	r7, #24
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b082      	sub	sp, #8
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	460b      	mov	r3, r1
 800c29c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2a4:	78fa      	ldrb	r2, [r7, #3]
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fa fe08 	bl	8006ebe <HAL_PCD_EP_GetRxCount>
 800c2ae:	4603      	mov	r3, r0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c2c0:	4b03      	ldr	r3, [pc, #12]	; (800c2d0 <USBD_static_malloc+0x18>)
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	200002e0 	.word	0x200002e0

0800c2d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]

}
 800c2dc:	bf00      	nop
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c2f6:	79fb      	ldrb	r3, [r7, #7]
 800c2f8:	2b03      	cmp	r3, #3
 800c2fa:	d817      	bhi.n	800c32c <USBD_Get_USB_Status+0x44>
 800c2fc:	a201      	add	r2, pc, #4	; (adr r2, 800c304 <USBD_Get_USB_Status+0x1c>)
 800c2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c302:	bf00      	nop
 800c304:	0800c315 	.word	0x0800c315
 800c308:	0800c31b 	.word	0x0800c31b
 800c30c:	0800c321 	.word	0x0800c321
 800c310:	0800c327 	.word	0x0800c327
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	73fb      	strb	r3, [r7, #15]
    break;
 800c318:	e00b      	b.n	800c332 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c31a:	2303      	movs	r3, #3
 800c31c:	73fb      	strb	r3, [r7, #15]
    break;
 800c31e:	e008      	b.n	800c332 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c320:	2301      	movs	r3, #1
 800c322:	73fb      	strb	r3, [r7, #15]
    break;
 800c324:	e005      	b.n	800c332 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c326:	2303      	movs	r3, #3
 800c328:	73fb      	strb	r3, [r7, #15]
    break;
 800c32a:	e002      	b.n	800c332 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c32c:	2303      	movs	r3, #3
 800c32e:	73fb      	strb	r3, [r7, #15]
    break;
 800c330:	bf00      	nop
  }
  return usb_status;
 800c332:	7bfb      	ldrb	r3, [r7, #15]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <__errno>:
 800c340:	4b01      	ldr	r3, [pc, #4]	; (800c348 <__errno+0x8>)
 800c342:	6818      	ldr	r0, [r3, #0]
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	2000018c 	.word	0x2000018c

0800c34c <__libc_init_array>:
 800c34c:	b570      	push	{r4, r5, r6, lr}
 800c34e:	4d0d      	ldr	r5, [pc, #52]	; (800c384 <__libc_init_array+0x38>)
 800c350:	4c0d      	ldr	r4, [pc, #52]	; (800c388 <__libc_init_array+0x3c>)
 800c352:	1b64      	subs	r4, r4, r5
 800c354:	10a4      	asrs	r4, r4, #2
 800c356:	2600      	movs	r6, #0
 800c358:	42a6      	cmp	r6, r4
 800c35a:	d109      	bne.n	800c370 <__libc_init_array+0x24>
 800c35c:	4d0b      	ldr	r5, [pc, #44]	; (800c38c <__libc_init_array+0x40>)
 800c35e:	4c0c      	ldr	r4, [pc, #48]	; (800c390 <__libc_init_array+0x44>)
 800c360:	f001 fac8 	bl	800d8f4 <_init>
 800c364:	1b64      	subs	r4, r4, r5
 800c366:	10a4      	asrs	r4, r4, #2
 800c368:	2600      	movs	r6, #0
 800c36a:	42a6      	cmp	r6, r4
 800c36c:	d105      	bne.n	800c37a <__libc_init_array+0x2e>
 800c36e:	bd70      	pop	{r4, r5, r6, pc}
 800c370:	f855 3b04 	ldr.w	r3, [r5], #4
 800c374:	4798      	blx	r3
 800c376:	3601      	adds	r6, #1
 800c378:	e7ee      	b.n	800c358 <__libc_init_array+0xc>
 800c37a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c37e:	4798      	blx	r3
 800c380:	3601      	adds	r6, #1
 800c382:	e7f2      	b.n	800c36a <__libc_init_array+0x1e>
 800c384:	0800da38 	.word	0x0800da38
 800c388:	0800da38 	.word	0x0800da38
 800c38c:	0800da38 	.word	0x0800da38
 800c390:	0800da3c 	.word	0x0800da3c

0800c394 <memcpy>:
 800c394:	440a      	add	r2, r1
 800c396:	4291      	cmp	r1, r2
 800c398:	f100 33ff 	add.w	r3, r0, #4294967295
 800c39c:	d100      	bne.n	800c3a0 <memcpy+0xc>
 800c39e:	4770      	bx	lr
 800c3a0:	b510      	push	{r4, lr}
 800c3a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3aa:	4291      	cmp	r1, r2
 800c3ac:	d1f9      	bne.n	800c3a2 <memcpy+0xe>
 800c3ae:	bd10      	pop	{r4, pc}

0800c3b0 <memset>:
 800c3b0:	4402      	add	r2, r0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d100      	bne.n	800c3ba <memset+0xa>
 800c3b8:	4770      	bx	lr
 800c3ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c3be:	e7f9      	b.n	800c3b4 <memset+0x4>

0800c3c0 <ceilf>:
 800c3c0:	ee10 3a10 	vmov	r3, s0
 800c3c4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c3c8:	3a7f      	subs	r2, #127	; 0x7f
 800c3ca:	2a16      	cmp	r2, #22
 800c3cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c3d0:	dc2a      	bgt.n	800c428 <ceilf+0x68>
 800c3d2:	2a00      	cmp	r2, #0
 800c3d4:	da11      	bge.n	800c3fa <ceilf+0x3a>
 800c3d6:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c43c <ceilf+0x7c>
 800c3da:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c3de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e6:	dd05      	ble.n	800c3f4 <ceilf+0x34>
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	db23      	blt.n	800c434 <ceilf+0x74>
 800c3ec:	2900      	cmp	r1, #0
 800c3ee:	bf18      	it	ne
 800c3f0:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800c3f4:	ee00 3a10 	vmov	s0, r3
 800c3f8:	4770      	bx	lr
 800c3fa:	4911      	ldr	r1, [pc, #68]	; (800c440 <ceilf+0x80>)
 800c3fc:	4111      	asrs	r1, r2
 800c3fe:	420b      	tst	r3, r1
 800c400:	d0fa      	beq.n	800c3f8 <ceilf+0x38>
 800c402:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c43c <ceilf+0x7c>
 800c406:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c40a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c412:	ddef      	ble.n	800c3f4 <ceilf+0x34>
 800c414:	2b00      	cmp	r3, #0
 800c416:	bfc2      	ittt	gt
 800c418:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800c41c:	fa40 f202 	asrgt.w	r2, r0, r2
 800c420:	189b      	addgt	r3, r3, r2
 800c422:	ea23 0301 	bic.w	r3, r3, r1
 800c426:	e7e5      	b.n	800c3f4 <ceilf+0x34>
 800c428:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c42c:	d3e4      	bcc.n	800c3f8 <ceilf+0x38>
 800c42e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c432:	4770      	bx	lr
 800c434:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c438:	e7dc      	b.n	800c3f4 <ceilf+0x34>
 800c43a:	bf00      	nop
 800c43c:	7149f2ca 	.word	0x7149f2ca
 800c440:	007fffff 	.word	0x007fffff

0800c444 <atan2>:
 800c444:	f000 b8e4 	b.w	800c610 <__ieee754_atan2>

0800c448 <pow>:
 800c448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c44c:	ec59 8b10 	vmov	r8, r9, d0
 800c450:	ec57 6b11 	vmov	r6, r7, d1
 800c454:	f000 f9a8 	bl	800c7a8 <__ieee754_pow>
 800c458:	4b4e      	ldr	r3, [pc, #312]	; (800c594 <pow+0x14c>)
 800c45a:	f993 3000 	ldrsb.w	r3, [r3]
 800c45e:	3301      	adds	r3, #1
 800c460:	ec55 4b10 	vmov	r4, r5, d0
 800c464:	d015      	beq.n	800c492 <pow+0x4a>
 800c466:	4632      	mov	r2, r6
 800c468:	463b      	mov	r3, r7
 800c46a:	4630      	mov	r0, r6
 800c46c:	4639      	mov	r1, r7
 800c46e:	f7f4 fb01 	bl	8000a74 <__aeabi_dcmpun>
 800c472:	b970      	cbnz	r0, 800c492 <pow+0x4a>
 800c474:	4642      	mov	r2, r8
 800c476:	464b      	mov	r3, r9
 800c478:	4640      	mov	r0, r8
 800c47a:	4649      	mov	r1, r9
 800c47c:	f7f4 fafa 	bl	8000a74 <__aeabi_dcmpun>
 800c480:	2200      	movs	r2, #0
 800c482:	2300      	movs	r3, #0
 800c484:	b148      	cbz	r0, 800c49a <pow+0x52>
 800c486:	4630      	mov	r0, r6
 800c488:	4639      	mov	r1, r7
 800c48a:	f7f4 fac1 	bl	8000a10 <__aeabi_dcmpeq>
 800c48e:	2800      	cmp	r0, #0
 800c490:	d17d      	bne.n	800c58e <pow+0x146>
 800c492:	ec45 4b10 	vmov	d0, r4, r5
 800c496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c49a:	4640      	mov	r0, r8
 800c49c:	4649      	mov	r1, r9
 800c49e:	f7f4 fab7 	bl	8000a10 <__aeabi_dcmpeq>
 800c4a2:	b1e0      	cbz	r0, 800c4de <pow+0x96>
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	f7f4 fab0 	bl	8000a10 <__aeabi_dcmpeq>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d16c      	bne.n	800c58e <pow+0x146>
 800c4b4:	ec47 6b10 	vmov	d0, r6, r7
 800c4b8:	f001 f8f7 	bl	800d6aa <finite>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d0e8      	beq.n	800c492 <pow+0x4a>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	4639      	mov	r1, r7
 800c4c8:	f7f4 faac 	bl	8000a24 <__aeabi_dcmplt>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d0e0      	beq.n	800c492 <pow+0x4a>
 800c4d0:	f7ff ff36 	bl	800c340 <__errno>
 800c4d4:	2321      	movs	r3, #33	; 0x21
 800c4d6:	6003      	str	r3, [r0, #0]
 800c4d8:	2400      	movs	r4, #0
 800c4da:	4d2f      	ldr	r5, [pc, #188]	; (800c598 <pow+0x150>)
 800c4dc:	e7d9      	b.n	800c492 <pow+0x4a>
 800c4de:	ec45 4b10 	vmov	d0, r4, r5
 800c4e2:	f001 f8e2 	bl	800d6aa <finite>
 800c4e6:	bbb8      	cbnz	r0, 800c558 <pow+0x110>
 800c4e8:	ec49 8b10 	vmov	d0, r8, r9
 800c4ec:	f001 f8dd 	bl	800d6aa <finite>
 800c4f0:	b390      	cbz	r0, 800c558 <pow+0x110>
 800c4f2:	ec47 6b10 	vmov	d0, r6, r7
 800c4f6:	f001 f8d8 	bl	800d6aa <finite>
 800c4fa:	b368      	cbz	r0, 800c558 <pow+0x110>
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	462b      	mov	r3, r5
 800c500:	4620      	mov	r0, r4
 800c502:	4629      	mov	r1, r5
 800c504:	f7f4 fab6 	bl	8000a74 <__aeabi_dcmpun>
 800c508:	b160      	cbz	r0, 800c524 <pow+0xdc>
 800c50a:	f7ff ff19 	bl	800c340 <__errno>
 800c50e:	2321      	movs	r3, #33	; 0x21
 800c510:	6003      	str	r3, [r0, #0]
 800c512:	2200      	movs	r2, #0
 800c514:	2300      	movs	r3, #0
 800c516:	4610      	mov	r0, r2
 800c518:	4619      	mov	r1, r3
 800c51a:	f7f4 f93b 	bl	8000794 <__aeabi_ddiv>
 800c51e:	4604      	mov	r4, r0
 800c520:	460d      	mov	r5, r1
 800c522:	e7b6      	b.n	800c492 <pow+0x4a>
 800c524:	f7ff ff0c 	bl	800c340 <__errno>
 800c528:	2322      	movs	r3, #34	; 0x22
 800c52a:	6003      	str	r3, [r0, #0]
 800c52c:	2200      	movs	r2, #0
 800c52e:	2300      	movs	r3, #0
 800c530:	4640      	mov	r0, r8
 800c532:	4649      	mov	r1, r9
 800c534:	f7f4 fa76 	bl	8000a24 <__aeabi_dcmplt>
 800c538:	2400      	movs	r4, #0
 800c53a:	b158      	cbz	r0, 800c554 <pow+0x10c>
 800c53c:	ec47 6b10 	vmov	d0, r6, r7
 800c540:	f001 f8c6 	bl	800d6d0 <rint>
 800c544:	4632      	mov	r2, r6
 800c546:	ec51 0b10 	vmov	r0, r1, d0
 800c54a:	463b      	mov	r3, r7
 800c54c:	f7f4 fa60 	bl	8000a10 <__aeabi_dcmpeq>
 800c550:	2800      	cmp	r0, #0
 800c552:	d0c2      	beq.n	800c4da <pow+0x92>
 800c554:	4d11      	ldr	r5, [pc, #68]	; (800c59c <pow+0x154>)
 800c556:	e79c      	b.n	800c492 <pow+0x4a>
 800c558:	2200      	movs	r2, #0
 800c55a:	2300      	movs	r3, #0
 800c55c:	4620      	mov	r0, r4
 800c55e:	4629      	mov	r1, r5
 800c560:	f7f4 fa56 	bl	8000a10 <__aeabi_dcmpeq>
 800c564:	2800      	cmp	r0, #0
 800c566:	d094      	beq.n	800c492 <pow+0x4a>
 800c568:	ec49 8b10 	vmov	d0, r8, r9
 800c56c:	f001 f89d 	bl	800d6aa <finite>
 800c570:	2800      	cmp	r0, #0
 800c572:	d08e      	beq.n	800c492 <pow+0x4a>
 800c574:	ec47 6b10 	vmov	d0, r6, r7
 800c578:	f001 f897 	bl	800d6aa <finite>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d088      	beq.n	800c492 <pow+0x4a>
 800c580:	f7ff fede 	bl	800c340 <__errno>
 800c584:	2322      	movs	r3, #34	; 0x22
 800c586:	6003      	str	r3, [r0, #0]
 800c588:	2400      	movs	r4, #0
 800c58a:	2500      	movs	r5, #0
 800c58c:	e781      	b.n	800c492 <pow+0x4a>
 800c58e:	4d04      	ldr	r5, [pc, #16]	; (800c5a0 <pow+0x158>)
 800c590:	2400      	movs	r4, #0
 800c592:	e77e      	b.n	800c492 <pow+0x4a>
 800c594:	200001f0 	.word	0x200001f0
 800c598:	fff00000 	.word	0xfff00000
 800c59c:	7ff00000 	.word	0x7ff00000
 800c5a0:	3ff00000 	.word	0x3ff00000

0800c5a4 <sqrt>:
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	ed2d 8b02 	vpush	{d8}
 800c5aa:	ec55 4b10 	vmov	r4, r5, d0
 800c5ae:	f000 fe1d 	bl	800d1ec <__ieee754_sqrt>
 800c5b2:	4b15      	ldr	r3, [pc, #84]	; (800c608 <sqrt+0x64>)
 800c5b4:	eeb0 8a40 	vmov.f32	s16, s0
 800c5b8:	eef0 8a60 	vmov.f32	s17, s1
 800c5bc:	f993 3000 	ldrsb.w	r3, [r3]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	d019      	beq.n	800c5f8 <sqrt+0x54>
 800c5c4:	4622      	mov	r2, r4
 800c5c6:	462b      	mov	r3, r5
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	f7f4 fa52 	bl	8000a74 <__aeabi_dcmpun>
 800c5d0:	b990      	cbnz	r0, 800c5f8 <sqrt+0x54>
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	4629      	mov	r1, r5
 800c5da:	f7f4 fa23 	bl	8000a24 <__aeabi_dcmplt>
 800c5de:	b158      	cbz	r0, 800c5f8 <sqrt+0x54>
 800c5e0:	f7ff feae 	bl	800c340 <__errno>
 800c5e4:	2321      	movs	r3, #33	; 0x21
 800c5e6:	6003      	str	r3, [r0, #0]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	f7f4 f8d0 	bl	8000794 <__aeabi_ddiv>
 800c5f4:	ec41 0b18 	vmov	d8, r0, r1
 800c5f8:	eeb0 0a48 	vmov.f32	s0, s16
 800c5fc:	eef0 0a68 	vmov.f32	s1, s17
 800c600:	ecbd 8b02 	vpop	{d8}
 800c604:	bd38      	pop	{r3, r4, r5, pc}
 800c606:	bf00      	nop
 800c608:	200001f0 	.word	0x200001f0
 800c60c:	00000000 	.word	0x00000000

0800c610 <__ieee754_atan2>:
 800c610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c614:	ec57 6b11 	vmov	r6, r7, d1
 800c618:	4273      	negs	r3, r6
 800c61a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c7a0 <__ieee754_atan2+0x190>
 800c61e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c622:	4333      	orrs	r3, r6
 800c624:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c628:	4573      	cmp	r3, lr
 800c62a:	ec51 0b10 	vmov	r0, r1, d0
 800c62e:	ee11 8a10 	vmov	r8, s2
 800c632:	d80a      	bhi.n	800c64a <__ieee754_atan2+0x3a>
 800c634:	4244      	negs	r4, r0
 800c636:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c63a:	4304      	orrs	r4, r0
 800c63c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c640:	4574      	cmp	r4, lr
 800c642:	ee10 9a10 	vmov	r9, s0
 800c646:	468c      	mov	ip, r1
 800c648:	d907      	bls.n	800c65a <__ieee754_atan2+0x4a>
 800c64a:	4632      	mov	r2, r6
 800c64c:	463b      	mov	r3, r7
 800c64e:	f7f3 fdc1 	bl	80001d4 <__adddf3>
 800c652:	ec41 0b10 	vmov	d0, r0, r1
 800c656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c65a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c65e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c662:	4334      	orrs	r4, r6
 800c664:	d103      	bne.n	800c66e <__ieee754_atan2+0x5e>
 800c666:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c66a:	f000 be75 	b.w	800d358 <atan>
 800c66e:	17bc      	asrs	r4, r7, #30
 800c670:	f004 0402 	and.w	r4, r4, #2
 800c674:	ea53 0909 	orrs.w	r9, r3, r9
 800c678:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c67c:	d107      	bne.n	800c68e <__ieee754_atan2+0x7e>
 800c67e:	2c02      	cmp	r4, #2
 800c680:	d060      	beq.n	800c744 <__ieee754_atan2+0x134>
 800c682:	2c03      	cmp	r4, #3
 800c684:	d1e5      	bne.n	800c652 <__ieee754_atan2+0x42>
 800c686:	a142      	add	r1, pc, #264	; (adr r1, 800c790 <__ieee754_atan2+0x180>)
 800c688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c68c:	e7e1      	b.n	800c652 <__ieee754_atan2+0x42>
 800c68e:	ea52 0808 	orrs.w	r8, r2, r8
 800c692:	d106      	bne.n	800c6a2 <__ieee754_atan2+0x92>
 800c694:	f1bc 0f00 	cmp.w	ip, #0
 800c698:	da5f      	bge.n	800c75a <__ieee754_atan2+0x14a>
 800c69a:	a13f      	add	r1, pc, #252	; (adr r1, 800c798 <__ieee754_atan2+0x188>)
 800c69c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6a0:	e7d7      	b.n	800c652 <__ieee754_atan2+0x42>
 800c6a2:	4572      	cmp	r2, lr
 800c6a4:	d10f      	bne.n	800c6c6 <__ieee754_atan2+0xb6>
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	f104 34ff 	add.w	r4, r4, #4294967295
 800c6ac:	d107      	bne.n	800c6be <__ieee754_atan2+0xae>
 800c6ae:	2c02      	cmp	r4, #2
 800c6b0:	d84c      	bhi.n	800c74c <__ieee754_atan2+0x13c>
 800c6b2:	4b35      	ldr	r3, [pc, #212]	; (800c788 <__ieee754_atan2+0x178>)
 800c6b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c6b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c6bc:	e7c9      	b.n	800c652 <__ieee754_atan2+0x42>
 800c6be:	2c02      	cmp	r4, #2
 800c6c0:	d848      	bhi.n	800c754 <__ieee754_atan2+0x144>
 800c6c2:	4b32      	ldr	r3, [pc, #200]	; (800c78c <__ieee754_atan2+0x17c>)
 800c6c4:	e7f6      	b.n	800c6b4 <__ieee754_atan2+0xa4>
 800c6c6:	4573      	cmp	r3, lr
 800c6c8:	d0e4      	beq.n	800c694 <__ieee754_atan2+0x84>
 800c6ca:	1a9b      	subs	r3, r3, r2
 800c6cc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c6d0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c6d4:	da1e      	bge.n	800c714 <__ieee754_atan2+0x104>
 800c6d6:	2f00      	cmp	r7, #0
 800c6d8:	da01      	bge.n	800c6de <__ieee754_atan2+0xce>
 800c6da:	323c      	adds	r2, #60	; 0x3c
 800c6dc:	db1e      	blt.n	800c71c <__ieee754_atan2+0x10c>
 800c6de:	4632      	mov	r2, r6
 800c6e0:	463b      	mov	r3, r7
 800c6e2:	f7f4 f857 	bl	8000794 <__aeabi_ddiv>
 800c6e6:	ec41 0b10 	vmov	d0, r0, r1
 800c6ea:	f000 ffd5 	bl	800d698 <fabs>
 800c6ee:	f000 fe33 	bl	800d358 <atan>
 800c6f2:	ec51 0b10 	vmov	r0, r1, d0
 800c6f6:	2c01      	cmp	r4, #1
 800c6f8:	d013      	beq.n	800c722 <__ieee754_atan2+0x112>
 800c6fa:	2c02      	cmp	r4, #2
 800c6fc:	d015      	beq.n	800c72a <__ieee754_atan2+0x11a>
 800c6fe:	2c00      	cmp	r4, #0
 800c700:	d0a7      	beq.n	800c652 <__ieee754_atan2+0x42>
 800c702:	a319      	add	r3, pc, #100	; (adr r3, 800c768 <__ieee754_atan2+0x158>)
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	f7f3 fd62 	bl	80001d0 <__aeabi_dsub>
 800c70c:	a318      	add	r3, pc, #96	; (adr r3, 800c770 <__ieee754_atan2+0x160>)
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	e014      	b.n	800c73e <__ieee754_atan2+0x12e>
 800c714:	a118      	add	r1, pc, #96	; (adr r1, 800c778 <__ieee754_atan2+0x168>)
 800c716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c71a:	e7ec      	b.n	800c6f6 <__ieee754_atan2+0xe6>
 800c71c:	2000      	movs	r0, #0
 800c71e:	2100      	movs	r1, #0
 800c720:	e7e9      	b.n	800c6f6 <__ieee754_atan2+0xe6>
 800c722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c726:	4619      	mov	r1, r3
 800c728:	e793      	b.n	800c652 <__ieee754_atan2+0x42>
 800c72a:	a30f      	add	r3, pc, #60	; (adr r3, 800c768 <__ieee754_atan2+0x158>)
 800c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c730:	f7f3 fd4e 	bl	80001d0 <__aeabi_dsub>
 800c734:	4602      	mov	r2, r0
 800c736:	460b      	mov	r3, r1
 800c738:	a10d      	add	r1, pc, #52	; (adr r1, 800c770 <__ieee754_atan2+0x160>)
 800c73a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c73e:	f7f3 fd47 	bl	80001d0 <__aeabi_dsub>
 800c742:	e786      	b.n	800c652 <__ieee754_atan2+0x42>
 800c744:	a10a      	add	r1, pc, #40	; (adr r1, 800c770 <__ieee754_atan2+0x160>)
 800c746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c74a:	e782      	b.n	800c652 <__ieee754_atan2+0x42>
 800c74c:	a10c      	add	r1, pc, #48	; (adr r1, 800c780 <__ieee754_atan2+0x170>)
 800c74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c752:	e77e      	b.n	800c652 <__ieee754_atan2+0x42>
 800c754:	2000      	movs	r0, #0
 800c756:	2100      	movs	r1, #0
 800c758:	e77b      	b.n	800c652 <__ieee754_atan2+0x42>
 800c75a:	a107      	add	r1, pc, #28	; (adr r1, 800c778 <__ieee754_atan2+0x168>)
 800c75c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c760:	e777      	b.n	800c652 <__ieee754_atan2+0x42>
 800c762:	bf00      	nop
 800c764:	f3af 8000 	nop.w
 800c768:	33145c07 	.word	0x33145c07
 800c76c:	3ca1a626 	.word	0x3ca1a626
 800c770:	54442d18 	.word	0x54442d18
 800c774:	400921fb 	.word	0x400921fb
 800c778:	54442d18 	.word	0x54442d18
 800c77c:	3ff921fb 	.word	0x3ff921fb
 800c780:	54442d18 	.word	0x54442d18
 800c784:	3fe921fb 	.word	0x3fe921fb
 800c788:	0800d978 	.word	0x0800d978
 800c78c:	0800d990 	.word	0x0800d990
 800c790:	54442d18 	.word	0x54442d18
 800c794:	c00921fb 	.word	0xc00921fb
 800c798:	54442d18 	.word	0x54442d18
 800c79c:	bff921fb 	.word	0xbff921fb
 800c7a0:	7ff00000 	.word	0x7ff00000
 800c7a4:	00000000 	.word	0x00000000

0800c7a8 <__ieee754_pow>:
 800c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ac:	ed2d 8b06 	vpush	{d8-d10}
 800c7b0:	b08d      	sub	sp, #52	; 0x34
 800c7b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c7b6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c7ba:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c7be:	ea56 0100 	orrs.w	r1, r6, r0
 800c7c2:	ec53 2b10 	vmov	r2, r3, d0
 800c7c6:	f000 84d1 	beq.w	800d16c <__ieee754_pow+0x9c4>
 800c7ca:	497f      	ldr	r1, [pc, #508]	; (800c9c8 <__ieee754_pow+0x220>)
 800c7cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c7d0:	428c      	cmp	r4, r1
 800c7d2:	ee10 8a10 	vmov	r8, s0
 800c7d6:	4699      	mov	r9, r3
 800c7d8:	dc09      	bgt.n	800c7ee <__ieee754_pow+0x46>
 800c7da:	d103      	bne.n	800c7e4 <__ieee754_pow+0x3c>
 800c7dc:	b97a      	cbnz	r2, 800c7fe <__ieee754_pow+0x56>
 800c7de:	42a6      	cmp	r6, r4
 800c7e0:	dd02      	ble.n	800c7e8 <__ieee754_pow+0x40>
 800c7e2:	e00c      	b.n	800c7fe <__ieee754_pow+0x56>
 800c7e4:	428e      	cmp	r6, r1
 800c7e6:	dc02      	bgt.n	800c7ee <__ieee754_pow+0x46>
 800c7e8:	428e      	cmp	r6, r1
 800c7ea:	d110      	bne.n	800c80e <__ieee754_pow+0x66>
 800c7ec:	b178      	cbz	r0, 800c80e <__ieee754_pow+0x66>
 800c7ee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c7f2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c7f6:	ea54 0308 	orrs.w	r3, r4, r8
 800c7fa:	f000 84b7 	beq.w	800d16c <__ieee754_pow+0x9c4>
 800c7fe:	4873      	ldr	r0, [pc, #460]	; (800c9cc <__ieee754_pow+0x224>)
 800c800:	b00d      	add	sp, #52	; 0x34
 800c802:	ecbd 8b06 	vpop	{d8-d10}
 800c806:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80a:	f000 bf59 	b.w	800d6c0 <nan>
 800c80e:	f1b9 0f00 	cmp.w	r9, #0
 800c812:	da36      	bge.n	800c882 <__ieee754_pow+0xda>
 800c814:	496e      	ldr	r1, [pc, #440]	; (800c9d0 <__ieee754_pow+0x228>)
 800c816:	428e      	cmp	r6, r1
 800c818:	dc51      	bgt.n	800c8be <__ieee754_pow+0x116>
 800c81a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c81e:	428e      	cmp	r6, r1
 800c820:	f340 84af 	ble.w	800d182 <__ieee754_pow+0x9da>
 800c824:	1531      	asrs	r1, r6, #20
 800c826:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c82a:	2914      	cmp	r1, #20
 800c82c:	dd0f      	ble.n	800c84e <__ieee754_pow+0xa6>
 800c82e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c832:	fa20 fc01 	lsr.w	ip, r0, r1
 800c836:	fa0c f101 	lsl.w	r1, ip, r1
 800c83a:	4281      	cmp	r1, r0
 800c83c:	f040 84a1 	bne.w	800d182 <__ieee754_pow+0x9da>
 800c840:	f00c 0c01 	and.w	ip, ip, #1
 800c844:	f1cc 0102 	rsb	r1, ip, #2
 800c848:	9100      	str	r1, [sp, #0]
 800c84a:	b180      	cbz	r0, 800c86e <__ieee754_pow+0xc6>
 800c84c:	e059      	b.n	800c902 <__ieee754_pow+0x15a>
 800c84e:	2800      	cmp	r0, #0
 800c850:	d155      	bne.n	800c8fe <__ieee754_pow+0x156>
 800c852:	f1c1 0114 	rsb	r1, r1, #20
 800c856:	fa46 fc01 	asr.w	ip, r6, r1
 800c85a:	fa0c f101 	lsl.w	r1, ip, r1
 800c85e:	42b1      	cmp	r1, r6
 800c860:	f040 848c 	bne.w	800d17c <__ieee754_pow+0x9d4>
 800c864:	f00c 0c01 	and.w	ip, ip, #1
 800c868:	f1cc 0102 	rsb	r1, ip, #2
 800c86c:	9100      	str	r1, [sp, #0]
 800c86e:	4959      	ldr	r1, [pc, #356]	; (800c9d4 <__ieee754_pow+0x22c>)
 800c870:	428e      	cmp	r6, r1
 800c872:	d12d      	bne.n	800c8d0 <__ieee754_pow+0x128>
 800c874:	2f00      	cmp	r7, #0
 800c876:	da79      	bge.n	800c96c <__ieee754_pow+0x1c4>
 800c878:	4956      	ldr	r1, [pc, #344]	; (800c9d4 <__ieee754_pow+0x22c>)
 800c87a:	2000      	movs	r0, #0
 800c87c:	f7f3 ff8a 	bl	8000794 <__aeabi_ddiv>
 800c880:	e016      	b.n	800c8b0 <__ieee754_pow+0x108>
 800c882:	2100      	movs	r1, #0
 800c884:	9100      	str	r1, [sp, #0]
 800c886:	2800      	cmp	r0, #0
 800c888:	d13b      	bne.n	800c902 <__ieee754_pow+0x15a>
 800c88a:	494f      	ldr	r1, [pc, #316]	; (800c9c8 <__ieee754_pow+0x220>)
 800c88c:	428e      	cmp	r6, r1
 800c88e:	d1ee      	bne.n	800c86e <__ieee754_pow+0xc6>
 800c890:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c894:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c898:	ea53 0308 	orrs.w	r3, r3, r8
 800c89c:	f000 8466 	beq.w	800d16c <__ieee754_pow+0x9c4>
 800c8a0:	4b4d      	ldr	r3, [pc, #308]	; (800c9d8 <__ieee754_pow+0x230>)
 800c8a2:	429c      	cmp	r4, r3
 800c8a4:	dd0d      	ble.n	800c8c2 <__ieee754_pow+0x11a>
 800c8a6:	2f00      	cmp	r7, #0
 800c8a8:	f280 8464 	bge.w	800d174 <__ieee754_pow+0x9cc>
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	ec41 0b10 	vmov	d0, r0, r1
 800c8b4:	b00d      	add	sp, #52	; 0x34
 800c8b6:	ecbd 8b06 	vpop	{d8-d10}
 800c8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8be:	2102      	movs	r1, #2
 800c8c0:	e7e0      	b.n	800c884 <__ieee754_pow+0xdc>
 800c8c2:	2f00      	cmp	r7, #0
 800c8c4:	daf2      	bge.n	800c8ac <__ieee754_pow+0x104>
 800c8c6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c8ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c8ce:	e7ef      	b.n	800c8b0 <__ieee754_pow+0x108>
 800c8d0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c8d4:	d104      	bne.n	800c8e0 <__ieee754_pow+0x138>
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	4619      	mov	r1, r3
 800c8da:	f7f3 fe31 	bl	8000540 <__aeabi_dmul>
 800c8de:	e7e7      	b.n	800c8b0 <__ieee754_pow+0x108>
 800c8e0:	493e      	ldr	r1, [pc, #248]	; (800c9dc <__ieee754_pow+0x234>)
 800c8e2:	428f      	cmp	r7, r1
 800c8e4:	d10d      	bne.n	800c902 <__ieee754_pow+0x15a>
 800c8e6:	f1b9 0f00 	cmp.w	r9, #0
 800c8ea:	db0a      	blt.n	800c902 <__ieee754_pow+0x15a>
 800c8ec:	ec43 2b10 	vmov	d0, r2, r3
 800c8f0:	b00d      	add	sp, #52	; 0x34
 800c8f2:	ecbd 8b06 	vpop	{d8-d10}
 800c8f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fa:	f000 bc77 	b.w	800d1ec <__ieee754_sqrt>
 800c8fe:	2100      	movs	r1, #0
 800c900:	9100      	str	r1, [sp, #0]
 800c902:	ec43 2b10 	vmov	d0, r2, r3
 800c906:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c90a:	f000 fec5 	bl	800d698 <fabs>
 800c90e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c912:	ec51 0b10 	vmov	r0, r1, d0
 800c916:	f1b8 0f00 	cmp.w	r8, #0
 800c91a:	d12a      	bne.n	800c972 <__ieee754_pow+0x1ca>
 800c91c:	b12c      	cbz	r4, 800c92a <__ieee754_pow+0x182>
 800c91e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c9d4 <__ieee754_pow+0x22c>
 800c922:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c926:	45e6      	cmp	lr, ip
 800c928:	d123      	bne.n	800c972 <__ieee754_pow+0x1ca>
 800c92a:	2f00      	cmp	r7, #0
 800c92c:	da05      	bge.n	800c93a <__ieee754_pow+0x192>
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	2000      	movs	r0, #0
 800c934:	4927      	ldr	r1, [pc, #156]	; (800c9d4 <__ieee754_pow+0x22c>)
 800c936:	f7f3 ff2d 	bl	8000794 <__aeabi_ddiv>
 800c93a:	f1b9 0f00 	cmp.w	r9, #0
 800c93e:	dab7      	bge.n	800c8b0 <__ieee754_pow+0x108>
 800c940:	9b00      	ldr	r3, [sp, #0]
 800c942:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c946:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c94a:	4323      	orrs	r3, r4
 800c94c:	d108      	bne.n	800c960 <__ieee754_pow+0x1b8>
 800c94e:	4602      	mov	r2, r0
 800c950:	460b      	mov	r3, r1
 800c952:	4610      	mov	r0, r2
 800c954:	4619      	mov	r1, r3
 800c956:	f7f3 fc3b 	bl	80001d0 <__aeabi_dsub>
 800c95a:	4602      	mov	r2, r0
 800c95c:	460b      	mov	r3, r1
 800c95e:	e78d      	b.n	800c87c <__ieee754_pow+0xd4>
 800c960:	9b00      	ldr	r3, [sp, #0]
 800c962:	2b01      	cmp	r3, #1
 800c964:	d1a4      	bne.n	800c8b0 <__ieee754_pow+0x108>
 800c966:	4602      	mov	r2, r0
 800c968:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c96c:	4610      	mov	r0, r2
 800c96e:	4619      	mov	r1, r3
 800c970:	e79e      	b.n	800c8b0 <__ieee754_pow+0x108>
 800c972:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c976:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c97a:	950a      	str	r5, [sp, #40]	; 0x28
 800c97c:	9d00      	ldr	r5, [sp, #0]
 800c97e:	46ac      	mov	ip, r5
 800c980:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c982:	ea5c 0505 	orrs.w	r5, ip, r5
 800c986:	d0e4      	beq.n	800c952 <__ieee754_pow+0x1aa>
 800c988:	4b15      	ldr	r3, [pc, #84]	; (800c9e0 <__ieee754_pow+0x238>)
 800c98a:	429e      	cmp	r6, r3
 800c98c:	f340 80fc 	ble.w	800cb88 <__ieee754_pow+0x3e0>
 800c990:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c994:	429e      	cmp	r6, r3
 800c996:	4b10      	ldr	r3, [pc, #64]	; (800c9d8 <__ieee754_pow+0x230>)
 800c998:	dd07      	ble.n	800c9aa <__ieee754_pow+0x202>
 800c99a:	429c      	cmp	r4, r3
 800c99c:	dc0a      	bgt.n	800c9b4 <__ieee754_pow+0x20c>
 800c99e:	2f00      	cmp	r7, #0
 800c9a0:	da84      	bge.n	800c8ac <__ieee754_pow+0x104>
 800c9a2:	a307      	add	r3, pc, #28	; (adr r3, 800c9c0 <__ieee754_pow+0x218>)
 800c9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a8:	e795      	b.n	800c8d6 <__ieee754_pow+0x12e>
 800c9aa:	429c      	cmp	r4, r3
 800c9ac:	dbf7      	blt.n	800c99e <__ieee754_pow+0x1f6>
 800c9ae:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <__ieee754_pow+0x22c>)
 800c9b0:	429c      	cmp	r4, r3
 800c9b2:	dd17      	ble.n	800c9e4 <__ieee754_pow+0x23c>
 800c9b4:	2f00      	cmp	r7, #0
 800c9b6:	dcf4      	bgt.n	800c9a2 <__ieee754_pow+0x1fa>
 800c9b8:	e778      	b.n	800c8ac <__ieee754_pow+0x104>
 800c9ba:	bf00      	nop
 800c9bc:	f3af 8000 	nop.w
 800c9c0:	8800759c 	.word	0x8800759c
 800c9c4:	7e37e43c 	.word	0x7e37e43c
 800c9c8:	7ff00000 	.word	0x7ff00000
 800c9cc:	0800d9a8 	.word	0x0800d9a8
 800c9d0:	433fffff 	.word	0x433fffff
 800c9d4:	3ff00000 	.word	0x3ff00000
 800c9d8:	3fefffff 	.word	0x3fefffff
 800c9dc:	3fe00000 	.word	0x3fe00000
 800c9e0:	41e00000 	.word	0x41e00000
 800c9e4:	4b64      	ldr	r3, [pc, #400]	; (800cb78 <__ieee754_pow+0x3d0>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f7f3 fbf2 	bl	80001d0 <__aeabi_dsub>
 800c9ec:	a356      	add	r3, pc, #344	; (adr r3, 800cb48 <__ieee754_pow+0x3a0>)
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	460d      	mov	r5, r1
 800c9f6:	f7f3 fda3 	bl	8000540 <__aeabi_dmul>
 800c9fa:	a355      	add	r3, pc, #340	; (adr r3, 800cb50 <__ieee754_pow+0x3a8>)
 800c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca00:	4606      	mov	r6, r0
 800ca02:	460f      	mov	r7, r1
 800ca04:	4620      	mov	r0, r4
 800ca06:	4629      	mov	r1, r5
 800ca08:	f7f3 fd9a 	bl	8000540 <__aeabi_dmul>
 800ca0c:	4b5b      	ldr	r3, [pc, #364]	; (800cb7c <__ieee754_pow+0x3d4>)
 800ca0e:	4682      	mov	sl, r0
 800ca10:	468b      	mov	fp, r1
 800ca12:	2200      	movs	r2, #0
 800ca14:	4620      	mov	r0, r4
 800ca16:	4629      	mov	r1, r5
 800ca18:	f7f3 fd92 	bl	8000540 <__aeabi_dmul>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	460b      	mov	r3, r1
 800ca20:	a14d      	add	r1, pc, #308	; (adr r1, 800cb58 <__ieee754_pow+0x3b0>)
 800ca22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca26:	f7f3 fbd3 	bl	80001d0 <__aeabi_dsub>
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	462b      	mov	r3, r5
 800ca2e:	f7f3 fd87 	bl	8000540 <__aeabi_dmul>
 800ca32:	4602      	mov	r2, r0
 800ca34:	460b      	mov	r3, r1
 800ca36:	2000      	movs	r0, #0
 800ca38:	4951      	ldr	r1, [pc, #324]	; (800cb80 <__ieee754_pow+0x3d8>)
 800ca3a:	f7f3 fbc9 	bl	80001d0 <__aeabi_dsub>
 800ca3e:	4622      	mov	r2, r4
 800ca40:	4680      	mov	r8, r0
 800ca42:	4689      	mov	r9, r1
 800ca44:	462b      	mov	r3, r5
 800ca46:	4620      	mov	r0, r4
 800ca48:	4629      	mov	r1, r5
 800ca4a:	f7f3 fd79 	bl	8000540 <__aeabi_dmul>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4640      	mov	r0, r8
 800ca54:	4649      	mov	r1, r9
 800ca56:	f7f3 fd73 	bl	8000540 <__aeabi_dmul>
 800ca5a:	a341      	add	r3, pc, #260	; (adr r3, 800cb60 <__ieee754_pow+0x3b8>)
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	f7f3 fd6e 	bl	8000540 <__aeabi_dmul>
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	4650      	mov	r0, sl
 800ca6a:	4659      	mov	r1, fp
 800ca6c:	f7f3 fbb0 	bl	80001d0 <__aeabi_dsub>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4680      	mov	r8, r0
 800ca76:	4689      	mov	r9, r1
 800ca78:	4630      	mov	r0, r6
 800ca7a:	4639      	mov	r1, r7
 800ca7c:	f7f3 fbaa 	bl	80001d4 <__adddf3>
 800ca80:	2400      	movs	r4, #0
 800ca82:	4632      	mov	r2, r6
 800ca84:	463b      	mov	r3, r7
 800ca86:	4620      	mov	r0, r4
 800ca88:	460d      	mov	r5, r1
 800ca8a:	f7f3 fba1 	bl	80001d0 <__aeabi_dsub>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	460b      	mov	r3, r1
 800ca92:	4640      	mov	r0, r8
 800ca94:	4649      	mov	r1, r9
 800ca96:	f7f3 fb9b 	bl	80001d0 <__aeabi_dsub>
 800ca9a:	9b00      	ldr	r3, [sp, #0]
 800ca9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	4313      	orrs	r3, r2
 800caa2:	4682      	mov	sl, r0
 800caa4:	468b      	mov	fp, r1
 800caa6:	f040 81f1 	bne.w	800ce8c <__ieee754_pow+0x6e4>
 800caaa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800cb68 <__ieee754_pow+0x3c0>
 800caae:	eeb0 8a47 	vmov.f32	s16, s14
 800cab2:	eef0 8a67 	vmov.f32	s17, s15
 800cab6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800caba:	2600      	movs	r6, #0
 800cabc:	4632      	mov	r2, r6
 800cabe:	463b      	mov	r3, r7
 800cac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cac4:	f7f3 fb84 	bl	80001d0 <__aeabi_dsub>
 800cac8:	4622      	mov	r2, r4
 800caca:	462b      	mov	r3, r5
 800cacc:	f7f3 fd38 	bl	8000540 <__aeabi_dmul>
 800cad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cad4:	4680      	mov	r8, r0
 800cad6:	4689      	mov	r9, r1
 800cad8:	4650      	mov	r0, sl
 800cada:	4659      	mov	r1, fp
 800cadc:	f7f3 fd30 	bl	8000540 <__aeabi_dmul>
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	4640      	mov	r0, r8
 800cae6:	4649      	mov	r1, r9
 800cae8:	f7f3 fb74 	bl	80001d4 <__adddf3>
 800caec:	4632      	mov	r2, r6
 800caee:	463b      	mov	r3, r7
 800caf0:	4680      	mov	r8, r0
 800caf2:	4689      	mov	r9, r1
 800caf4:	4620      	mov	r0, r4
 800caf6:	4629      	mov	r1, r5
 800caf8:	f7f3 fd22 	bl	8000540 <__aeabi_dmul>
 800cafc:	460b      	mov	r3, r1
 800cafe:	4604      	mov	r4, r0
 800cb00:	460d      	mov	r5, r1
 800cb02:	4602      	mov	r2, r0
 800cb04:	4649      	mov	r1, r9
 800cb06:	4640      	mov	r0, r8
 800cb08:	f7f3 fb64 	bl	80001d4 <__adddf3>
 800cb0c:	4b1d      	ldr	r3, [pc, #116]	; (800cb84 <__ieee754_pow+0x3dc>)
 800cb0e:	4299      	cmp	r1, r3
 800cb10:	ec45 4b19 	vmov	d9, r4, r5
 800cb14:	4606      	mov	r6, r0
 800cb16:	460f      	mov	r7, r1
 800cb18:	468b      	mov	fp, r1
 800cb1a:	f340 82fe 	ble.w	800d11a <__ieee754_pow+0x972>
 800cb1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cb22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cb26:	4303      	orrs	r3, r0
 800cb28:	f000 81f0 	beq.w	800cf0c <__ieee754_pow+0x764>
 800cb2c:	a310      	add	r3, pc, #64	; (adr r3, 800cb70 <__ieee754_pow+0x3c8>)
 800cb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb32:	ec51 0b18 	vmov	r0, r1, d8
 800cb36:	f7f3 fd03 	bl	8000540 <__aeabi_dmul>
 800cb3a:	a30d      	add	r3, pc, #52	; (adr r3, 800cb70 <__ieee754_pow+0x3c8>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	e6cb      	b.n	800c8da <__ieee754_pow+0x132>
 800cb42:	bf00      	nop
 800cb44:	f3af 8000 	nop.w
 800cb48:	60000000 	.word	0x60000000
 800cb4c:	3ff71547 	.word	0x3ff71547
 800cb50:	f85ddf44 	.word	0xf85ddf44
 800cb54:	3e54ae0b 	.word	0x3e54ae0b
 800cb58:	55555555 	.word	0x55555555
 800cb5c:	3fd55555 	.word	0x3fd55555
 800cb60:	652b82fe 	.word	0x652b82fe
 800cb64:	3ff71547 	.word	0x3ff71547
 800cb68:	00000000 	.word	0x00000000
 800cb6c:	bff00000 	.word	0xbff00000
 800cb70:	8800759c 	.word	0x8800759c
 800cb74:	7e37e43c 	.word	0x7e37e43c
 800cb78:	3ff00000 	.word	0x3ff00000
 800cb7c:	3fd00000 	.word	0x3fd00000
 800cb80:	3fe00000 	.word	0x3fe00000
 800cb84:	408fffff 	.word	0x408fffff
 800cb88:	4bd7      	ldr	r3, [pc, #860]	; (800cee8 <__ieee754_pow+0x740>)
 800cb8a:	ea03 0309 	and.w	r3, r3, r9
 800cb8e:	2200      	movs	r2, #0
 800cb90:	b92b      	cbnz	r3, 800cb9e <__ieee754_pow+0x3f6>
 800cb92:	4bd6      	ldr	r3, [pc, #856]	; (800ceec <__ieee754_pow+0x744>)
 800cb94:	f7f3 fcd4 	bl	8000540 <__aeabi_dmul>
 800cb98:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cb9c:	460c      	mov	r4, r1
 800cb9e:	1523      	asrs	r3, r4, #20
 800cba0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cba4:	4413      	add	r3, r2
 800cba6:	9309      	str	r3, [sp, #36]	; 0x24
 800cba8:	4bd1      	ldr	r3, [pc, #836]	; (800cef0 <__ieee754_pow+0x748>)
 800cbaa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cbae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cbb2:	429c      	cmp	r4, r3
 800cbb4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cbb8:	dd08      	ble.n	800cbcc <__ieee754_pow+0x424>
 800cbba:	4bce      	ldr	r3, [pc, #824]	; (800cef4 <__ieee754_pow+0x74c>)
 800cbbc:	429c      	cmp	r4, r3
 800cbbe:	f340 8163 	ble.w	800ce88 <__ieee754_pow+0x6e0>
 800cbc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	9309      	str	r3, [sp, #36]	; 0x24
 800cbc8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cbcc:	2400      	movs	r4, #0
 800cbce:	00e3      	lsls	r3, r4, #3
 800cbd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbd2:	4bc9      	ldr	r3, [pc, #804]	; (800cef8 <__ieee754_pow+0x750>)
 800cbd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbd8:	ed93 7b00 	vldr	d7, [r3]
 800cbdc:	4629      	mov	r1, r5
 800cbde:	ec53 2b17 	vmov	r2, r3, d7
 800cbe2:	eeb0 8a47 	vmov.f32	s16, s14
 800cbe6:	eef0 8a67 	vmov.f32	s17, s15
 800cbea:	4682      	mov	sl, r0
 800cbec:	f7f3 faf0 	bl	80001d0 <__aeabi_dsub>
 800cbf0:	4652      	mov	r2, sl
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	460f      	mov	r7, r1
 800cbf6:	462b      	mov	r3, r5
 800cbf8:	ec51 0b18 	vmov	r0, r1, d8
 800cbfc:	f7f3 faea 	bl	80001d4 <__adddf3>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	2000      	movs	r0, #0
 800cc06:	49bd      	ldr	r1, [pc, #756]	; (800cefc <__ieee754_pow+0x754>)
 800cc08:	f7f3 fdc4 	bl	8000794 <__aeabi_ddiv>
 800cc0c:	ec41 0b19 	vmov	d9, r0, r1
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	4630      	mov	r0, r6
 800cc16:	4639      	mov	r1, r7
 800cc18:	f7f3 fc92 	bl	8000540 <__aeabi_dmul>
 800cc1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc28:	2300      	movs	r3, #0
 800cc2a:	9304      	str	r3, [sp, #16]
 800cc2c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cc30:	46ab      	mov	fp, r5
 800cc32:	106d      	asrs	r5, r5, #1
 800cc34:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cc38:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cc3c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cc40:	2200      	movs	r2, #0
 800cc42:	4640      	mov	r0, r8
 800cc44:	4649      	mov	r1, r9
 800cc46:	4614      	mov	r4, r2
 800cc48:	461d      	mov	r5, r3
 800cc4a:	f7f3 fc79 	bl	8000540 <__aeabi_dmul>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	460b      	mov	r3, r1
 800cc52:	4630      	mov	r0, r6
 800cc54:	4639      	mov	r1, r7
 800cc56:	f7f3 fabb 	bl	80001d0 <__aeabi_dsub>
 800cc5a:	ec53 2b18 	vmov	r2, r3, d8
 800cc5e:	4606      	mov	r6, r0
 800cc60:	460f      	mov	r7, r1
 800cc62:	4620      	mov	r0, r4
 800cc64:	4629      	mov	r1, r5
 800cc66:	f7f3 fab3 	bl	80001d0 <__aeabi_dsub>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	4650      	mov	r0, sl
 800cc70:	4659      	mov	r1, fp
 800cc72:	f7f3 faad 	bl	80001d0 <__aeabi_dsub>
 800cc76:	4642      	mov	r2, r8
 800cc78:	464b      	mov	r3, r9
 800cc7a:	f7f3 fc61 	bl	8000540 <__aeabi_dmul>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	460b      	mov	r3, r1
 800cc82:	4630      	mov	r0, r6
 800cc84:	4639      	mov	r1, r7
 800cc86:	f7f3 faa3 	bl	80001d0 <__aeabi_dsub>
 800cc8a:	ec53 2b19 	vmov	r2, r3, d9
 800cc8e:	f7f3 fc57 	bl	8000540 <__aeabi_dmul>
 800cc92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc96:	ec41 0b18 	vmov	d8, r0, r1
 800cc9a:	4610      	mov	r0, r2
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	f7f3 fc4f 	bl	8000540 <__aeabi_dmul>
 800cca2:	a37d      	add	r3, pc, #500	; (adr r3, 800ce98 <__ieee754_pow+0x6f0>)
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	4604      	mov	r4, r0
 800ccaa:	460d      	mov	r5, r1
 800ccac:	f7f3 fc48 	bl	8000540 <__aeabi_dmul>
 800ccb0:	a37b      	add	r3, pc, #492	; (adr r3, 800cea0 <__ieee754_pow+0x6f8>)
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	f7f3 fa8d 	bl	80001d4 <__adddf3>
 800ccba:	4622      	mov	r2, r4
 800ccbc:	462b      	mov	r3, r5
 800ccbe:	f7f3 fc3f 	bl	8000540 <__aeabi_dmul>
 800ccc2:	a379      	add	r3, pc, #484	; (adr r3, 800cea8 <__ieee754_pow+0x700>)
 800ccc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc8:	f7f3 fa84 	bl	80001d4 <__adddf3>
 800cccc:	4622      	mov	r2, r4
 800ccce:	462b      	mov	r3, r5
 800ccd0:	f7f3 fc36 	bl	8000540 <__aeabi_dmul>
 800ccd4:	a376      	add	r3, pc, #472	; (adr r3, 800ceb0 <__ieee754_pow+0x708>)
 800ccd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccda:	f7f3 fa7b 	bl	80001d4 <__adddf3>
 800ccde:	4622      	mov	r2, r4
 800cce0:	462b      	mov	r3, r5
 800cce2:	f7f3 fc2d 	bl	8000540 <__aeabi_dmul>
 800cce6:	a374      	add	r3, pc, #464	; (adr r3, 800ceb8 <__ieee754_pow+0x710>)
 800cce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccec:	f7f3 fa72 	bl	80001d4 <__adddf3>
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	462b      	mov	r3, r5
 800ccf4:	f7f3 fc24 	bl	8000540 <__aeabi_dmul>
 800ccf8:	a371      	add	r3, pc, #452	; (adr r3, 800cec0 <__ieee754_pow+0x718>)
 800ccfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfe:	f7f3 fa69 	bl	80001d4 <__adddf3>
 800cd02:	4622      	mov	r2, r4
 800cd04:	4606      	mov	r6, r0
 800cd06:	460f      	mov	r7, r1
 800cd08:	462b      	mov	r3, r5
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	4629      	mov	r1, r5
 800cd0e:	f7f3 fc17 	bl	8000540 <__aeabi_dmul>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	4630      	mov	r0, r6
 800cd18:	4639      	mov	r1, r7
 800cd1a:	f7f3 fc11 	bl	8000540 <__aeabi_dmul>
 800cd1e:	4642      	mov	r2, r8
 800cd20:	4604      	mov	r4, r0
 800cd22:	460d      	mov	r5, r1
 800cd24:	464b      	mov	r3, r9
 800cd26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd2a:	f7f3 fa53 	bl	80001d4 <__adddf3>
 800cd2e:	ec53 2b18 	vmov	r2, r3, d8
 800cd32:	f7f3 fc05 	bl	8000540 <__aeabi_dmul>
 800cd36:	4622      	mov	r2, r4
 800cd38:	462b      	mov	r3, r5
 800cd3a:	f7f3 fa4b 	bl	80001d4 <__adddf3>
 800cd3e:	4642      	mov	r2, r8
 800cd40:	4682      	mov	sl, r0
 800cd42:	468b      	mov	fp, r1
 800cd44:	464b      	mov	r3, r9
 800cd46:	4640      	mov	r0, r8
 800cd48:	4649      	mov	r1, r9
 800cd4a:	f7f3 fbf9 	bl	8000540 <__aeabi_dmul>
 800cd4e:	4b6c      	ldr	r3, [pc, #432]	; (800cf00 <__ieee754_pow+0x758>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	4606      	mov	r6, r0
 800cd54:	460f      	mov	r7, r1
 800cd56:	f7f3 fa3d 	bl	80001d4 <__adddf3>
 800cd5a:	4652      	mov	r2, sl
 800cd5c:	465b      	mov	r3, fp
 800cd5e:	f7f3 fa39 	bl	80001d4 <__adddf3>
 800cd62:	9c04      	ldr	r4, [sp, #16]
 800cd64:	460d      	mov	r5, r1
 800cd66:	4622      	mov	r2, r4
 800cd68:	460b      	mov	r3, r1
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	4649      	mov	r1, r9
 800cd6e:	f7f3 fbe7 	bl	8000540 <__aeabi_dmul>
 800cd72:	4b63      	ldr	r3, [pc, #396]	; (800cf00 <__ieee754_pow+0x758>)
 800cd74:	4680      	mov	r8, r0
 800cd76:	4689      	mov	r9, r1
 800cd78:	2200      	movs	r2, #0
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	f7f3 fa27 	bl	80001d0 <__aeabi_dsub>
 800cd82:	4632      	mov	r2, r6
 800cd84:	463b      	mov	r3, r7
 800cd86:	f7f3 fa23 	bl	80001d0 <__aeabi_dsub>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	4650      	mov	r0, sl
 800cd90:	4659      	mov	r1, fp
 800cd92:	f7f3 fa1d 	bl	80001d0 <__aeabi_dsub>
 800cd96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd9a:	f7f3 fbd1 	bl	8000540 <__aeabi_dmul>
 800cd9e:	4622      	mov	r2, r4
 800cda0:	4606      	mov	r6, r0
 800cda2:	460f      	mov	r7, r1
 800cda4:	462b      	mov	r3, r5
 800cda6:	ec51 0b18 	vmov	r0, r1, d8
 800cdaa:	f7f3 fbc9 	bl	8000540 <__aeabi_dmul>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	f7f3 fa0d 	bl	80001d4 <__adddf3>
 800cdba:	4606      	mov	r6, r0
 800cdbc:	460f      	mov	r7, r1
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	4649      	mov	r1, r9
 800cdc6:	f7f3 fa05 	bl	80001d4 <__adddf3>
 800cdca:	9c04      	ldr	r4, [sp, #16]
 800cdcc:	a33e      	add	r3, pc, #248	; (adr r3, 800cec8 <__ieee754_pow+0x720>)
 800cdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	460d      	mov	r5, r1
 800cdd6:	f7f3 fbb3 	bl	8000540 <__aeabi_dmul>
 800cdda:	4642      	mov	r2, r8
 800cddc:	ec41 0b18 	vmov	d8, r0, r1
 800cde0:	464b      	mov	r3, r9
 800cde2:	4620      	mov	r0, r4
 800cde4:	4629      	mov	r1, r5
 800cde6:	f7f3 f9f3 	bl	80001d0 <__aeabi_dsub>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	4630      	mov	r0, r6
 800cdf0:	4639      	mov	r1, r7
 800cdf2:	f7f3 f9ed 	bl	80001d0 <__aeabi_dsub>
 800cdf6:	a336      	add	r3, pc, #216	; (adr r3, 800ced0 <__ieee754_pow+0x728>)
 800cdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfc:	f7f3 fba0 	bl	8000540 <__aeabi_dmul>
 800ce00:	a335      	add	r3, pc, #212	; (adr r3, 800ced8 <__ieee754_pow+0x730>)
 800ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce06:	4606      	mov	r6, r0
 800ce08:	460f      	mov	r7, r1
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	f7f3 fb97 	bl	8000540 <__aeabi_dmul>
 800ce12:	4602      	mov	r2, r0
 800ce14:	460b      	mov	r3, r1
 800ce16:	4630      	mov	r0, r6
 800ce18:	4639      	mov	r1, r7
 800ce1a:	f7f3 f9db 	bl	80001d4 <__adddf3>
 800ce1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce20:	4b38      	ldr	r3, [pc, #224]	; (800cf04 <__ieee754_pow+0x75c>)
 800ce22:	4413      	add	r3, r2
 800ce24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce28:	f7f3 f9d4 	bl	80001d4 <__adddf3>
 800ce2c:	4682      	mov	sl, r0
 800ce2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce30:	468b      	mov	fp, r1
 800ce32:	f7f3 fb1b 	bl	800046c <__aeabi_i2d>
 800ce36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce38:	4b33      	ldr	r3, [pc, #204]	; (800cf08 <__ieee754_pow+0x760>)
 800ce3a:	4413      	add	r3, r2
 800ce3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce40:	4606      	mov	r6, r0
 800ce42:	460f      	mov	r7, r1
 800ce44:	4652      	mov	r2, sl
 800ce46:	465b      	mov	r3, fp
 800ce48:	ec51 0b18 	vmov	r0, r1, d8
 800ce4c:	f7f3 f9c2 	bl	80001d4 <__adddf3>
 800ce50:	4642      	mov	r2, r8
 800ce52:	464b      	mov	r3, r9
 800ce54:	f7f3 f9be 	bl	80001d4 <__adddf3>
 800ce58:	4632      	mov	r2, r6
 800ce5a:	463b      	mov	r3, r7
 800ce5c:	f7f3 f9ba 	bl	80001d4 <__adddf3>
 800ce60:	9c04      	ldr	r4, [sp, #16]
 800ce62:	4632      	mov	r2, r6
 800ce64:	463b      	mov	r3, r7
 800ce66:	4620      	mov	r0, r4
 800ce68:	460d      	mov	r5, r1
 800ce6a:	f7f3 f9b1 	bl	80001d0 <__aeabi_dsub>
 800ce6e:	4642      	mov	r2, r8
 800ce70:	464b      	mov	r3, r9
 800ce72:	f7f3 f9ad 	bl	80001d0 <__aeabi_dsub>
 800ce76:	ec53 2b18 	vmov	r2, r3, d8
 800ce7a:	f7f3 f9a9 	bl	80001d0 <__aeabi_dsub>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	460b      	mov	r3, r1
 800ce82:	4650      	mov	r0, sl
 800ce84:	4659      	mov	r1, fp
 800ce86:	e606      	b.n	800ca96 <__ieee754_pow+0x2ee>
 800ce88:	2401      	movs	r4, #1
 800ce8a:	e6a0      	b.n	800cbce <__ieee754_pow+0x426>
 800ce8c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800cee0 <__ieee754_pow+0x738>
 800ce90:	e60d      	b.n	800caae <__ieee754_pow+0x306>
 800ce92:	bf00      	nop
 800ce94:	f3af 8000 	nop.w
 800ce98:	4a454eef 	.word	0x4a454eef
 800ce9c:	3fca7e28 	.word	0x3fca7e28
 800cea0:	93c9db65 	.word	0x93c9db65
 800cea4:	3fcd864a 	.word	0x3fcd864a
 800cea8:	a91d4101 	.word	0xa91d4101
 800ceac:	3fd17460 	.word	0x3fd17460
 800ceb0:	518f264d 	.word	0x518f264d
 800ceb4:	3fd55555 	.word	0x3fd55555
 800ceb8:	db6fabff 	.word	0xdb6fabff
 800cebc:	3fdb6db6 	.word	0x3fdb6db6
 800cec0:	33333303 	.word	0x33333303
 800cec4:	3fe33333 	.word	0x3fe33333
 800cec8:	e0000000 	.word	0xe0000000
 800cecc:	3feec709 	.word	0x3feec709
 800ced0:	dc3a03fd 	.word	0xdc3a03fd
 800ced4:	3feec709 	.word	0x3feec709
 800ced8:	145b01f5 	.word	0x145b01f5
 800cedc:	be3e2fe0 	.word	0xbe3e2fe0
 800cee0:	00000000 	.word	0x00000000
 800cee4:	3ff00000 	.word	0x3ff00000
 800cee8:	7ff00000 	.word	0x7ff00000
 800ceec:	43400000 	.word	0x43400000
 800cef0:	0003988e 	.word	0x0003988e
 800cef4:	000bb679 	.word	0x000bb679
 800cef8:	0800d9b0 	.word	0x0800d9b0
 800cefc:	3ff00000 	.word	0x3ff00000
 800cf00:	40080000 	.word	0x40080000
 800cf04:	0800d9d0 	.word	0x0800d9d0
 800cf08:	0800d9c0 	.word	0x0800d9c0
 800cf0c:	a3b5      	add	r3, pc, #724	; (adr r3, 800d1e4 <__ieee754_pow+0xa3c>)
 800cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf12:	4640      	mov	r0, r8
 800cf14:	4649      	mov	r1, r9
 800cf16:	f7f3 f95d 	bl	80001d4 <__adddf3>
 800cf1a:	4622      	mov	r2, r4
 800cf1c:	ec41 0b1a 	vmov	d10, r0, r1
 800cf20:	462b      	mov	r3, r5
 800cf22:	4630      	mov	r0, r6
 800cf24:	4639      	mov	r1, r7
 800cf26:	f7f3 f953 	bl	80001d0 <__aeabi_dsub>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	ec51 0b1a 	vmov	r0, r1, d10
 800cf32:	f7f3 fd95 	bl	8000a60 <__aeabi_dcmpgt>
 800cf36:	2800      	cmp	r0, #0
 800cf38:	f47f adf8 	bne.w	800cb2c <__ieee754_pow+0x384>
 800cf3c:	4aa4      	ldr	r2, [pc, #656]	; (800d1d0 <__ieee754_pow+0xa28>)
 800cf3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf42:	4293      	cmp	r3, r2
 800cf44:	f340 810b 	ble.w	800d15e <__ieee754_pow+0x9b6>
 800cf48:	151b      	asrs	r3, r3, #20
 800cf4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cf4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cf52:	fa4a f303 	asr.w	r3, sl, r3
 800cf56:	445b      	add	r3, fp
 800cf58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cf5c:	4e9d      	ldr	r6, [pc, #628]	; (800d1d4 <__ieee754_pow+0xa2c>)
 800cf5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cf62:	4116      	asrs	r6, r2
 800cf64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cf68:	2000      	movs	r0, #0
 800cf6a:	ea23 0106 	bic.w	r1, r3, r6
 800cf6e:	f1c2 0214 	rsb	r2, r2, #20
 800cf72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cf76:	fa4a fa02 	asr.w	sl, sl, r2
 800cf7a:	f1bb 0f00 	cmp.w	fp, #0
 800cf7e:	4602      	mov	r2, r0
 800cf80:	460b      	mov	r3, r1
 800cf82:	4620      	mov	r0, r4
 800cf84:	4629      	mov	r1, r5
 800cf86:	bfb8      	it	lt
 800cf88:	f1ca 0a00 	rsblt	sl, sl, #0
 800cf8c:	f7f3 f920 	bl	80001d0 <__aeabi_dsub>
 800cf90:	ec41 0b19 	vmov	d9, r0, r1
 800cf94:	4642      	mov	r2, r8
 800cf96:	464b      	mov	r3, r9
 800cf98:	ec51 0b19 	vmov	r0, r1, d9
 800cf9c:	f7f3 f91a 	bl	80001d4 <__adddf3>
 800cfa0:	2400      	movs	r4, #0
 800cfa2:	a379      	add	r3, pc, #484	; (adr r3, 800d188 <__ieee754_pow+0x9e0>)
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	460d      	mov	r5, r1
 800cfac:	f7f3 fac8 	bl	8000540 <__aeabi_dmul>
 800cfb0:	ec53 2b19 	vmov	r2, r3, d9
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	460f      	mov	r7, r1
 800cfb8:	4620      	mov	r0, r4
 800cfba:	4629      	mov	r1, r5
 800cfbc:	f7f3 f908 	bl	80001d0 <__aeabi_dsub>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4640      	mov	r0, r8
 800cfc6:	4649      	mov	r1, r9
 800cfc8:	f7f3 f902 	bl	80001d0 <__aeabi_dsub>
 800cfcc:	a370      	add	r3, pc, #448	; (adr r3, 800d190 <__ieee754_pow+0x9e8>)
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	f7f3 fab5 	bl	8000540 <__aeabi_dmul>
 800cfd6:	a370      	add	r3, pc, #448	; (adr r3, 800d198 <__ieee754_pow+0x9f0>)
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	4680      	mov	r8, r0
 800cfde:	4689      	mov	r9, r1
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	f7f3 faac 	bl	8000540 <__aeabi_dmul>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	460b      	mov	r3, r1
 800cfec:	4640      	mov	r0, r8
 800cfee:	4649      	mov	r1, r9
 800cff0:	f7f3 f8f0 	bl	80001d4 <__adddf3>
 800cff4:	4604      	mov	r4, r0
 800cff6:	460d      	mov	r5, r1
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	4630      	mov	r0, r6
 800cffe:	4639      	mov	r1, r7
 800d000:	f7f3 f8e8 	bl	80001d4 <__adddf3>
 800d004:	4632      	mov	r2, r6
 800d006:	463b      	mov	r3, r7
 800d008:	4680      	mov	r8, r0
 800d00a:	4689      	mov	r9, r1
 800d00c:	f7f3 f8e0 	bl	80001d0 <__aeabi_dsub>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4620      	mov	r0, r4
 800d016:	4629      	mov	r1, r5
 800d018:	f7f3 f8da 	bl	80001d0 <__aeabi_dsub>
 800d01c:	4642      	mov	r2, r8
 800d01e:	4606      	mov	r6, r0
 800d020:	460f      	mov	r7, r1
 800d022:	464b      	mov	r3, r9
 800d024:	4640      	mov	r0, r8
 800d026:	4649      	mov	r1, r9
 800d028:	f7f3 fa8a 	bl	8000540 <__aeabi_dmul>
 800d02c:	a35c      	add	r3, pc, #368	; (adr r3, 800d1a0 <__ieee754_pow+0x9f8>)
 800d02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d032:	4604      	mov	r4, r0
 800d034:	460d      	mov	r5, r1
 800d036:	f7f3 fa83 	bl	8000540 <__aeabi_dmul>
 800d03a:	a35b      	add	r3, pc, #364	; (adr r3, 800d1a8 <__ieee754_pow+0xa00>)
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	f7f3 f8c6 	bl	80001d0 <__aeabi_dsub>
 800d044:	4622      	mov	r2, r4
 800d046:	462b      	mov	r3, r5
 800d048:	f7f3 fa7a 	bl	8000540 <__aeabi_dmul>
 800d04c:	a358      	add	r3, pc, #352	; (adr r3, 800d1b0 <__ieee754_pow+0xa08>)
 800d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d052:	f7f3 f8bf 	bl	80001d4 <__adddf3>
 800d056:	4622      	mov	r2, r4
 800d058:	462b      	mov	r3, r5
 800d05a:	f7f3 fa71 	bl	8000540 <__aeabi_dmul>
 800d05e:	a356      	add	r3, pc, #344	; (adr r3, 800d1b8 <__ieee754_pow+0xa10>)
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	f7f3 f8b4 	bl	80001d0 <__aeabi_dsub>
 800d068:	4622      	mov	r2, r4
 800d06a:	462b      	mov	r3, r5
 800d06c:	f7f3 fa68 	bl	8000540 <__aeabi_dmul>
 800d070:	a353      	add	r3, pc, #332	; (adr r3, 800d1c0 <__ieee754_pow+0xa18>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	f7f3 f8ad 	bl	80001d4 <__adddf3>
 800d07a:	4622      	mov	r2, r4
 800d07c:	462b      	mov	r3, r5
 800d07e:	f7f3 fa5f 	bl	8000540 <__aeabi_dmul>
 800d082:	4602      	mov	r2, r0
 800d084:	460b      	mov	r3, r1
 800d086:	4640      	mov	r0, r8
 800d088:	4649      	mov	r1, r9
 800d08a:	f7f3 f8a1 	bl	80001d0 <__aeabi_dsub>
 800d08e:	4604      	mov	r4, r0
 800d090:	460d      	mov	r5, r1
 800d092:	4602      	mov	r2, r0
 800d094:	460b      	mov	r3, r1
 800d096:	4640      	mov	r0, r8
 800d098:	4649      	mov	r1, r9
 800d09a:	f7f3 fa51 	bl	8000540 <__aeabi_dmul>
 800d09e:	2200      	movs	r2, #0
 800d0a0:	ec41 0b19 	vmov	d9, r0, r1
 800d0a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	4629      	mov	r1, r5
 800d0ac:	f7f3 f890 	bl	80001d0 <__aeabi_dsub>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	ec51 0b19 	vmov	r0, r1, d9
 800d0b8:	f7f3 fb6c 	bl	8000794 <__aeabi_ddiv>
 800d0bc:	4632      	mov	r2, r6
 800d0be:	4604      	mov	r4, r0
 800d0c0:	460d      	mov	r5, r1
 800d0c2:	463b      	mov	r3, r7
 800d0c4:	4640      	mov	r0, r8
 800d0c6:	4649      	mov	r1, r9
 800d0c8:	f7f3 fa3a 	bl	8000540 <__aeabi_dmul>
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	463b      	mov	r3, r7
 800d0d0:	f7f3 f880 	bl	80001d4 <__adddf3>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	4620      	mov	r0, r4
 800d0da:	4629      	mov	r1, r5
 800d0dc:	f7f3 f878 	bl	80001d0 <__aeabi_dsub>
 800d0e0:	4642      	mov	r2, r8
 800d0e2:	464b      	mov	r3, r9
 800d0e4:	f7f3 f874 	bl	80001d0 <__aeabi_dsub>
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	493a      	ldr	r1, [pc, #232]	; (800d1d8 <__ieee754_pow+0xa30>)
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	f7f3 f86e 	bl	80001d0 <__aeabi_dsub>
 800d0f4:	e9cd 0100 	strd	r0, r1, [sp]
 800d0f8:	9b01      	ldr	r3, [sp, #4]
 800d0fa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d0fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d102:	da2f      	bge.n	800d164 <__ieee754_pow+0x9bc>
 800d104:	4650      	mov	r0, sl
 800d106:	ed9d 0b00 	vldr	d0, [sp]
 800d10a:	f000 fb6d 	bl	800d7e8 <scalbn>
 800d10e:	ec51 0b10 	vmov	r0, r1, d0
 800d112:	ec53 2b18 	vmov	r2, r3, d8
 800d116:	f7ff bbe0 	b.w	800c8da <__ieee754_pow+0x132>
 800d11a:	4b30      	ldr	r3, [pc, #192]	; (800d1dc <__ieee754_pow+0xa34>)
 800d11c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d120:	429e      	cmp	r6, r3
 800d122:	f77f af0b 	ble.w	800cf3c <__ieee754_pow+0x794>
 800d126:	4b2e      	ldr	r3, [pc, #184]	; (800d1e0 <__ieee754_pow+0xa38>)
 800d128:	440b      	add	r3, r1
 800d12a:	4303      	orrs	r3, r0
 800d12c:	d00b      	beq.n	800d146 <__ieee754_pow+0x99e>
 800d12e:	a326      	add	r3, pc, #152	; (adr r3, 800d1c8 <__ieee754_pow+0xa20>)
 800d130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d134:	ec51 0b18 	vmov	r0, r1, d8
 800d138:	f7f3 fa02 	bl	8000540 <__aeabi_dmul>
 800d13c:	a322      	add	r3, pc, #136	; (adr r3, 800d1c8 <__ieee754_pow+0xa20>)
 800d13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d142:	f7ff bbca 	b.w	800c8da <__ieee754_pow+0x132>
 800d146:	4622      	mov	r2, r4
 800d148:	462b      	mov	r3, r5
 800d14a:	f7f3 f841 	bl	80001d0 <__aeabi_dsub>
 800d14e:	4642      	mov	r2, r8
 800d150:	464b      	mov	r3, r9
 800d152:	f7f3 fc7b 	bl	8000a4c <__aeabi_dcmpge>
 800d156:	2800      	cmp	r0, #0
 800d158:	f43f aef0 	beq.w	800cf3c <__ieee754_pow+0x794>
 800d15c:	e7e7      	b.n	800d12e <__ieee754_pow+0x986>
 800d15e:	f04f 0a00 	mov.w	sl, #0
 800d162:	e717      	b.n	800cf94 <__ieee754_pow+0x7ec>
 800d164:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d168:	4619      	mov	r1, r3
 800d16a:	e7d2      	b.n	800d112 <__ieee754_pow+0x96a>
 800d16c:	491a      	ldr	r1, [pc, #104]	; (800d1d8 <__ieee754_pow+0xa30>)
 800d16e:	2000      	movs	r0, #0
 800d170:	f7ff bb9e 	b.w	800c8b0 <__ieee754_pow+0x108>
 800d174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d178:	f7ff bb9a 	b.w	800c8b0 <__ieee754_pow+0x108>
 800d17c:	9000      	str	r0, [sp, #0]
 800d17e:	f7ff bb76 	b.w	800c86e <__ieee754_pow+0xc6>
 800d182:	2100      	movs	r1, #0
 800d184:	f7ff bb60 	b.w	800c848 <__ieee754_pow+0xa0>
 800d188:	00000000 	.word	0x00000000
 800d18c:	3fe62e43 	.word	0x3fe62e43
 800d190:	fefa39ef 	.word	0xfefa39ef
 800d194:	3fe62e42 	.word	0x3fe62e42
 800d198:	0ca86c39 	.word	0x0ca86c39
 800d19c:	be205c61 	.word	0xbe205c61
 800d1a0:	72bea4d0 	.word	0x72bea4d0
 800d1a4:	3e663769 	.word	0x3e663769
 800d1a8:	c5d26bf1 	.word	0xc5d26bf1
 800d1ac:	3ebbbd41 	.word	0x3ebbbd41
 800d1b0:	af25de2c 	.word	0xaf25de2c
 800d1b4:	3f11566a 	.word	0x3f11566a
 800d1b8:	16bebd93 	.word	0x16bebd93
 800d1bc:	3f66c16c 	.word	0x3f66c16c
 800d1c0:	5555553e 	.word	0x5555553e
 800d1c4:	3fc55555 	.word	0x3fc55555
 800d1c8:	c2f8f359 	.word	0xc2f8f359
 800d1cc:	01a56e1f 	.word	0x01a56e1f
 800d1d0:	3fe00000 	.word	0x3fe00000
 800d1d4:	000fffff 	.word	0x000fffff
 800d1d8:	3ff00000 	.word	0x3ff00000
 800d1dc:	4090cbff 	.word	0x4090cbff
 800d1e0:	3f6f3400 	.word	0x3f6f3400
 800d1e4:	652b82fe 	.word	0x652b82fe
 800d1e8:	3c971547 	.word	0x3c971547

0800d1ec <__ieee754_sqrt>:
 800d1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f0:	ec55 4b10 	vmov	r4, r5, d0
 800d1f4:	4e56      	ldr	r6, [pc, #344]	; (800d350 <__ieee754_sqrt+0x164>)
 800d1f6:	43ae      	bics	r6, r5
 800d1f8:	ee10 0a10 	vmov	r0, s0
 800d1fc:	ee10 3a10 	vmov	r3, s0
 800d200:	4629      	mov	r1, r5
 800d202:	462a      	mov	r2, r5
 800d204:	d110      	bne.n	800d228 <__ieee754_sqrt+0x3c>
 800d206:	ee10 2a10 	vmov	r2, s0
 800d20a:	462b      	mov	r3, r5
 800d20c:	f7f3 f998 	bl	8000540 <__aeabi_dmul>
 800d210:	4602      	mov	r2, r0
 800d212:	460b      	mov	r3, r1
 800d214:	4620      	mov	r0, r4
 800d216:	4629      	mov	r1, r5
 800d218:	f7f2 ffdc 	bl	80001d4 <__adddf3>
 800d21c:	4604      	mov	r4, r0
 800d21e:	460d      	mov	r5, r1
 800d220:	ec45 4b10 	vmov	d0, r4, r5
 800d224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d228:	2d00      	cmp	r5, #0
 800d22a:	dc10      	bgt.n	800d24e <__ieee754_sqrt+0x62>
 800d22c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d230:	4330      	orrs	r0, r6
 800d232:	d0f5      	beq.n	800d220 <__ieee754_sqrt+0x34>
 800d234:	b15d      	cbz	r5, 800d24e <__ieee754_sqrt+0x62>
 800d236:	ee10 2a10 	vmov	r2, s0
 800d23a:	462b      	mov	r3, r5
 800d23c:	ee10 0a10 	vmov	r0, s0
 800d240:	f7f2 ffc6 	bl	80001d0 <__aeabi_dsub>
 800d244:	4602      	mov	r2, r0
 800d246:	460b      	mov	r3, r1
 800d248:	f7f3 faa4 	bl	8000794 <__aeabi_ddiv>
 800d24c:	e7e6      	b.n	800d21c <__ieee754_sqrt+0x30>
 800d24e:	1509      	asrs	r1, r1, #20
 800d250:	d076      	beq.n	800d340 <__ieee754_sqrt+0x154>
 800d252:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d256:	07ce      	lsls	r6, r1, #31
 800d258:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d25c:	bf5e      	ittt	pl
 800d25e:	0fda      	lsrpl	r2, r3, #31
 800d260:	005b      	lslpl	r3, r3, #1
 800d262:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d266:	0fda      	lsrs	r2, r3, #31
 800d268:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d26c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d270:	2000      	movs	r0, #0
 800d272:	106d      	asrs	r5, r5, #1
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	f04f 0e16 	mov.w	lr, #22
 800d27a:	4684      	mov	ip, r0
 800d27c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d280:	eb0c 0401 	add.w	r4, ip, r1
 800d284:	4294      	cmp	r4, r2
 800d286:	bfde      	ittt	le
 800d288:	1b12      	suble	r2, r2, r4
 800d28a:	eb04 0c01 	addle.w	ip, r4, r1
 800d28e:	1840      	addle	r0, r0, r1
 800d290:	0052      	lsls	r2, r2, #1
 800d292:	f1be 0e01 	subs.w	lr, lr, #1
 800d296:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d29a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d29e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d2a2:	d1ed      	bne.n	800d280 <__ieee754_sqrt+0x94>
 800d2a4:	4671      	mov	r1, lr
 800d2a6:	2720      	movs	r7, #32
 800d2a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d2ac:	4562      	cmp	r2, ip
 800d2ae:	eb04 060e 	add.w	r6, r4, lr
 800d2b2:	dc02      	bgt.n	800d2ba <__ieee754_sqrt+0xce>
 800d2b4:	d113      	bne.n	800d2de <__ieee754_sqrt+0xf2>
 800d2b6:	429e      	cmp	r6, r3
 800d2b8:	d811      	bhi.n	800d2de <__ieee754_sqrt+0xf2>
 800d2ba:	2e00      	cmp	r6, #0
 800d2bc:	eb06 0e04 	add.w	lr, r6, r4
 800d2c0:	da43      	bge.n	800d34a <__ieee754_sqrt+0x15e>
 800d2c2:	f1be 0f00 	cmp.w	lr, #0
 800d2c6:	db40      	blt.n	800d34a <__ieee754_sqrt+0x15e>
 800d2c8:	f10c 0801 	add.w	r8, ip, #1
 800d2cc:	eba2 020c 	sub.w	r2, r2, ip
 800d2d0:	429e      	cmp	r6, r3
 800d2d2:	bf88      	it	hi
 800d2d4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d2d8:	1b9b      	subs	r3, r3, r6
 800d2da:	4421      	add	r1, r4
 800d2dc:	46c4      	mov	ip, r8
 800d2de:	0052      	lsls	r2, r2, #1
 800d2e0:	3f01      	subs	r7, #1
 800d2e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d2e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d2ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d2ee:	d1dd      	bne.n	800d2ac <__ieee754_sqrt+0xc0>
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	d006      	beq.n	800d302 <__ieee754_sqrt+0x116>
 800d2f4:	1c4c      	adds	r4, r1, #1
 800d2f6:	bf13      	iteet	ne
 800d2f8:	3101      	addne	r1, #1
 800d2fa:	3001      	addeq	r0, #1
 800d2fc:	4639      	moveq	r1, r7
 800d2fe:	f021 0101 	bicne.w	r1, r1, #1
 800d302:	1043      	asrs	r3, r0, #1
 800d304:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d308:	0849      	lsrs	r1, r1, #1
 800d30a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d30e:	07c2      	lsls	r2, r0, #31
 800d310:	bf48      	it	mi
 800d312:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d316:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d31a:	460c      	mov	r4, r1
 800d31c:	463d      	mov	r5, r7
 800d31e:	e77f      	b.n	800d220 <__ieee754_sqrt+0x34>
 800d320:	0ada      	lsrs	r2, r3, #11
 800d322:	3815      	subs	r0, #21
 800d324:	055b      	lsls	r3, r3, #21
 800d326:	2a00      	cmp	r2, #0
 800d328:	d0fa      	beq.n	800d320 <__ieee754_sqrt+0x134>
 800d32a:	02d7      	lsls	r7, r2, #11
 800d32c:	d50a      	bpl.n	800d344 <__ieee754_sqrt+0x158>
 800d32e:	f1c1 0420 	rsb	r4, r1, #32
 800d332:	fa23 f404 	lsr.w	r4, r3, r4
 800d336:	1e4d      	subs	r5, r1, #1
 800d338:	408b      	lsls	r3, r1
 800d33a:	4322      	orrs	r2, r4
 800d33c:	1b41      	subs	r1, r0, r5
 800d33e:	e788      	b.n	800d252 <__ieee754_sqrt+0x66>
 800d340:	4608      	mov	r0, r1
 800d342:	e7f0      	b.n	800d326 <__ieee754_sqrt+0x13a>
 800d344:	0052      	lsls	r2, r2, #1
 800d346:	3101      	adds	r1, #1
 800d348:	e7ef      	b.n	800d32a <__ieee754_sqrt+0x13e>
 800d34a:	46e0      	mov	r8, ip
 800d34c:	e7be      	b.n	800d2cc <__ieee754_sqrt+0xe0>
 800d34e:	bf00      	nop
 800d350:	7ff00000 	.word	0x7ff00000
 800d354:	00000000 	.word	0x00000000

0800d358 <atan>:
 800d358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35c:	ec55 4b10 	vmov	r4, r5, d0
 800d360:	4bc3      	ldr	r3, [pc, #780]	; (800d670 <atan+0x318>)
 800d362:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d366:	429e      	cmp	r6, r3
 800d368:	46ab      	mov	fp, r5
 800d36a:	dd18      	ble.n	800d39e <atan+0x46>
 800d36c:	4bc1      	ldr	r3, [pc, #772]	; (800d674 <atan+0x31c>)
 800d36e:	429e      	cmp	r6, r3
 800d370:	dc01      	bgt.n	800d376 <atan+0x1e>
 800d372:	d109      	bne.n	800d388 <atan+0x30>
 800d374:	b144      	cbz	r4, 800d388 <atan+0x30>
 800d376:	4622      	mov	r2, r4
 800d378:	462b      	mov	r3, r5
 800d37a:	4620      	mov	r0, r4
 800d37c:	4629      	mov	r1, r5
 800d37e:	f7f2 ff29 	bl	80001d4 <__adddf3>
 800d382:	4604      	mov	r4, r0
 800d384:	460d      	mov	r5, r1
 800d386:	e006      	b.n	800d396 <atan+0x3e>
 800d388:	f1bb 0f00 	cmp.w	fp, #0
 800d38c:	f300 8131 	bgt.w	800d5f2 <atan+0x29a>
 800d390:	a59b      	add	r5, pc, #620	; (adr r5, 800d600 <atan+0x2a8>)
 800d392:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d396:	ec45 4b10 	vmov	d0, r4, r5
 800d39a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d39e:	4bb6      	ldr	r3, [pc, #728]	; (800d678 <atan+0x320>)
 800d3a0:	429e      	cmp	r6, r3
 800d3a2:	dc14      	bgt.n	800d3ce <atan+0x76>
 800d3a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d3a8:	429e      	cmp	r6, r3
 800d3aa:	dc0d      	bgt.n	800d3c8 <atan+0x70>
 800d3ac:	a396      	add	r3, pc, #600	; (adr r3, 800d608 <atan+0x2b0>)
 800d3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b2:	ee10 0a10 	vmov	r0, s0
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	f7f2 ff0c 	bl	80001d4 <__adddf3>
 800d3bc:	4baf      	ldr	r3, [pc, #700]	; (800d67c <atan+0x324>)
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f7f3 fb4e 	bl	8000a60 <__aeabi_dcmpgt>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d1e6      	bne.n	800d396 <atan+0x3e>
 800d3c8:	f04f 3aff 	mov.w	sl, #4294967295
 800d3cc:	e02b      	b.n	800d426 <atan+0xce>
 800d3ce:	f000 f963 	bl	800d698 <fabs>
 800d3d2:	4bab      	ldr	r3, [pc, #684]	; (800d680 <atan+0x328>)
 800d3d4:	429e      	cmp	r6, r3
 800d3d6:	ec55 4b10 	vmov	r4, r5, d0
 800d3da:	f300 80bf 	bgt.w	800d55c <atan+0x204>
 800d3de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d3e2:	429e      	cmp	r6, r3
 800d3e4:	f300 80a0 	bgt.w	800d528 <atan+0x1d0>
 800d3e8:	ee10 2a10 	vmov	r2, s0
 800d3ec:	ee10 0a10 	vmov	r0, s0
 800d3f0:	462b      	mov	r3, r5
 800d3f2:	4629      	mov	r1, r5
 800d3f4:	f7f2 feee 	bl	80001d4 <__adddf3>
 800d3f8:	4ba0      	ldr	r3, [pc, #640]	; (800d67c <atan+0x324>)
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f7f2 fee8 	bl	80001d0 <__aeabi_dsub>
 800d400:	2200      	movs	r2, #0
 800d402:	4606      	mov	r6, r0
 800d404:	460f      	mov	r7, r1
 800d406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d40a:	4620      	mov	r0, r4
 800d40c:	4629      	mov	r1, r5
 800d40e:	f7f2 fee1 	bl	80001d4 <__adddf3>
 800d412:	4602      	mov	r2, r0
 800d414:	460b      	mov	r3, r1
 800d416:	4630      	mov	r0, r6
 800d418:	4639      	mov	r1, r7
 800d41a:	f7f3 f9bb 	bl	8000794 <__aeabi_ddiv>
 800d41e:	f04f 0a00 	mov.w	sl, #0
 800d422:	4604      	mov	r4, r0
 800d424:	460d      	mov	r5, r1
 800d426:	4622      	mov	r2, r4
 800d428:	462b      	mov	r3, r5
 800d42a:	4620      	mov	r0, r4
 800d42c:	4629      	mov	r1, r5
 800d42e:	f7f3 f887 	bl	8000540 <__aeabi_dmul>
 800d432:	4602      	mov	r2, r0
 800d434:	460b      	mov	r3, r1
 800d436:	4680      	mov	r8, r0
 800d438:	4689      	mov	r9, r1
 800d43a:	f7f3 f881 	bl	8000540 <__aeabi_dmul>
 800d43e:	a374      	add	r3, pc, #464	; (adr r3, 800d610 <atan+0x2b8>)
 800d440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d444:	4606      	mov	r6, r0
 800d446:	460f      	mov	r7, r1
 800d448:	f7f3 f87a 	bl	8000540 <__aeabi_dmul>
 800d44c:	a372      	add	r3, pc, #456	; (adr r3, 800d618 <atan+0x2c0>)
 800d44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d452:	f7f2 febf 	bl	80001d4 <__adddf3>
 800d456:	4632      	mov	r2, r6
 800d458:	463b      	mov	r3, r7
 800d45a:	f7f3 f871 	bl	8000540 <__aeabi_dmul>
 800d45e:	a370      	add	r3, pc, #448	; (adr r3, 800d620 <atan+0x2c8>)
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	f7f2 feb6 	bl	80001d4 <__adddf3>
 800d468:	4632      	mov	r2, r6
 800d46a:	463b      	mov	r3, r7
 800d46c:	f7f3 f868 	bl	8000540 <__aeabi_dmul>
 800d470:	a36d      	add	r3, pc, #436	; (adr r3, 800d628 <atan+0x2d0>)
 800d472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d476:	f7f2 fead 	bl	80001d4 <__adddf3>
 800d47a:	4632      	mov	r2, r6
 800d47c:	463b      	mov	r3, r7
 800d47e:	f7f3 f85f 	bl	8000540 <__aeabi_dmul>
 800d482:	a36b      	add	r3, pc, #428	; (adr r3, 800d630 <atan+0x2d8>)
 800d484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d488:	f7f2 fea4 	bl	80001d4 <__adddf3>
 800d48c:	4632      	mov	r2, r6
 800d48e:	463b      	mov	r3, r7
 800d490:	f7f3 f856 	bl	8000540 <__aeabi_dmul>
 800d494:	a368      	add	r3, pc, #416	; (adr r3, 800d638 <atan+0x2e0>)
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	f7f2 fe9b 	bl	80001d4 <__adddf3>
 800d49e:	4642      	mov	r2, r8
 800d4a0:	464b      	mov	r3, r9
 800d4a2:	f7f3 f84d 	bl	8000540 <__aeabi_dmul>
 800d4a6:	a366      	add	r3, pc, #408	; (adr r3, 800d640 <atan+0x2e8>)
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	4680      	mov	r8, r0
 800d4ae:	4689      	mov	r9, r1
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	4639      	mov	r1, r7
 800d4b4:	f7f3 f844 	bl	8000540 <__aeabi_dmul>
 800d4b8:	a363      	add	r3, pc, #396	; (adr r3, 800d648 <atan+0x2f0>)
 800d4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4be:	f7f2 fe87 	bl	80001d0 <__aeabi_dsub>
 800d4c2:	4632      	mov	r2, r6
 800d4c4:	463b      	mov	r3, r7
 800d4c6:	f7f3 f83b 	bl	8000540 <__aeabi_dmul>
 800d4ca:	a361      	add	r3, pc, #388	; (adr r3, 800d650 <atan+0x2f8>)
 800d4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d0:	f7f2 fe7e 	bl	80001d0 <__aeabi_dsub>
 800d4d4:	4632      	mov	r2, r6
 800d4d6:	463b      	mov	r3, r7
 800d4d8:	f7f3 f832 	bl	8000540 <__aeabi_dmul>
 800d4dc:	a35e      	add	r3, pc, #376	; (adr r3, 800d658 <atan+0x300>)
 800d4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e2:	f7f2 fe75 	bl	80001d0 <__aeabi_dsub>
 800d4e6:	4632      	mov	r2, r6
 800d4e8:	463b      	mov	r3, r7
 800d4ea:	f7f3 f829 	bl	8000540 <__aeabi_dmul>
 800d4ee:	a35c      	add	r3, pc, #368	; (adr r3, 800d660 <atan+0x308>)
 800d4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f4:	f7f2 fe6c 	bl	80001d0 <__aeabi_dsub>
 800d4f8:	4632      	mov	r2, r6
 800d4fa:	463b      	mov	r3, r7
 800d4fc:	f7f3 f820 	bl	8000540 <__aeabi_dmul>
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	4640      	mov	r0, r8
 800d506:	4649      	mov	r1, r9
 800d508:	f7f2 fe64 	bl	80001d4 <__adddf3>
 800d50c:	4622      	mov	r2, r4
 800d50e:	462b      	mov	r3, r5
 800d510:	f7f3 f816 	bl	8000540 <__aeabi_dmul>
 800d514:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	d14b      	bne.n	800d5b6 <atan+0x25e>
 800d51e:	4620      	mov	r0, r4
 800d520:	4629      	mov	r1, r5
 800d522:	f7f2 fe55 	bl	80001d0 <__aeabi_dsub>
 800d526:	e72c      	b.n	800d382 <atan+0x2a>
 800d528:	ee10 0a10 	vmov	r0, s0
 800d52c:	4b53      	ldr	r3, [pc, #332]	; (800d67c <atan+0x324>)
 800d52e:	2200      	movs	r2, #0
 800d530:	4629      	mov	r1, r5
 800d532:	f7f2 fe4d 	bl	80001d0 <__aeabi_dsub>
 800d536:	4b51      	ldr	r3, [pc, #324]	; (800d67c <atan+0x324>)
 800d538:	4606      	mov	r6, r0
 800d53a:	460f      	mov	r7, r1
 800d53c:	2200      	movs	r2, #0
 800d53e:	4620      	mov	r0, r4
 800d540:	4629      	mov	r1, r5
 800d542:	f7f2 fe47 	bl	80001d4 <__adddf3>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	4630      	mov	r0, r6
 800d54c:	4639      	mov	r1, r7
 800d54e:	f7f3 f921 	bl	8000794 <__aeabi_ddiv>
 800d552:	f04f 0a01 	mov.w	sl, #1
 800d556:	4604      	mov	r4, r0
 800d558:	460d      	mov	r5, r1
 800d55a:	e764      	b.n	800d426 <atan+0xce>
 800d55c:	4b49      	ldr	r3, [pc, #292]	; (800d684 <atan+0x32c>)
 800d55e:	429e      	cmp	r6, r3
 800d560:	da1d      	bge.n	800d59e <atan+0x246>
 800d562:	ee10 0a10 	vmov	r0, s0
 800d566:	4b48      	ldr	r3, [pc, #288]	; (800d688 <atan+0x330>)
 800d568:	2200      	movs	r2, #0
 800d56a:	4629      	mov	r1, r5
 800d56c:	f7f2 fe30 	bl	80001d0 <__aeabi_dsub>
 800d570:	4b45      	ldr	r3, [pc, #276]	; (800d688 <atan+0x330>)
 800d572:	4606      	mov	r6, r0
 800d574:	460f      	mov	r7, r1
 800d576:	2200      	movs	r2, #0
 800d578:	4620      	mov	r0, r4
 800d57a:	4629      	mov	r1, r5
 800d57c:	f7f2 ffe0 	bl	8000540 <__aeabi_dmul>
 800d580:	4b3e      	ldr	r3, [pc, #248]	; (800d67c <atan+0x324>)
 800d582:	2200      	movs	r2, #0
 800d584:	f7f2 fe26 	bl	80001d4 <__adddf3>
 800d588:	4602      	mov	r2, r0
 800d58a:	460b      	mov	r3, r1
 800d58c:	4630      	mov	r0, r6
 800d58e:	4639      	mov	r1, r7
 800d590:	f7f3 f900 	bl	8000794 <__aeabi_ddiv>
 800d594:	f04f 0a02 	mov.w	sl, #2
 800d598:	4604      	mov	r4, r0
 800d59a:	460d      	mov	r5, r1
 800d59c:	e743      	b.n	800d426 <atan+0xce>
 800d59e:	462b      	mov	r3, r5
 800d5a0:	ee10 2a10 	vmov	r2, s0
 800d5a4:	4939      	ldr	r1, [pc, #228]	; (800d68c <atan+0x334>)
 800d5a6:	2000      	movs	r0, #0
 800d5a8:	f7f3 f8f4 	bl	8000794 <__aeabi_ddiv>
 800d5ac:	f04f 0a03 	mov.w	sl, #3
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	e737      	b.n	800d426 <atan+0xce>
 800d5b6:	4b36      	ldr	r3, [pc, #216]	; (800d690 <atan+0x338>)
 800d5b8:	4e36      	ldr	r6, [pc, #216]	; (800d694 <atan+0x33c>)
 800d5ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d5be:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d5c2:	e9da 2300 	ldrd	r2, r3, [sl]
 800d5c6:	f7f2 fe03 	bl	80001d0 <__aeabi_dsub>
 800d5ca:	4622      	mov	r2, r4
 800d5cc:	462b      	mov	r3, r5
 800d5ce:	f7f2 fdff 	bl	80001d0 <__aeabi_dsub>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d5da:	f7f2 fdf9 	bl	80001d0 <__aeabi_dsub>
 800d5de:	f1bb 0f00 	cmp.w	fp, #0
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	460d      	mov	r5, r1
 800d5e6:	f6bf aed6 	bge.w	800d396 <atan+0x3e>
 800d5ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5ee:	461d      	mov	r5, r3
 800d5f0:	e6d1      	b.n	800d396 <atan+0x3e>
 800d5f2:	a51d      	add	r5, pc, #116	; (adr r5, 800d668 <atan+0x310>)
 800d5f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d5f8:	e6cd      	b.n	800d396 <atan+0x3e>
 800d5fa:	bf00      	nop
 800d5fc:	f3af 8000 	nop.w
 800d600:	54442d18 	.word	0x54442d18
 800d604:	bff921fb 	.word	0xbff921fb
 800d608:	8800759c 	.word	0x8800759c
 800d60c:	7e37e43c 	.word	0x7e37e43c
 800d610:	e322da11 	.word	0xe322da11
 800d614:	3f90ad3a 	.word	0x3f90ad3a
 800d618:	24760deb 	.word	0x24760deb
 800d61c:	3fa97b4b 	.word	0x3fa97b4b
 800d620:	a0d03d51 	.word	0xa0d03d51
 800d624:	3fb10d66 	.word	0x3fb10d66
 800d628:	c54c206e 	.word	0xc54c206e
 800d62c:	3fb745cd 	.word	0x3fb745cd
 800d630:	920083ff 	.word	0x920083ff
 800d634:	3fc24924 	.word	0x3fc24924
 800d638:	5555550d 	.word	0x5555550d
 800d63c:	3fd55555 	.word	0x3fd55555
 800d640:	2c6a6c2f 	.word	0x2c6a6c2f
 800d644:	bfa2b444 	.word	0xbfa2b444
 800d648:	52defd9a 	.word	0x52defd9a
 800d64c:	3fadde2d 	.word	0x3fadde2d
 800d650:	af749a6d 	.word	0xaf749a6d
 800d654:	3fb3b0f2 	.word	0x3fb3b0f2
 800d658:	fe231671 	.word	0xfe231671
 800d65c:	3fbc71c6 	.word	0x3fbc71c6
 800d660:	9998ebc4 	.word	0x9998ebc4
 800d664:	3fc99999 	.word	0x3fc99999
 800d668:	54442d18 	.word	0x54442d18
 800d66c:	3ff921fb 	.word	0x3ff921fb
 800d670:	440fffff 	.word	0x440fffff
 800d674:	7ff00000 	.word	0x7ff00000
 800d678:	3fdbffff 	.word	0x3fdbffff
 800d67c:	3ff00000 	.word	0x3ff00000
 800d680:	3ff2ffff 	.word	0x3ff2ffff
 800d684:	40038000 	.word	0x40038000
 800d688:	3ff80000 	.word	0x3ff80000
 800d68c:	bff00000 	.word	0xbff00000
 800d690:	0800da00 	.word	0x0800da00
 800d694:	0800d9e0 	.word	0x0800d9e0

0800d698 <fabs>:
 800d698:	ec51 0b10 	vmov	r0, r1, d0
 800d69c:	ee10 2a10 	vmov	r2, s0
 800d6a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d6a4:	ec43 2b10 	vmov	d0, r2, r3
 800d6a8:	4770      	bx	lr

0800d6aa <finite>:
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	ed8d 0b00 	vstr	d0, [sp]
 800d6b0:	9801      	ldr	r0, [sp, #4]
 800d6b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d6b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d6ba:	0fc0      	lsrs	r0, r0, #31
 800d6bc:	b002      	add	sp, #8
 800d6be:	4770      	bx	lr

0800d6c0 <nan>:
 800d6c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d6c8 <nan+0x8>
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop
 800d6c8:	00000000 	.word	0x00000000
 800d6cc:	7ff80000 	.word	0x7ff80000

0800d6d0 <rint>:
 800d6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6d2:	ec51 0b10 	vmov	r0, r1, d0
 800d6d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d6da:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d6de:	2e13      	cmp	r6, #19
 800d6e0:	ee10 4a10 	vmov	r4, s0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d6ea:	dc58      	bgt.n	800d79e <rint+0xce>
 800d6ec:	2e00      	cmp	r6, #0
 800d6ee:	da2b      	bge.n	800d748 <rint+0x78>
 800d6f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d6f4:	4302      	orrs	r2, r0
 800d6f6:	d023      	beq.n	800d740 <rint+0x70>
 800d6f8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d6fc:	4302      	orrs	r2, r0
 800d6fe:	4254      	negs	r4, r2
 800d700:	4314      	orrs	r4, r2
 800d702:	0c4b      	lsrs	r3, r1, #17
 800d704:	0b24      	lsrs	r4, r4, #12
 800d706:	045b      	lsls	r3, r3, #17
 800d708:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d70c:	ea44 0103 	orr.w	r1, r4, r3
 800d710:	4b32      	ldr	r3, [pc, #200]	; (800d7dc <rint+0x10c>)
 800d712:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d716:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d71a:	4602      	mov	r2, r0
 800d71c:	460b      	mov	r3, r1
 800d71e:	4630      	mov	r0, r6
 800d720:	4639      	mov	r1, r7
 800d722:	f7f2 fd57 	bl	80001d4 <__adddf3>
 800d726:	e9cd 0100 	strd	r0, r1, [sp]
 800d72a:	463b      	mov	r3, r7
 800d72c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d730:	4632      	mov	r2, r6
 800d732:	f7f2 fd4d 	bl	80001d0 <__aeabi_dsub>
 800d736:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d73a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d73e:	4639      	mov	r1, r7
 800d740:	ec41 0b10 	vmov	d0, r0, r1
 800d744:	b003      	add	sp, #12
 800d746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d748:	4a25      	ldr	r2, [pc, #148]	; (800d7e0 <rint+0x110>)
 800d74a:	4132      	asrs	r2, r6
 800d74c:	ea01 0702 	and.w	r7, r1, r2
 800d750:	4307      	orrs	r7, r0
 800d752:	d0f5      	beq.n	800d740 <rint+0x70>
 800d754:	0851      	lsrs	r1, r2, #1
 800d756:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800d75a:	4314      	orrs	r4, r2
 800d75c:	d00c      	beq.n	800d778 <rint+0xa8>
 800d75e:	ea23 0201 	bic.w	r2, r3, r1
 800d762:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d766:	2e13      	cmp	r6, #19
 800d768:	fa43 f606 	asr.w	r6, r3, r6
 800d76c:	bf0c      	ite	eq
 800d76e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d772:	2400      	movne	r4, #0
 800d774:	ea42 0306 	orr.w	r3, r2, r6
 800d778:	4918      	ldr	r1, [pc, #96]	; (800d7dc <rint+0x10c>)
 800d77a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d77e:	4622      	mov	r2, r4
 800d780:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d784:	4620      	mov	r0, r4
 800d786:	4629      	mov	r1, r5
 800d788:	f7f2 fd24 	bl	80001d4 <__adddf3>
 800d78c:	e9cd 0100 	strd	r0, r1, [sp]
 800d790:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d794:	4622      	mov	r2, r4
 800d796:	462b      	mov	r3, r5
 800d798:	f7f2 fd1a 	bl	80001d0 <__aeabi_dsub>
 800d79c:	e7d0      	b.n	800d740 <rint+0x70>
 800d79e:	2e33      	cmp	r6, #51	; 0x33
 800d7a0:	dd07      	ble.n	800d7b2 <rint+0xe2>
 800d7a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d7a6:	d1cb      	bne.n	800d740 <rint+0x70>
 800d7a8:	ee10 2a10 	vmov	r2, s0
 800d7ac:	f7f2 fd12 	bl	80001d4 <__adddf3>
 800d7b0:	e7c6      	b.n	800d740 <rint+0x70>
 800d7b2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d7b6:	f04f 36ff 	mov.w	r6, #4294967295
 800d7ba:	40d6      	lsrs	r6, r2
 800d7bc:	4230      	tst	r0, r6
 800d7be:	d0bf      	beq.n	800d740 <rint+0x70>
 800d7c0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800d7c4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800d7c8:	bf1f      	itttt	ne
 800d7ca:	ea24 0101 	bicne.w	r1, r4, r1
 800d7ce:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d7d2:	fa44 f202 	asrne.w	r2, r4, r2
 800d7d6:	ea41 0402 	orrne.w	r4, r1, r2
 800d7da:	e7cd      	b.n	800d778 <rint+0xa8>
 800d7dc:	0800da20 	.word	0x0800da20
 800d7e0:	000fffff 	.word	0x000fffff
 800d7e4:	00000000 	.word	0x00000000

0800d7e8 <scalbn>:
 800d7e8:	b570      	push	{r4, r5, r6, lr}
 800d7ea:	ec55 4b10 	vmov	r4, r5, d0
 800d7ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	462b      	mov	r3, r5
 800d7f6:	b99a      	cbnz	r2, 800d820 <scalbn+0x38>
 800d7f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d7fc:	4323      	orrs	r3, r4
 800d7fe:	d036      	beq.n	800d86e <scalbn+0x86>
 800d800:	4b39      	ldr	r3, [pc, #228]	; (800d8e8 <scalbn+0x100>)
 800d802:	4629      	mov	r1, r5
 800d804:	ee10 0a10 	vmov	r0, s0
 800d808:	2200      	movs	r2, #0
 800d80a:	f7f2 fe99 	bl	8000540 <__aeabi_dmul>
 800d80e:	4b37      	ldr	r3, [pc, #220]	; (800d8ec <scalbn+0x104>)
 800d810:	429e      	cmp	r6, r3
 800d812:	4604      	mov	r4, r0
 800d814:	460d      	mov	r5, r1
 800d816:	da10      	bge.n	800d83a <scalbn+0x52>
 800d818:	a32b      	add	r3, pc, #172	; (adr r3, 800d8c8 <scalbn+0xe0>)
 800d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81e:	e03a      	b.n	800d896 <scalbn+0xae>
 800d820:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d824:	428a      	cmp	r2, r1
 800d826:	d10c      	bne.n	800d842 <scalbn+0x5a>
 800d828:	ee10 2a10 	vmov	r2, s0
 800d82c:	4620      	mov	r0, r4
 800d82e:	4629      	mov	r1, r5
 800d830:	f7f2 fcd0 	bl	80001d4 <__adddf3>
 800d834:	4604      	mov	r4, r0
 800d836:	460d      	mov	r5, r1
 800d838:	e019      	b.n	800d86e <scalbn+0x86>
 800d83a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d83e:	460b      	mov	r3, r1
 800d840:	3a36      	subs	r2, #54	; 0x36
 800d842:	4432      	add	r2, r6
 800d844:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d848:	428a      	cmp	r2, r1
 800d84a:	dd08      	ble.n	800d85e <scalbn+0x76>
 800d84c:	2d00      	cmp	r5, #0
 800d84e:	a120      	add	r1, pc, #128	; (adr r1, 800d8d0 <scalbn+0xe8>)
 800d850:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d854:	da1c      	bge.n	800d890 <scalbn+0xa8>
 800d856:	a120      	add	r1, pc, #128	; (adr r1, 800d8d8 <scalbn+0xf0>)
 800d858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d85c:	e018      	b.n	800d890 <scalbn+0xa8>
 800d85e:	2a00      	cmp	r2, #0
 800d860:	dd08      	ble.n	800d874 <scalbn+0x8c>
 800d862:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d866:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d86a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d86e:	ec45 4b10 	vmov	d0, r4, r5
 800d872:	bd70      	pop	{r4, r5, r6, pc}
 800d874:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d878:	da19      	bge.n	800d8ae <scalbn+0xc6>
 800d87a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d87e:	429e      	cmp	r6, r3
 800d880:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d884:	dd0a      	ble.n	800d89c <scalbn+0xb4>
 800d886:	a112      	add	r1, pc, #72	; (adr r1, 800d8d0 <scalbn+0xe8>)
 800d888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1e2      	bne.n	800d856 <scalbn+0x6e>
 800d890:	a30f      	add	r3, pc, #60	; (adr r3, 800d8d0 <scalbn+0xe8>)
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	f7f2 fe53 	bl	8000540 <__aeabi_dmul>
 800d89a:	e7cb      	b.n	800d834 <scalbn+0x4c>
 800d89c:	a10a      	add	r1, pc, #40	; (adr r1, 800d8c8 <scalbn+0xe0>)
 800d89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d0b8      	beq.n	800d818 <scalbn+0x30>
 800d8a6:	a10e      	add	r1, pc, #56	; (adr r1, 800d8e0 <scalbn+0xf8>)
 800d8a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8ac:	e7b4      	b.n	800d818 <scalbn+0x30>
 800d8ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d8b2:	3236      	adds	r2, #54	; 0x36
 800d8b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d8b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d8bc:	4620      	mov	r0, r4
 800d8be:	4b0c      	ldr	r3, [pc, #48]	; (800d8f0 <scalbn+0x108>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	e7e8      	b.n	800d896 <scalbn+0xae>
 800d8c4:	f3af 8000 	nop.w
 800d8c8:	c2f8f359 	.word	0xc2f8f359
 800d8cc:	01a56e1f 	.word	0x01a56e1f
 800d8d0:	8800759c 	.word	0x8800759c
 800d8d4:	7e37e43c 	.word	0x7e37e43c
 800d8d8:	8800759c 	.word	0x8800759c
 800d8dc:	fe37e43c 	.word	0xfe37e43c
 800d8e0:	c2f8f359 	.word	0xc2f8f359
 800d8e4:	81a56e1f 	.word	0x81a56e1f
 800d8e8:	43500000 	.word	0x43500000
 800d8ec:	ffff3cb0 	.word	0xffff3cb0
 800d8f0:	3c900000 	.word	0x3c900000

0800d8f4 <_init>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	bf00      	nop
 800d8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fa:	bc08      	pop	{r3}
 800d8fc:	469e      	mov	lr, r3
 800d8fe:	4770      	bx	lr

0800d900 <_fini>:
 800d900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d902:	bf00      	nop
 800d904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d906:	bc08      	pop	{r3}
 800d908:	469e      	mov	lr, r3
 800d90a:	4770      	bx	lr
